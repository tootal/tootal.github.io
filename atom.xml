<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>头头博客</title>
  
  <subtitle>在时光的流逝中，逐渐成为更好的自己。</subtitle>
  <link href="https://blog.tootal.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.tootal.xyz/"/>
  <updated>2021-03-31T10:42:26.000Z</updated>
  <id>https://blog.tootal.xyz/</id>
  
  <author>
    <name>黄智权</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode链表与二叉树模板总结</title>
    <link href="https://blog.tootal.xyz/posts/leetcode-template/"/>
    <id>https://blog.tootal.xyz/posts/leetcode-template/</id>
    <published>2021-03-30T16:09:20.000Z</published>
    <updated>2021-03-31T10:42:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>链表和二叉树是非常经典的数据结构，许多算法都是基于这两个数据结构之上的。最近刷了不少LeetCode上面相关的题目，发现这两种数据结构由于没有适当的输出函数或是表示形式，难以在本地进行调试，因此就想写一个关于链表与二叉树的相关模板。</p><p>模板基于LeetCode上的结构体定义，使用C++语言编写，支持链表和二叉树的创建与输出。</p><a id="more"></a><h2 id="单链表">单链表<a class="header-anchor" href="#单链表">#</a></h2><h3 id="结构体定义">结构体定义<a class="header-anchor" href="#结构体定义">#</a></h3><p>以LeetCode第二题<a href="https://leetcode-cn.com/problems/add-two-numbers/">两数相加</a>为例，代码模板中给出了单链表的结构体定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode() : val(<span class="number">0</span>), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="表示形式">表示形式<a class="header-anchor" href="#表示形式">#</a></h3><p>链表由于是线性结构，因此表示形式比较简单。采用<code>3 -&gt; 2 -&gt; 1</code>的形式来表示单链表。</p><h3 id="创建单链表">创建单链表<a class="header-anchor" href="#创建单链表">#</a></h3><p>通常来说创建上面的链表需要写如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListNode *root = <span class="keyword">new</span> ListNode(<span class="number">3</span>, <span class="keyword">new</span> ListNode(<span class="number">2</span>, <span class="keyword">new</span> ListNode(<span class="number">1</span>)));</span><br></pre></td></tr></table></figure><p>非常不直观，而且当结点数较多时编码麻烦，容易出错。采用C++11提供的可变参数模板技术编写<code>create_list</code>函数来创建一个单链表，目标是简化创建链表的过程。例如上面的代码块可以写成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListNode *root = create_list(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><code>create_list</code>的源代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建空链表</span></span><br><span class="line"><span class="function">ListNode *<span class="title">create_list</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">nullptr</span>; &#125;</span><br><span class="line"><span class="comment">// 创建单链表</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function">ListNode *<span class="title">create_list</span><span class="params">(<span class="keyword">const</span> T &amp;first, <span class="keyword">const</span> Args &amp;...rest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static_assert</span>(<span class="built_in">std</span>::is_same&lt;T, <span class="keyword">int</span>&gt;::value);</span><br><span class="line">    ListNode *head = <span class="keyword">new</span> ListNode(first);</span><br><span class="line">    head-&gt;next = create_list(rest...);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出单链表">输出单链表<a class="header-anchor" href="#输出单链表">#</a></h3><p>输出的本质就是转换为字符串，因此先重载了<code>to_string</code>函数来将单链表转换为字符串。实现代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res;</span><br><span class="line">    <span class="keyword">while</span> (head) &#123;</span><br><span class="line">        res.append(to_string(head-&gt;val));</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (head) res.append(<span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过重载输出流的<code>&lt;&lt;</code>运算符即可用标准输出语法来进行输出了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出单链表（指针形式）</span></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, ListNode *head) &#123;</span><br><span class="line">    <span class="keyword">return</span> (out &lt;&lt; to_string(head));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用示例">使用示例<a class="header-anchor" href="#使用示例">#</a></h3><p>以<a href="https://leetcode-cn.com/problems/add-two-numbers/">两数相加</a>这题为例，在编写完成类的成员函数之后，可以添加一个简单的<code>main</code>函数来进行测试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Solution().addTwoNumbers(</span><br><span class="line">        create_list(<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>),</span><br><span class="line">        create_list(<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>)</span><br><span class="line">    ) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 -&gt; 0 -&gt; 8</span><br></pre></td></tr></table></figure><h2 id="二叉树">二叉树<a class="header-anchor" href="#二叉树">#</a></h2><h3 id="结构体定义-2">结构体定义<a class="header-anchor" href="#结构体定义-2">#</a></h3><p>以<a href="https://leetcode-cn.com/problems/invert-binary-tree/">翻转二叉树</a>为例，代码模板中给出了二叉树的结构体定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二叉树结点定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    TreeNode() : val(<span class="number">0</span>), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) : val(x), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x, TreeNode *left, TreeNode *right)</span><br><span class="line">        : val(x), left(left), right(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="表示形式-2">表示形式<a class="header-anchor" href="#表示形式-2">#</a></h3><p>想为二叉树找到一种方便易用的表示形式不是那么容易。不同于链表，二叉树并非线性结构。一开始的想法是使用特殊字符在控制台以文本形式直接绘制二叉树，如下所示：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      1</span><br><span class="line">  ┌───┴───┐</span><br><span class="line">  2       3</span><br><span class="line">┌─┴─┐   ┌─┴─┐</span><br><span class="line">4   5   6   7</span><br></pre></td></tr></table></figure><p>由于不同系统的字体不同，因此上面的显示可能出现乱码的情况，实际的效果可以参考下图所示：</p><p><img src="/asset/5576324190372.png" alt=""></p><p>这确实非常直观，但给解析带来了非常大的难度，而且不方便输入。实际需要的是一种能快速进行转换的、线性的表示形式。参考算法竞赛中的树结构的输入形式，通常是指定结点数以及每个节点的左右孩子，例如上面的二叉树可以表示成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1 2 3</span><br><span class="line">2 4 5</span><br><span class="line">3 6 7</span><br><span class="line">4 -1 -1</span><br><span class="line">5 -1 -1</span><br><span class="line">6 -1 -1</span><br><span class="line">7 -1 -1</span><br></pre></td></tr></table></figure><p>这样解析和输入都很方便，缺点就是不够直观。最终选择了一种括号表示法，上面的二叉树可以表示成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 (2 4 5) (3 6 7)</span><br></pre></td></tr></table></figure><p>总体还是非常容易理解的，也比较直观，该表示法详细定义如下：</p><blockquote><p>二叉树T可以按如下方式表示：</p><ol><li>若T为空树，可表示为<code>()</code>。</li><li>若T只包含一个节点，则可表示为一个数字。</li><li>设T的左子树表示为L，右子树表示为R，T的值为N，则T可表示为<code>(N L R)</code>。</li><li>最终结果的最外层括号可以省略。</li></ol></blockquote><p>一个更复杂的例子如下图所示：</p><p><img src="/asset/49249186665.png" alt=""></p><p>它可以表示成：<code>3 (5 6 (2 7 4)) (1 0 8)</code>。</p><h3 id="创建二叉树">创建二叉树<a class="header-anchor" href="#创建二叉树">#</a></h3><p>明确了表示形式后，下一个目标就是实现从字符串解析出二叉树结构。这里采用了编译原理中的递归下降子程序的方法进行解析，实现代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空二叉树（返回空指针）</span></span><br><span class="line"><span class="function">TreeNode *<span class="title">create_tree</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">nullptr</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从字符串创建一颗二叉树</span></span><br><span class="line"><span class="comment">// 格式类似于：1 (2 3 4) (5 () 6)</span></span><br><span class="line"><span class="function">TreeNode *<span class="title">create_tree</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;str)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(str)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (s.front() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">        s.insert(s.begin(), <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        s.insert(s.end(), <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">size_t</span> n = s.length();</span><br><span class="line">    <span class="keyword">auto</span> expect_int = [&amp;](<span class="keyword">size_t</span> &amp;i) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; s[i] == <span class="string">&#x27; &#x27;</span>) i++;</span><br><span class="line">        <span class="keyword">if</span> (i == n || !<span class="built_in">isdigit</span>(s[i])) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; <span class="built_in">isdigit</span>(s[i])) &#123;</span><br><span class="line">            ans = ans * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">std</span>::function&lt;TreeNode *(<span class="keyword">size_t</span> &amp;)&gt; expect_node = [&amp;](<span class="keyword">size_t</span> &amp;i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; s[i] != <span class="string">&#x27;(&#x27;</span> &amp;&amp; !<span class="built_in">isdigit</span>(s[i])) i++;</span><br><span class="line">        TreeNode *node = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n &amp;&amp; s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> val = expect_int(i);</span><br><span class="line">        <span class="keyword">if</span> (val &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            node = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                node-&gt;left = expect_node(i);</span><br><span class="line">                node-&gt;right = expect_node(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag &amp;&amp; i &lt; n &amp;&amp; s[i] == <span class="string">&#x27;)&#x27;</span>) i++;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> expect_node(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法过程如下，首先尝试在最外层添加括号，将整个表达式看作一个非终结符（节点），对应的子程序为<code>expect_node</code>。<code>flag</code>用于记录是否存在括号，接着尝试匹配终结符（数字），对应于子程序<code>expect_int</code>，它尝试从当前位置解析出一个数字，若不可行，则返回-1。若存在括号的话，就递归解析左右子节点。</p><h3 id="输出二叉树">输出二叉树<a class="header-anchor" href="#输出二叉树">#</a></h3><p>与单链表类似，同样重载<code>to_string</code>来将二叉树转换为字符串再进行输出，实现代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将二叉树转换为字符串形式</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="string">&quot;()&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) <span class="keyword">return</span> to_string(root-&gt;val);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + to_string(root-&gt;val) + <span class="string">&quot; &quot;</span> + to_string(root-&gt;left) + <span class="string">&quot; &quot;</span> +</span><br><span class="line">           to_string(root-&gt;right) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即递归地将当前节点以及左右子树转换为字符串形式。同样重载<code>&lt;&lt;</code>运算符以支持标准流输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出二叉树</span></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, TreeNode *root) &#123;</span><br><span class="line">    <span class="keyword">return</span> (out &lt;&lt; to_string(root));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用示例-2">使用示例<a class="header-anchor" href="#使用示例-2">#</a></h3><p>以<a href="https://leetcode-cn.com/problems/invert-binary-tree/">翻转二叉树</a>这题为例，可以使用如下代码进行测试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Solution().invertTree(</span><br><span class="line">        create_tree(<span class="string">&quot;4 (2 1 3) (7 6 9)&quot;</span>)</span><br><span class="line">    ) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(4 (7 9 6) (2 3 1))</span><br></pre></td></tr></table></figure><h2 id="总结">总结<a class="header-anchor" href="#总结">#</a></h2><p>将上面的所有代码以及对STL容器的输出支持整合成单个文件，使用时只要包含<code>leetcode.h</code>头文件即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LEETCODE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEETCODE_H</span></span><br><span class="line"><span class="comment">// LeetCode 刷题模板 by tootal 20210331</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单链表定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode() : val(<span class="number">0</span>), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建空链表</span></span><br><span class="line"><span class="function">ListNode *<span class="title">create_list</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">nullptr</span>; &#125;</span><br><span class="line"><span class="comment">// 创建单链表</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function">ListNode *<span class="title">create_list</span><span class="params">(<span class="keyword">const</span> T &amp;first, <span class="keyword">const</span> Args &amp;...rest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static_assert</span>(<span class="built_in">std</span>::is_same&lt;T, <span class="keyword">int</span>&gt;::value);</span><br><span class="line">    ListNode *head = <span class="keyword">new</span> ListNode(first);</span><br><span class="line">    head-&gt;next = create_list(rest...);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树结点定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    TreeNode() : val(<span class="number">0</span>), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) : val(x), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x, TreeNode *left, TreeNode *right)</span><br><span class="line">        : val(x), left(left), right(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个空二叉树（返回空指针）</span></span><br><span class="line"><span class="function">TreeNode *<span class="title">create_tree</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">nullptr</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从字符串创建一颗二叉树</span></span><br><span class="line"><span class="comment">// 格式类似于：1 (2 3 4) (5 () 6)</span></span><br><span class="line"><span class="function">TreeNode *<span class="title">create_tree</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;str)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(str)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (s.front() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">        s.insert(s.begin(), <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        s.insert(s.end(), <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">size_t</span> n = s.length();</span><br><span class="line">    <span class="keyword">auto</span> expect_int = [&amp;](<span class="keyword">size_t</span> &amp;i) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; s[i] == <span class="string">&#x27; &#x27;</span>) i++;</span><br><span class="line">        <span class="keyword">if</span> (i == n || !<span class="built_in">isdigit</span>(s[i])) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; <span class="built_in">isdigit</span>(s[i])) &#123;</span><br><span class="line">            ans = ans * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">std</span>::function&lt;TreeNode *(<span class="keyword">size_t</span> &amp;)&gt; expect_node = [&amp;](<span class="keyword">size_t</span> &amp;i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; s[i] != <span class="string">&#x27;(&#x27;</span> &amp;&amp; !<span class="built_in">isdigit</span>(s[i])) i++;</span><br><span class="line">        TreeNode *node = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n &amp;&amp; s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> val = expect_int(i);</span><br><span class="line">        <span class="keyword">if</span> (val &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            node = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                node-&gt;left = expect_node(i);</span><br><span class="line">                node-&gt;right = expect_node(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag &amp;&amp; i &lt; n &amp;&amp; s[i] == <span class="string">&#x27;)&#x27;</span>) i++;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> expect_node(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// to_string系列函数定义</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">bool</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">char</span> c)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">string</span> s)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">pair</span>&lt;T1, T2&gt; x)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">vector</span>&lt;T&gt; x)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">stack</span>&lt;T&gt; x)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">queue</span>&lt;T&gt; x)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(ListNode *head)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(TreeNode *root)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// to_string系列函数实现</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">bool</span> x)</span> </span>&#123; <span class="keyword">return</span> x ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>; &#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;\&#x27;&quot;</span> + <span class="built_in">string</span>(<span class="number">1</span>, c) + <span class="string">&quot;\&#x27;&quot;</span>; &#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;\&quot;&quot;</span> + <span class="built_in">string</span>(s) + <span class="string">&quot;\&quot;&quot;</span>; &#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;\&quot;&quot;</span> + s + <span class="string">&quot;\&quot;&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">pair</span>&lt;T1, T2&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + to_string(x.first) + <span class="string">&quot;, &quot;</span> + to_string(x.second) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">vector</span>&lt;T&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res = <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;i : x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first) &#123;</span><br><span class="line">            first = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res += <span class="string">&quot;, &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res += to_string(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将栈转换为字符串表示，形式如下：</span></span><br><span class="line"><span class="comment">// 栈底     栈顶</span></span><br><span class="line"><span class="comment">//  |        |</span></span><br><span class="line"><span class="comment">// [1, 3, 2, 4)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">stack</span>&lt;T&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res;</span><br><span class="line">    <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!x.empty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first) &#123;</span><br><span class="line">            first = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = <span class="string">&quot;, &quot;</span> + res;</span><br><span class="line">        &#125;</span><br><span class="line">        res = to_string(x.top()) + res;</span><br><span class="line">        x.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + res + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将队列转换为字符串表示，形式如下：</span></span><br><span class="line"><span class="comment">// 队首     队尾</span></span><br><span class="line"><span class="comment">//  |        |</span></span><br><span class="line"><span class="comment">// (1, 3, 2, 4)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">queue</span>&lt;T&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res;</span><br><span class="line">    <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!x.empty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first) &#123;</span><br><span class="line">            first = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = res + <span class="string">&quot;, &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res = res + to_string(x.front());</span><br><span class="line">        x.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + res + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res;</span><br><span class="line">    <span class="keyword">while</span> (head) &#123;</span><br><span class="line">        res.append(to_string(head-&gt;val));</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (head) res.append(<span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将二叉树转换为字符串形式</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="string">&quot;()&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) <span class="keyword">return</span> to_string(root-&gt;val);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + to_string(root-&gt;val) + <span class="string">&quot; &quot;</span> + to_string(root-&gt;left) + <span class="string">&quot; &quot;</span> +</span><br><span class="line">           to_string(root-&gt;right) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出单链表（指针形式）</span></span><br><span class="line"><span class="built_in">std</span>::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream &amp;out, ListNode *head) &#123;</span><br><span class="line">    <span class="keyword">return</span> (out &lt;&lt; to_string(head));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出单链表（引用形式）</span></span><br><span class="line"><span class="built_in">std</span>::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream &amp;out, ListNode &amp;head) &#123;</span><br><span class="line">    <span class="keyword">return</span> (out &lt;&lt; &amp;head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出二叉树</span></span><br><span class="line"><span class="built_in">std</span>::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream &amp;out, TreeNode *root) &#123;</span><br><span class="line">    <span class="keyword">return</span> (out &lt;&lt; to_string(root));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="built_in">vector</span>&lt;T&gt; x) &#123;</span><br><span class="line">    <span class="keyword">return</span> (out &lt;&lt; to_string(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="built_in">stack</span>&lt;T&gt; x) &#123;</span><br><span class="line">    <span class="keyword">return</span> (out &lt;&lt; to_string(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="built_in">queue</span>&lt;T&gt; x) &#123;</span><br><span class="line">    <span class="keyword">return</span> (out &lt;&lt; to_string(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="built_in">pair</span>&lt;T1, T2&gt; x) &#123;</span><br><span class="line">    <span class="keyword">return</span> (out &lt;&lt; to_string(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showcase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 单链表</span></span><br><span class="line">    ListNode *mylist = create_list(<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mylist &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">// 二叉树</span></span><br><span class="line">    TreeNode *mytree = create_tree(<span class="string">&quot;1 (2 3 4) (5 () 6)&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mytree &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">// pair</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">make_pair</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">pair</span>&#123;<span class="number">1</span>, <span class="built_in">pair</span>&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&quot;123&quot;</span>&#125;&#125; &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">make_pair</span>(create_list(<span class="number">3</span>, <span class="number">2</span>), <span class="number">123</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">// vector</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">vector</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">vector</span>&#123;<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;123&quot;</span>&#125; &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">vector</span>&#123;<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>&#125; &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">vector</span>&#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125; &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">// stack</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) st.push(i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; st &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">// queue</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) que.push(i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; que &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LEETCODE_H</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;链表和二叉树是非常经典的数据结构，许多算法都是基于这两个数据结构之上的。最近刷了不少LeetCode上面相关的题目，发现这两种数据结构由于没有适当的输出函数或是表示形式，难以在本地进行调试，因此就想写一个关于链表与二叉树的相关模板。&lt;/p&gt;
&lt;p&gt;模板基于LeetCode上的结构体定义，使用C++语言编写，支持链表和二叉树的创建与输出。&lt;/p&gt;</summary>
    
    
    
    
    <category term="链表" scheme="https://blog.tootal.xyz/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="二叉树" scheme="https://blog.tootal.xyz/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="LeetCode" scheme="https://blog.tootal.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>给VNote添加任务系统</title>
    <link href="https://blog.tootal.xyz/posts/vnote-task/"/>
    <id>https://blog.tootal.xyz/posts/vnote-task/</id>
    <published>2021-01-28T14:09:41.000Z</published>
    <updated>2021-01-29T07:40:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://vnotex.github.io/vnote/zh_cn/">VNote</a>是一款专为Markdown设计的Vim风格笔记应用程序。目前使用已经两年多了，平时用来记录、摘抄都挺方便的。略有不方便的地方就是VNote不能方便地运行一些外部工具，例如：</p><ul><li>通过<a href="https://git-scm.com/">Git</a>进行笔记的版本控制</li><li>将多个终端的笔记通过<a href="https://help.jianguoyun.com/?p=2064">坚果云</a>进行同步</li><li>将写好的Markdown文档通过<a href="https://hexo.io/zh-cn/">Hexo</a>渲染预览并发布</li><li>调用外部编辑器如<a href="https://typora.io/">Typora</a>或是<a href="https://code.visualstudio.com/">VS Code</a>进行进一步编辑</li></ul><p>在本文中，我将为VNote设计实现一个任务系统来运行外部工具，从而解决上面这些问题。</p><a id="more"></a><p>这些常用的功能大多可以通过运行命令行工具来完成，鉴于它们的常用性，有必要将其集成在VNote内部，这样无需在需要调用外部工具时输入命令行，或是编写代码。在 <a href="https://github.com/vnotex/vnote/releases/tag/v2.10">VNote 2.10</a> 版本中，添加了调用Git的功能。但局限性较大，无法进行扩展。</p><h2 id="相关介绍">相关介绍<a class="header-anchor" href="#相关介绍">#</a></h2><p>目前许多文本编辑器或是IDE都有执行外部命令的功能，它们的可配置性较高。例如VSCode的<a href="https://code.visualstudio.com/docs/editor/tasks">Tasks</a> 、Sublime Text的<a href="https://www.sublimetext.com/docs/3/build_systems.html">Build Systems</a> 、IntelliJ IDEA的<a href="https://www.jetbrains.com/help/idea/2020.3/settings-tools-external-tools.html">External Tools</a> 、Qt Creator的<a href="https://doc.qt.io/qtcreator/creator-editor-external.html">External Tools</a> 以及Visual Studio的<a href="https://docs.microsoft.com/en-us/visualstudio/ide/managing-external-tools?f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(VS.ExternalTools)%26rd%3Dtrue&amp;view=vs-2019">External tools</a> 。VNote的任务系统主要参考的是VSCode的<a href="https://code.visualstudio.com/docs/editor/tasks">Tasks</a> ，并结合了其它实现的一些优点。由于VNote <a href="https://github.com/vnotex/vnote/tree/vnote2.0">v2版本代码</a>不再维护，且v3版本已处于beta阶段，因此任务系统首先考虑在v3版本添加。此外，由于内容较多，下面列出的一些功能仅仅是设计阶段的一些想法，并未完全实现。尚未实现的功能均有所标注。</p><p>要知道运行什么任务、如何运行，必须进行配置。综合来看，目前的配置方式主要分为两大类：编写配置文件、图形化配置界面。其中VSCode采用的是<a href="https://code.visualstudio.com/docs/editor/tasks-appendix">.vscode/tasks.json</a>配置文件，Sublime Text采用的是<a href="https://www.sublimetext.com/docs/3/build_systems.html#options">name.sublime-build</a>配置文件，均为类似JSON格式的配置文件。配置文件示例如下所示：</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#taskconfig-VSCode配置文件">                        VSCode配置文件                    </a>                   </li><li class="tab ">                    <a href="#taskconfig-Sublime Text配置文件">                        Sublime Text配置文件                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="taskconfig-VSCode配置文件" class="tab-content "><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Run tests&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;./scripts/test.sh&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;windows&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;.\\scripts\\test.cmd&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;group&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;panel&quot;</span>: <span class="string">&quot;new&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="taskconfig-Sublime Text配置文件" class="tab-content is-hidden"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;shell_cmd&quot;</span>: <span class="string">&quot;g++ \&quot;$&#123;file&#125;\&quot; -o \&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;\&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;file_regex&quot;</span>: <span class="string">&quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;working_dir&quot;</span>: <span class="string">&quot;$&#123;file_path&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;selector&quot;</span>: <span class="string">&quot;source.c++&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;variants&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Run&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;shell_cmd&quot;</span>: <span class="string">&quot;g++ \&quot;$&#123;file&#125;\&quot; -o \&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;\&quot; &amp;&amp; \&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;\&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>                  </div><p>其余IDE大多采用图形化配置，如下图所示。</p><div class="justified-gallery my-3"> <p><img src="/asset/20210127163819794_16451.png" alt="Visual Studio的External Tools"><br><img src="/asset/20210127164032786_2913.png" alt="IntelliJ IDEA的External Tools"><br><img src="/asset/20210127164143272_23092.png" alt="Qt Creator的External Tools"></p> </div><p>考虑到目前VNote也是主要采用JSON格式的配置文件，因此任务系统也通过JSON文件进行配置。后续会考虑在设置里添加图形化配置方式。</p><h2 id="下载开发版本">下载开发版本<a class="header-anchor" href="#下载开发版本">#</a></h2><p>目前任务系统仍然处于开发过程中，可以<a href="https://github.com/tootal/vnote/tree/feat-task">在此</a>查看相关代码。</p><p>通过下面的按钮可以下载包含任务系统功能的测试版本：</p><p class="buttons are-large"> <a class=" button  is-primary" href="https://github.com/tootal/vnote/releases/download/continuous-build/vnote-win-x64.zip"><i class="fab                             fa-windows mr-2"></i><span>Windows x64</span></a><a class=" button  is-info" href="https://github.com/tootal/vnote/releases/download/continuous-build/vnote-win-x86.zip"><i class="fab                             fa-windows mr-2"></i><span>Windows x86</span></a><a class=" button  is-dark" href="https://github.com/tootal/vnote/releases/download/continuous-build/vnote-mac-x64.dmg"><i class="fab                             fa-apple mr-2"></i><span>macOS</span></a><a class=" button  is-warning" href="https://github.com/tootal/vnote/releases/download/continuous-build/vnote-linux-x64.AppImage"><i class="fab                             fa-linux mr-2"></i><span>Linux</span></a> </p><p>如果你对VSCode Task熟悉，想知道它们之间有什么区别，可以直接查看<a href="#VS-Code-Task">对比VSCode Task</a>。</p><h2 id="快速上手">快速上手<a class="header-anchor" href="#快速上手">#</a></h2><h3 id="Hello-World">Hello World<a class="header-anchor" href="#Hello-World">#</a></h3><p>一个最简单的示例莫过于在屏幕上输出<code>helloworld</code>了。通过右上角的设置菜单打开用户配置文件夹。</p><p><img src="/asset/20210130205350994_4518.png" alt=""></p><p>在<code>tasks</code>文件夹内新建一个<code>hello.json</code>文件，输入如下内容。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;echo helloworld&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存文件后，可以发现主菜单多了一个<code>hello</code>菜单项，点击该菜单项即可运行上述任务。</p><p><img src="/asset/20210130233534445_30193.png" alt=""></p><p>运行任务时会自动弹出下方的输出面板，在输出面板可以查看任务运行过程中的输出信息。如果你看到了<code>helloworld</code>显示在下方的输出面板中，说明任务运行成功了。在默认情况下，VNote会把命令传递给系统默认的命令解释器（Windows平台使用<code>PowerShell.exe</code>，Linux和macOS平台使用<code>/bin/bash</code>）执行，并接收输出的结果显示在输出面板上。对于支持的所有配置项及其含义，请参考<a href="#%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE">任务配置</a>。</p><h3 id="自定义菜单项">自定义菜单项<a class="header-anchor" href="#自定义菜单项">#</a></h3><p>对于每个任务，VNote会自动在主界面生成一个菜单项与之对应，默认使用文件名或命令值作为菜单名称。通过<code>label</code>、<code>icon</code>以及<code>shortcut</code>可以指定任务的名称（Hello）、图标（<a href="https://fontawesome.com/icons/tasks?style=solid">tasks-solid.svg</a>）以及快捷键（<code>Alt+H, T</code>）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;tasks-solid.svg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;shortcut&quot;</span>: <span class="string">&quot;Alt+H, T&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;echo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;Hello tasks!&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时主界面的菜单项会加上图标及快捷键。按快捷键<code>Alt+H, T</code>即可运行该任务。</p><div class="justified-gallery my-3"> <p><img src="/asset/20210131013045872_3571.png" alt="纯净"><br><img src="/asset/20210131013811773_17529.png" alt="月夜"><br><img src="/asset/20210131013855368_1962.png" alt="原素"></p> </div><p>提示：尽量使用SVG格式的图标，VNote会根据当前主题调整图标颜色，以达到更好的显示效果。</p><p>任务同时还可以包含若干个子任务，支持无限层级的嵌套，在菜单栏中展示为多级子菜单。如下是一个<code>Hello Tasks</code>任务，包含三个子任务<code>Hello Cat</code>、<code>Hello Dove</code>和<code>Hello Fish</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Hello Tasks&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;tasks-solid.svg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;shortcut&quot;</span>: <span class="string">&quot;Alt+H, T&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;echo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;Hello tasks!&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Hello Cat&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;cat-solid.svg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;shortcut&quot;</span>: <span class="string">&quot;Alt+H, C&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;Hello cat!&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Hello Dove&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;dove-solid.svg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;shortcut&quot;</span>: <span class="string">&quot;Alt+H, D&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;Hello dove!&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Hello Fish&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;fish-solid.svg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;shortcut&quot;</span>: <span class="string">&quot;Alt+H, F&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;Hello fish!&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的子任务没有配置<code>command</code>但依然可以执行，这是因为子任务会从父任务中继承大部分常见属性（如<code>type</code>、<code>command</code>、<code>args</code>）。</p><p><img src="/asset/20210131143000015_8523.png" alt=""></p><p>注意：请尽量不要在包含子任务的任务中配置命令，因为菜单项的点击操作默认实现为展开下一级菜单，从而导致无法通过点击菜单项来触发任务执行，但仍然可以通过快捷键方式执行任务。</p><h3 id="特殊字符处理">特殊字符处理<a class="header-anchor" href="#特殊字符处理">#</a></h3><p>当命令或参数包含特殊字符（如空格）时通常需要进行特殊的处理，由于不同命令解释器的语法大相径庭，没有统一的处理方法。默认情况下，VNote会进行如下处理。</p><p>当满足下面所有条件时，VNote会自动在<strong>参数</strong>两端加上双引号。</p><ul><li>当不指定<code>type</code>或<code>type</code>为<code>shell</code></li><li>同时指定<code>command</code>和<code>args</code></li><li>参数中包含空格</li></ul><p>当满足下面所有条件时，VNote会用空格分隔将命令和参数合并成一个字符串并在两端加上双引号，同时转义内部的双引号。</p><ul><li>当不指定<code>type</code>或<code>type</code>为<code>shell</code></li><li>当<code>shell</code>为<code>bash</code></li></ul><p>例如在Linux下运行之前的Hello Tasks 示例，命令将被处理成：（可在运行日志中查看）</p><p><code>run task &quot;/bin/bash&quot; (&quot;-c&quot;, &quot;echo \\\&quot;Hello tasks!\\\&quot;&quot;)</code></p><p><img src="/asset/20210131150114081_29346.png" alt=""></p><p>输出结果两端会出现多余的双引号，通过仅指定<code>command</code>或用<code>process</code>方式启动任务可以手动处理特殊字符。</p><h3 id="启动外部程序">启动外部程序<a class="header-anchor" href="#启动外部程序">#</a></h3><p>默认情况下<code>command</code>会作为shell命令执行（即默认<code>type</code>为<code>shell</code>），通过指定<code>type</code>为<code>process</code>可以将<code>command</code>作为外部程序运行。下面是一个示例，在Typora或VS Code中打开当前文件。其中<code>$&#123;file&#125;</code>是一个变量，会在运行时替换为当前打开的文件路径。关于变量的更多信息，请参考<a href="#%E5%8F%98%E9%87%8F%E6%9B%BF%E6%8D%A2">变量替换</a>。</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#openexternal-Windows">                        <i class="fab                             fa-windows mr-2"></i>Windows                    </a>                   </li><li class="tab ">                    <a href="#openexternal-Linux">                        <i class="fab                             fa-linux mr-2"></i>Linux                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="openexternal-Windows" class="tab-content "><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;process&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Open File with&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;$&#123;file&#125;&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Typora&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;Typora.svg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;C:\\Programs\\Typora0.9.98\\x64\\Typora.exe&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;VS Code&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;vscode.svg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;C:\\Users\\tootal\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/asset/20210131161734576_12333.gif" alt="启动Typora和VSCode"></p></div><div id="openexternal-Linux" class="tab-content is-hidden"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;process&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Open File with&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;$&#123;file&#125;&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Typora&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;Typora.svg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;/usr/bin/typora&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;VS Code&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;vscode.svg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;/usr/bin/code&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/asset/20210131165036397_2406.gif" alt="在Typora或VSCode打开当前文件"></p></div>                  </div><p>由于VNote默认不包含控制台窗口，因此启动一些命令行程序时可能会出现问题，此时可以通过<code>shell</code>命令启动一个单独的窗口来解决。对于Windows可以用<code>start vim.exe</code>，对于Linux平台可以用<code>gnome-terminal</code>、<code>konsole</code>或<code>xterm</code>等。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Vim&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;vim.svg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;process&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;gnome-terminal&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;--execute&quot;</span>,</span><br><span class="line">        <span class="string">&quot;vim&quot;</span>,</span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/asset/20210131174128746_9517.gif" alt="在VIM打开当前文件"></p><h3 id="多语言与多平台">多语言与多平台<a class="header-anchor" href="#多语言与多平台">#</a></h3><p>任务配置文件支持针对特定平台进行配置，通过<code>windows</code>、<code>linux</code>或<code>osx</code>属性可以指定Windows、Linux、macOS平台下特定的配置。平台特定配置会对基础配置进覆盖，但<code>tasks</code>配置会进行合并。例如可以将上面的启动外部程序的配置文件合并，使其在Windows平台和Linux平台均能正常工作。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;process&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Open File with&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;$&#123;file&#125;&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Typora&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;Typora.svg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;windows&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;C:\\Programs\\Typora0.9.98\\x64\\Typora.exe&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;linux&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;/usr/bin/typora&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;VS Code&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;vscode.svg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;windows&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;C:\\Users\\tootal\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;linux&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;/usr/bin/code&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任务配置文件也支持多语言配置，对于<code>label</code>、<code>command</code>、<code>args</code>属性，除字符串外还可传入一个<code>LocaleString</code>对象。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;label&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;en_US&quot;</span>: <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;zh_CN&quot;</span>: <span class="string">&quot;你好&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;tasks-solid.svg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;echo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;en_US&quot;</span>: <span class="string">&quot;Cat&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;zh_CN&quot;</span>: <span class="string">&quot;猫&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;cat-solid.svg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;shortcut&quot;</span>: <span class="string">&quot;Alt+H, C&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;en_US&quot;</span>: <span class="string">&quot;Hello cat!&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;zh_CN&quot;</span>: <span class="string">&quot;你好，猫！&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;en_US&quot;</span>: <span class="string">&quot;Dove&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;zh_CN&quot;</span>: <span class="string">&quot;鸽子&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;dove-solid.svg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;shortcut&quot;</span>: <span class="string">&quot;Alt+H, D&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;en_US&quot;</span>: <span class="string">&quot;Hello dove!&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;zh_CN&quot;</span>: <span class="string">&quot;你好，鸽子！&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Fish&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;fish-solid.svg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;shortcut&quot;</span>: <span class="string">&quot;Alt+H, F&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;en_US&quot;</span>: <span class="string">&quot;Hello fish!&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;zh_CN&quot;</span>: <span class="string">&quot;你好，鱼！&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/asset/20210131171051185_10427.png" alt=""></p><p>注意：切换VNote语言后需要重启才能生效。</p><h3 id="任务运行出错">任务运行出错<a class="header-anchor" href="#任务运行出错">#</a></h3><p>当任务运行出错时，会在输出面板显示错误消息，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Task Typora error occurred with code 0]</span><br></pre></td></tr></table></figure><p>其中<a href="https://doc.qt.io/qt-5.12/qprocess.html#ProcessError-enum">错误代码</a>的含义如下：</p><table><thead><tr><th>错误代码</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>任务启动失败，可能是命令或参数错误。</td></tr><tr><td>1</td><td>任务启动成功，但在运行时崩溃了。</td></tr><tr><td>2</td><td>任务运行超时。</td></tr><tr><td>3</td><td>尝试读取时出现错误。</td></tr><tr><td>4</td><td>尝试写入时出现错误。</td></tr><tr><td>5</td><td>未知错误。</td></tr></tbody></table><h3 id="笔记本任务配置">笔记本任务配置<a class="header-anchor" href="#笔记本任务配置">#</a></h3><p>有些任务并不是每个笔记本都需要执行的，例如“通过<a href="https://hexo.io/zh-cn/">Hexo</a>渲染预览并发布”通常仅在特定的笔记本需要，此时可以创建一个笔记本层级的任务配置。VNote任务系统支持如下三个层级的配置文件：</p><ul><li>全局任务配置：配置文件保存在全局配置文件夹中，软件安装时自动添加。例如<code>C:\Users\tootal\AppData\Roaming\VNote\VNote\tasks</code>文件夹下的<code>*.json</code>文件。</li><li>用户任务配置：配置文件保存在用户配置文件夹中，由用户自行添加。例如<code>C:\Users\tootal\AppData\Local\VNote\VNote\tasks</code>文件夹下的<code>*.json</code>文件。</li><li>笔记本任务配置：配置文件保存在笔记本文件夹中，由用户自行添加。例如<code>C:\Users\tootal\Documents\vnote_notebooks\testtask\vx_notebook\tasks</code>文件夹下的<code>*.json</code>文件。</li></ul><p>注意：笔记本层级的任务，如果之前不存在<code>tasks</code>文件夹，需要新建一个并刷新笔记本。</p><h2 id="任务配置">任务配置<a class="header-anchor" href="#任务配置">#</a></h2><p>在VNote启动时会自动加载任务配置文件，配置文件修改后需要重新启动VNote生效。在上述文件夹及其子文件夹下的<code>*.json</code>文件均会被识别为任务配置文件。一个任务可以包含若干个子任务，在界面上显示为多级菜单项。任务配置文件与VSCode的相似而略有不同，一个任务包含如下配置项：</p><ul><li>[x] <code>version</code>，配置文件版本，默认值为最新版本。</li><li>[ ] <code>id</code>，任务标号，用于任务依赖及快捷键设置。</li><li>[x] <code>label</code>，任务名称（可翻译），根任务的默认值为文件名，子任务的默认值为<code>command</code>。</li><li>[x] <code>type</code>，任务类型，可以是<code>process</code>或<code>shell</code>，表示执行一个单独的程序还是执行一个shell命令，默认值为<code>shell</code>。</li><li>[x] <code>command</code>，任务命令（可翻译），需要执行的命令，可选，默认值为空表示不执行。</li><li>[x] <code>args</code>，任务参数（可翻译）。</li><li>[x] <code>options</code>，任务运行配置。<ul><li>[x] <code>cwd</code>，任务工作目录。缺失时依次尝试下列值：<ul><li>当前笔记本根目录</li><li>当前文件所在目录</li><li>当前任务配置文件所在目录。</li></ul></li><li>[x] <code>env</code>，任务运行时环境变量。</li><li>[x] <code>shell</code>，shell配置，仅当任务类型为<code>shell</code>时生效。<ul><li>[x] <code>executable</code>，shell可执行文件。</li><li>[x] <code>args</code>，shell启动参数</li></ul></li></ul></li><li>[x] <code>tasks</code>，子任务配置。</li><li>[x] <code>inputs</code>，输入变量配置。<ul><li>[x] <code>id</code>，输入变量id。【必要】</li><li>[x] <code>type</code>，输入变量类型，可以是下列值，默认值为<code>promptString</code>。<ul><li><code>promptString</code>，弹出一个输入框</li><li><code>pickString</code>，弹出一个选择框（尚未完全实现）</li></ul></li><li>[x] <code>description</code>，输入变量描述（可翻译）。</li><li>[x] <code>default</code>，输入变量默认值 （可翻译），当输入变量类型为<code>pickString</code>时，<code>options</code>需要包含<code>default</code>。</li><li>[x] <code>password</code>，输入模式，布尔值，默认值为<code>false</code>，仅当输入变量类型为<code>promptString</code>时生效。</li><li>[x] <code>options</code>，输入选项（可翻译），仅当输入变量类型为<code>promptString</code>时生效。</li></ul></li><li>[x] <code>windows</code>，Windows平台特定配置。</li><li>[x] <code>linux</code>，Linux平台特定配置。</li><li>[x] <code>osx</code>，macOS平台特定配置。</li><li>[ ] <code>dependsOn</code>，任务依赖。</li><li>[ ] <code>dependsOrder</code>，任务依赖顺序，可以是<code>parallel</code>或<code>sequence</code>，默认值为<code>parallel</code>。</li><li>[ ] <code>presentation</code>，输出配置。<ul><li>[ ] <code>reveal</code>，控制输出面板。可以是<code>always</code>（总是显示输出面板），<code>never</code>（从不显示输出面板），<code>silent</code>（仅当有输出时显示），默认值为<code>always</code>。</li><li>[ ] <code>clear</code>，控制是否清除之前任务的输出，布尔值，默认值为<code>false</code>。</li></ul></li><li>[ ] <code>runOptions</code>，任务运行时配置。<ul><li>[ ] <code>runOn</code>，任务触发方式，可以是下列值。<ul><li><code>default</code>，手动触发。</li><li><code>notebookOpen</code>，打开笔记本时触发（仅支持笔记本级别的任务配置）。</li><li><code>notebookClose</code>，关闭笔记本时触发（仅支持笔记本级别的任务配置）。</li><li><code>appOpen</code>，打开VNote时触发。</li><li><code>appClose</code>，关闭VNote时触发。</li></ul></li></ul></li></ul><p>所有配置项除注明【必要】外均为可选，标注有（可翻译）的配置项可以传入一个字符串或一个指定<code>locale</code>的对象。子任务会从父任务中继承除<code>label</code>、<code>inputs</code>和<code>tasks</code>以外的值。平台特定配置中的<code>tasks</code>会进行合并，其余配置会被覆盖。配置项缺失时采用默认值。具体用法可参考下方示例或文章末尾处的完整的配置文件格式。</p><p>在不同平台下会使用不同的默认shell，对于Windows平台默认使用<code>PowerShell.exe</code>，Linux和macOS平台则默认使用<code>/bin/bash</code>。对于一些常见的shell提供了默认的启动参数。</p><table><thead><tr><th style="text-align:center">Shell</th><th style="text-align:center">Shell args</th></tr></thead><tbody><tr><td style="text-align:center">cmd.exe</td><td style="text-align:center">[“/C”]</td></tr><tr><td style="text-align:center">PowerShell.exe</td><td style="text-align:center">[“-Command”]</td></tr><tr><td style="text-align:center">/bin/bash</td><td style="text-align:center">[“-c”]</td></tr></tbody></table><p>一个配置好的任务可以通过如下方式进行调用：</p><ul><li>[x] 主界面菜单项。在软件主菜单界面添加一个<strong>任务</strong>菜单项，其下列出一些功能以及通过配置文件定义的任务。触发该菜单项即可运行对应的任务。这也是目前主流的做法。</li><li>[x] 快捷键。如果需要频繁运行某个任务，可以为其定义一个快捷键。</li><li>[ ] 通用入口。在VNote v2版本中存在的一个功能，类似于VSCode或Sublime Text的快速命令面板，但目前在v3版本尚未迁移。</li><li>[ ] 自动调用。默认情况下只有手动触发才能调用工具，但有时在恰当的时机自动运行工具可能会非常方便。例如打开笔记本时自动与云端进行同步，关闭笔记本时自动提交所有修改到版本控制系统。这样不仅缩短了操作流程，还可以避免忘记运行。</li></ul><h2 id="变量替换">变量替换<a class="header-anchor" href="#变量替换">#</a></h2><p>在配置文件中获取当前运行时的一些参数是非常有用的，例如当前打开的笔记本，正在编辑或查看的文件。参考<a href="https://code.visualstudio.com/docs/editor/variables-reference">VSCode提供的变量</a>，VNote的任务系统配置同样采用<code>$&#123;variableName&#125;</code>的语法，支持以下类型的变量，</p><ul><li>[x] 预定义变量，提供上下文信息，如<code>$&#123;notebookFolder&#125;</code>、<code>$&#123;file&#125;</code>。</li><li>[x] 幻词变量，如<code>$&#123;magic:datetime&#125;</code>、<code>$&#123;magic:random&#125;</code>。</li><li>[x] 环境变量，提供系统环境变量，如<code>$&#123;env:USERNAME&#125;</code>、<code>$&#123;env:JAVA_HOME&#125;</code>。</li><li>[x] 配置变量，提供VNote配置信息，如<code>$&#123;config:core.locale&#125;</code>。</li><li>[x] 输入变量，提供简单的交互功能，如<code>$&#123;input:who&#125;</code>。</li><li>[x] Shell变量，获取Shell命令的结果，如<code>$&#123;shell:&#125;</code>，对于复杂的命令可以使用输出变量。</li></ul><p>对于同一个配置项中出现的同一个输入变量仅求值一次。暂不支持嵌套变量替换。</p><h3 id="预定义变量">预定义变量<a class="header-anchor" href="#预定义变量">#</a></h3><p>以如下情况为例。</p><ul><li>当前笔记本名称为<code>test-task</code>，根目录为<code>C:\Users\tootal\Documents\vnote_notebooks\testtask</code>。</li><li>当前打开的文件<code>C:\Users\tootal\Documents\vnote_notebooks\testtask\test2\note.md</code>。</li><li>当前选中的文字为第二行的<code>a test</code>。</li></ul><p><img src="/asset/20210127220155516_27704.png" alt=""></p><ul><li><code>$&#123;notebookFolder&#125;</code>，当前打开的笔记本文件夹路径，如<code>C:\Users\tootal\Documents\vnote_notebooks\testtask</code>。</li><li><code>$&#123;notebookFolderBasename&#125;</code>，当前打开的笔记本文件夹名，如<code>testtask</code>。</li><li><code>$&#123;notebookName&#125;</code>，当前打开的笔记本名，如<code>test-task</code>。</li><li><code>$&#123;notebookDescription&#125;</code>，当前打开的笔记本描述，如<code>This notebook for task test.</code>。</li><li><code>$&#123;file&#125;</code>，当前打开的文件路径，如<code>C:\Users\tootal\Documents\vnote_notebooks\testtask\test2\note.md</code>。</li><li><code>$&#123;fileNotebookFolder&#125;</code>，当前打开的文件所在的笔记本文件夹路径，如<code>C:\Users\tootal\Documents\vnote_notebooks\testtask</code>。</li><li><code>$&#123;relativeFile&#125;</code>，当前打开的文件相对于<code>$&#123;fileNotebookFolder&#125;</code>的路径，如<code>test2\note.md</code>。</li><li><code>$&#123;fileBasename&#125;</code>，当前打开的文件名，如<code>note.md</code>。</li><li><code>$&#123;fileBasenameNoExtension&#125;</code>，当前打开的文件名（不含扩展名），如<code>note</code>。</li><li><code>$&#123;fileDirname&#125;</code>，当前打开的文件所在的文件夹路径，如<code>C:\Users\tootal\Documents\vnote_notebooks\testtask\test2</code>。</li><li><code>$&#123;fileExtname&#125;</code>，当前打开的文件的扩展名（包含点），如<code>.md</code>。</li><li><code>$&#123;cwd&#125;</code>，当前任务开始运行时的工作目录，如<code>C:\Users\tootal\Documents\vnote_notebooks\testtask</code>。</li><li><code>$&#123;lineNumber&#125;</code>，当前光标所在处的行号，如<code>2</code>。</li><li><code>$&#123;selectedText&#125;</code>，当前选中的文本，如<code>a test</code>。</li><li><code>$&#123;execPath&#125;</code>， VNote可执行文件的路径，如<code>C:\Programs\vnote3\vnote.exe</code>。</li><li><code>$&#123;pathSeparator&#125;</code>，当前操作系统所用的路径分隔符，如<code>\</code>。</li><li><code>$&#123;taskFile&#125;</code>，当前正在运行的任务配置文件路径。</li><li><code>$&#123;taskDirname&#125;</code>，当前正在运行的任务配置文件所在的文件夹路径。</li><li><code>$&#123;notebookTaskFolder&#125;</code>，当前笔记本任务配置文件夹路径，如<code>C:\Users\tootal\Documents\vnote_notebooks\testtask\vx_notebook\tasks</code>。</li><li><code>$&#123;userTaskFolder&#125;</code>，VNote用户任务配置文件夹路径，如<code>C:\Users\tootal\AppData\Local\VNote\VNote\tasks</code>。</li><li><code>$&#123;appTaskFolder&#125;</code>，VNote全局任务配置文件夹路径，如<code>C:\Users\tootal\AppData\Roaming\VNote\VNote\tasks</code>。</li><li><code>$&#123;userThemeFolder&#125;</code>，VNote用户主题文件夹路径，如<code>C:\Users\tootal\AppData\Local\VNote\VNote\themes</code>。</li><li><code>$&#123;appThemeFolder&#125;</code>，VNote全局主题文件夹路径，如<code>C:\Users\tootal\AppData\Roaming\VNote\VNote\themes</code>。</li><li><code>$&#123;userDocsFolder&#125;</code>，VNote用户文档文件夹路径，如<code>C:\Users\tootal\AppData\Local\VNote\VNote\docs</code>。</li><li><code>$&#123;appDocsFolder&#125;</code>，VNote全局文档文件夹路径，如<code>C:\Users\tootal\AppData\Roaming\VNote\VNote\docs</code>。</li></ul><p>TODO: <code>$&#123;lineNumber&#125;</code>、<code>$&#123;selectedText&#125;</code>尚未实现。</p><p>变量基本与VSCode兼容。注意变量替换只在以下配置项中有效：<code>command</code>、<code>args</code>、<code>options.cwd</code>、<code>options.env</code>。如果变量的值不存在，则会被替换为空字符串。注意变量中的路径会使用<strong>平台相关</strong>的路径分隔符。</p><h3 id="幻词变量">幻词变量<a class="header-anchor" href="#幻词变量">#</a></h3><p>通过<code>$&#123;magic:word&#125;</code>的语法可以引用幻词变量，下面列出了VNote支持的所有幻词及其含义：</p><ul><li><code>d</code>, the day as number without a leading zero (<code>1</code> to <code>31</code>)</li><li><code>dd</code>, the day as number with a leading zero (<code>01</code> to <code>31</code>)</li><li><code>ddd</code>, the abbreviated localized day name (e.g. <code>Mon</code> to <code>Sun</code>)</li><li><code>dddd</code>, the long localized day name (e.g. <code>Monday</code> to <code>Sunday</code>)</li><li><code>M</code>, the month as number without a leading zero (<code>1</code> to <code>12</code>)</li><li><code>MM</code>, the month as number with a leading zero (<code>01</code> to <code>12</code>)</li><li><code>MMM</code>, the abbreviated localized month name (e.g. <code>Jan</code> to <code>Dec</code>)</li><li><code>MMMM</code>, the long localized month name (e.g. <code>January</code> to <code>December</code>)</li><li><code>yy</code>, the year as two digit number (<code>00</code> to <code>99</code>)</li><li><code>yyyy</code>, the year as four digit number</li><li><code>h</code>, the hour without a leading zero (<code>0</code> to <code>23</code> or <code>1</code> to <code>12</code> if AM/PM display)</li><li><code>hh</code>, the hour with a leading zero (<code>00</code> to <code>23</code> or <code>01</code> to <code>12</code> if AM/PM display)</li><li><code>H</code>, the hour without a leading zero (<code>0</code> to <code>23</code> even with AM/PM display)</li><li><code>HH</code>, the hour with a leading zero (<code>00</code> to <code>23</code> even with AM/PM display)</li><li><code>m</code>, the minute without a leading zero (<code>0</code> to <code>59</code>)</li><li><code>mm</code>, the minute with a leading zero (<code>00</code> to <code>59</code>)</li><li><code>s</code>, the second without a leading zero (<code>0</code> to <code>59</code>)</li><li><code>ss</code>, the second with a leading zero (<code>00</code> to <code>59</code>)</li><li><code>z</code>, the milliseconds without leading zeroes (<code>0</code> to <code>999</code>)</li><li><code>zzz</code>, the milliseconds with leading zeroes (<code>000</code> to <code>999</code>)</li><li><code>AP</code>, use AM/PM display (<code>AM</code> or <code>PM</code>)</li><li><code>A</code>, use AM/PM display (<code>AM</code> or <code>PM</code>)</li><li><code>ap</code>, use am/pm display (<code>am</code> or <code>pm</code>)</li><li><code>a</code>, use am/pm display (<code>am</code> or <code>pm</code>)</li><li><code>t</code>, the timezone (e.g. <code>CEST</code>)</li><li><code>random</code>, a random number</li><li><code>random_d</code>, dynamic version of <code>random</code></li><li><code>date</code>, yyyy-MM-dd,</li><li><code>da</code>, yyyyMMdd</li><li><code>time</code>, hh:mm:ss</li><li><code>datetime</code>, date time</li><li><code>dt</code>, da-time</li><li><code>note</code>, name of current note</li><li><code>no</code>, complete base name of current note</li><li><code>att</code>, relative path of current note’s attachment folder</li><li><code>w</code>, the week number (<code>1</code> to <code>53</code>)</li></ul><p>例如：</p><ul><li><code>$&#123;magic:datetime&#125;</code> → <code>2021-01-29 12:59:03</code></li><li><code>$&#123;magic:random&#125;</code> → <code>56</code></li></ul><p>TODO: <code>att</code>、<code>random_d</code>尚未实现。</p><h3 id="环境变量">环境变量<a class="header-anchor" href="#环境变量">#</a></h3><p>可以用<code>$&#123;env:Name&#125;</code>的语法引用系统定义的环境变量。</p><p>一些常见的环境变量如下所示：</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#envsample-Windows">                        Windows                    </a>                   </li><li class="tab ">                    <a href="#envsample-Linux">                        Linux                    </a>                   </li><li class="tab ">                    <a href="#envsample-MacOS">                        MacOS                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="envsample-Windows" class="tab-content "><ul><li><code>${env:ComSpec}</code> → <code>C:\Windows\system32\cmd.exe</code></li><li><code>${env:NUMBER_OF_PROCESSORS}</code> → <code>6</code></li><li><code>${env:TEMP}</code> → <code>C:\Users\tootal\AppData\Local\Temp</code></li></ul></div><div id="envsample-Linux" class="tab-content is-hidden"><ul><li>HOME</li><li>LOGNAME</li><li>SHELL</li></ul></div><div id="envsample-MacOS" class="tab-content is-hidden"><ul><li>PATH</li></ul></div>                  </div><h3 id="配置变量">配置变量<a class="header-anchor" href="#配置变量">#</a></h3><p>用<code>$&#123;config:core.locale&#125;</code>的语法引用VNote的配置变量。以下面的配置文件为例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;core&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;locale&quot;</span>: <span class="string">&quot;en_US&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;3.0.0-beta.6&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>$&#123;config:core.locale&#125;</code> → <code>en_US</code></li><li><code>$&#123;config:metadata.version&#125;</code> → <code>3.0.0-beta.6</code></li></ul><p>配置变量只能返回字符串类型的值，对于<code>Array</code>和<code>Object</code>返回空字符串、其余类型返回字符串结果。仅支持<code>object.key</code>的语法，不支持<code>object[&quot;key&quot;]</code>，对于数组类型，支持<code>array[0]</code>的语法。</p><h3 id="输入变量">输入变量<a class="header-anchor" href="#输入变量">#</a></h3><p>上面的变量在一般情况下已经足够使用，但它们无法在运行时动态调整参数。例如要求在运行<code>git commit</code>时手动输入一些信息。参考<a href="https://code.visualstudio.com/docs/editor/variables-reference#_input-variables">VSCode Tasks的Input variables</a>，VNote同样提供类似的功能。通过<code>$&#123;input:varid&#125;</code>的语法可以引用一个输入变量。</p><p>如下任务配置文件<code>prompt.json</code>可以弹出一个输入框，并将输入的内容在输出面板输出。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;echo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;$&#123;input:what&#125;&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;inputs&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;what&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;promptString&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Type something, it will show in output panel.&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下图所示：</p><p><img src="/asset/20210129144746219_987.gif" alt="VNote任务输入变量"></p><h3 id="Shell变量">Shell变量<a class="header-anchor" href="#Shell变量">#</a></h3><p>通过<code>$&#123;shell:commandString&#125;</code>可以获取一些简单的Shell命令的结果，执行时会先通过系统默认的shell执行 <code>commandString</code> ，将结果作为变量值进行替换。对于较复杂的命令，请使用输出变量。</p><p>例如：</p><ul><li><code>$&#123;shell:git rev-parse --abbrev-ref HEAD&#125;</code> → <code>master</code></li><li><code>$&#123;shell:whoami&#125;</code> → <code>tootal</code></li><li><code>$&#123;shell:dig github.com -4 +short&#125;</code> → <code>52.69.186.44</code></li></ul><p>shell的工作目录与任务工作目录相同。变量解析超过1秒后，会中断任务的执行。</p><h2 id="输入输出">输入输出<a class="header-anchor" href="#输入输出">#</a></h2><p>任务运行结果及错误信息可以通过输出面板进行查看，目前输出面板会依次尝试使用下列编码来显示输出：</p><ul><li><code>UTF-8</code></li><li><code>System</code></li><li><code>UTF-16</code></li><li><code>GB18030</code></li></ul><p>虽然有了输入变量可以进行一定程度的交互，但仍然不能很好的处理一些特殊情况。例如一些任务运行时需要进行多次输入确认、一些任务需要在后台保持运行等。VNote任务系统没有内置相关功能，但仍然可以通过启动一个额外的命令窗口来解决这些问题。下面以两个简单的示例来说明如何运行需要交互输入和后台运行的任务。</p><h3 id="交互输入">交互输入<a class="header-anchor" href="#交互输入">#</a></h3><p>下面是一个用C++编写的猜数小游戏，接下来将通过任务配置在VNote中编译、运行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">1</span>, high = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Guess a number between &quot;</span></span><br><span class="line">         &lt;&lt; low &lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; high &lt;&lt; <span class="string">&quot;.\n&quot;</span>;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> num = rand() % <span class="number">20</span> + <span class="number">1</span>, x;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; num) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;It&#x27;s too high.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; num) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;It&#x27;s too low\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;It is just fine\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个任务配置文件<code>run.json</code>，内容如下：</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#interactive-Windows">                        Windows                    </a>                   </li><li class="tab ">                    <a href="#interactive-Linux">                        Linux                    </a>                   </li><li class="tab ">                    <a href="#interactive-macOS">                        macOS                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="interactive-Windows" class="tab-content "><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;g++ \&quot;$&#123;file&#125;\&quot; -o \&quot;$&#123;fileBasenameNoExtension&#125;\&quot;; if ($?) &#123; start cmd \&quot;/c `\&quot;$&#123;fileBasenameNoExtension&#125;`\&quot; &amp; pause\&quot; &#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意尽管命令较长，但不能将其拆分成<code>command</code>和<code>args</code>，否则可能由于转义字符导致任务执行失败。运行效果如下图所示：</p><p><img src="/asset/20210129141938465_12914.gif" alt="VNote任务交互输入"></p></div><div id="interactive-Linux" class="tab-content is-hidden"><p>TODO</p></div><div id="interactive-macOS" class="tab-content is-hidden"><p>TODO</p></div>                  </div><h3 id="后台运行">后台运行<a class="header-anchor" href="#后台运行">#</a></h3><p>下面的例子演示了如何在笔记本根目录启动一个http服务器，并打开浏览器访问。</p><p>若笔记本根目录下没有<code>index.html</code>文件，可以新建一个，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>VNote Task<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>HTTP server start successfully.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建一个任务配置文件<code>http.json</code>，内容如下：</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#background-Windows">                        Windows                    </a>                   </li><li class="tab ">                    <a href="#background-Linux">                        Linux                    </a>                   </li><li class="tab ">                    <a href="#background-macOS">                        macOS                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="background-Windows" class="tab-content "><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;start cmd.exe \&quot;/c python -m http.server\&quot; ; start http://localhost:8000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下图所示：</p><p><img src="/asset/20210129141434261_32283.gif" alt="VNote任务后台运行"></p></div><div id="background-Linux" class="tab-content is-hidden"><p>TODO</p></div><div id="background-macOS" class="tab-content is-hidden"><p>TODO</p></div>                  </div><!--### 交互命令上面两种方式虽然可以在一定程度上解决问题，但无法调用一些VNote已有的功能，通过交互命令可以在运行过程中于VNote进行沟通。目前支持以下交互命令：* `::show-message title={title}::{info}`* `::show-question title={title}::{question}`--><h2 id="任务示例">任务示例<a class="header-anchor" href="#任务示例">#</a></h2><p>前面展示的一些任务示例较为简单，下面包含四个较完善的任务示例，用来解决文章开头的四个问题。</p><ul><li>[x] 通过<a href="https://git-scm.com/">Git</a>进行笔记的版本控制</li><li>[ ] 将多个终端的笔记通过<a href="https://help.jianguoyun.com/?p=2064">坚果云</a>进行同步</li><li>[ ] 将写好的Markdown文档通过<a href="https://hexo.io/zh-cn/">Hexo</a>渲染预览并发布</li><li>[ ] 调用外部编辑器如<a href="https://typora.io/">Typora</a>或是<a href="https://code.visualstudio.com/">VS Code</a>进行进一步编辑</li></ul><p>所有任务均支持多语言与多平台。</p><h3 id="Git">Git<a class="header-anchor" href="#Git">#</a></h3><p>通过Git进行版本控制是目前主流的选择，利用任务可以将一些Git的常用操作（如初始化、提交、上传、下载、查看日志）集成到VNote内部，大大方便了日常使用。如果目前笔记本尚未进行Git版本控制，需要先进行初始化，相当于命令<code>git init</code>。默认的分支名为<code>main</code>。</p><p><img src="/asset/20210206221845368_28581.png" alt="Git初始化"></p><p>查看当前状态，相当于命令<code>git status</code>。</p><p><img src="/asset/20210206220301577_17552.png" alt="Git状态"></p><p>提示：查看状态时，中文文件名可能会显示为十六进制，这是由于Git默认会对值大于<code>0x80</code>的字符进行转义，可以使用<code>git config --global core.quotepath false</code>关闭转义，详细信息可参考<a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-corequotePath">core.quotePath</a>。</p><p>提交可以把所有文件加入版本库中并生成一个记录，类似于命令<code>git add .</code> 与<code>git commit</code>同时执行。此时会弹出窗口请求输入提交信息，默认的提交信息是：<code>更新笔记于 $&#123;magic:datetime&#125;</code>，后面的变量表示当前时间。也可使用快捷键<code>Alt+G, Alt+C</code>执行提交。</p><p><img src="/asset/20210206220626228_15337.png" alt="Git提交"></p><p><img src="/asset/20210206220644016_25187.png" alt="Git提交结果"></p><p>提交后需要手动配置云端库如Github等（利用<code>git remote</code>命令），便可使用快捷的菜单命令进行上传下载，相当于执行<code>git push</code>与<code>git pull</code>命令，默认的<code>merge</code>策略是<code>rebase</code>。通过日志可以查看目前的版本记录。</p><p><img src="/asset/20210206220942154_25617.png" alt=""></p><p>任务代码可在<a href="https://github.com/tootal/vnote-task-git">Github</a>上查看。</p><h2 id="常见问题">常见问题<a class="header-anchor" href="#常见问题">#</a></h2><article class="message message-immersive is-warning"><div class="message-body"><i class="fas                         fa-question-circle mr-2"></i>为何不采用系统环境变量<code>ComSpec</code>或<code>SHELL</code>的值作为默认shell？</div></article><p>默认shell可以很大程度地减小配置文件的大小，大部分任务配置也会按照默认的shell语法来书写。系统环境变量可能会被用户或其它程序在不经意间修改，从而导致大量已有的任务配置失效。</p><h2 id="配置格式">配置格式<a class="header-anchor" href="#配置格式">#</a></h2><p>参考<a href="https://code.visualstudio.com/docs/editor/tasks-appendix">VSCode Task的配置格式</a>，定义VNote任务系统配置文件的格式如下。目前还在开发过程中，因此格式还在逐步调整。</p><div class="control">                    <div class="select">                        <select>                            <option  data-id="taskconfig-v0.1.0">                        v0.1.0                    </option><option  data-id="taskconfig-v0.1.1">                        v0.1.1                    </option><option  data-id="taskconfig-v0.1.2">                        v0.1.2                    </option><option  data-id="taskconfig-v0.1.3">                        v0.1.3                    </option><option  data-id="taskconfig-v0.1.4">                        v0.1.4                    </option><option  data-id="taskconfig-v0.1.5">                        v0.1.5                    </option><option  data-id="taskconfig-v0.1.6">                        v0.1.6                    </option><option selected data-id="taskconfig-v0.1.7">                        v0.1.7                    </option>                        </select>                    </div>                </div><div class="selects-content">                        <div class="select-content is-hidden" id="taskconfig-v0.1.0">                            <h3 id="v0-1-0">v0.1.0<a class="header-anchor" href="#v0-1-0">#</a></h3><p>根task的默认label就是文件名，子label默认用数字从0开始编号。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TaskConfiguration <span class="keyword">extends</span> TaskDescription &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The configuration&#x27;s version number</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  version: <span class="string">&#x27;0.1.0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> TaskDescription &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The command to be executed. Can be an external program or a shell</span></span><br><span class="line"><span class="comment">   * command.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  command: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The task&#x27;s name. Can be omitted.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  label?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The configuration of the available tasks.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  tasks?: TaskDescription[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>                           </div><div class="select-content is-hidden" id="taskconfig-v0.1.1">                            <p>没有新增内容，规定一下默认值的处理方法：</p><p>version，不指定则采用最新的version。<br>command，不指定则不运行。<br>label，默认采用文件名，子task采用数字编号（0-index）<br>tasks，指定子task。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TaskConfiguration <span class="keyword">extends</span> TaskDescription &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The configuration&#x27;s version number</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  version?: <span class="string">&#x27;0.1.1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> TaskDescription &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The command to be executed. Can be an external program or a shell</span></span><br><span class="line"><span class="comment">   * command.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  command?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The task&#x27;s name. Can be omitted.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  label?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The configuration of the available tasks.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  tasks?: TaskDescription[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>                           </div><div class="select-content is-hidden" id="taskconfig-v0.1.2">                            <h3 id="v0-1-2">v0.1.2<a class="header-anchor" href="#v0-1-2">#</a></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TaskConfiguration <span class="keyword">extends</span> TaskDescription &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration&#x27;s version number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    version?: <span class="string">&#x27;0.1.2&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> TaskDescription &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The type of a custom task. Tasks of type &quot;shell&quot; are executed</span></span><br><span class="line"><span class="comment">     * inside a shell (e.g. bash, cmd, powershell, ...)</span></span><br><span class="line"><span class="comment">     * If omitted `shell` is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">type</span>?: <span class="string">&#x27;shell&#x27;</span> | <span class="string">&#x27;process&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The command to be executed. Can be an external program or a shell</span></span><br><span class="line"><span class="comment">     * command. Can be omitted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    command?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The arguments passed to the command. Can be omitted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    args?: <span class="built_in">string</span>[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The task&#x27;s name.</span></span><br><span class="line"><span class="comment">     * If root label omitted the file name is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    label?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * The command options used when the command is executed. Can be omitted.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    options?: CommandOptions;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration of the available tasks.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    tasks?: TaskDescription[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Options to be passed to the external program or shell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> CommandOptions &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The current working directory of the executed program or shell.</span></span><br><span class="line"><span class="comment">     * If omitted try the following valus in turn.</span></span><br><span class="line"><span class="comment">     * - the current notebook&#x27;s root</span></span><br><span class="line"><span class="comment">     * - the directory of current file</span></span><br><span class="line"><span class="comment">     * - the directory of executing task file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    cwd?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The environment of the executed program or shell. If omitted</span></span><br><span class="line"><span class="comment">     * the parent process&#x27; environment is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    env?: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Configuration of the shell when task type is `shell`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    shell?: &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The shell to use. </span></span><br><span class="line"><span class="comment">         * If omitted, the OS-specific shell is used.</span></span><br><span class="line"><span class="comment">         * - `cmd.exe` for windows</span></span><br><span class="line"><span class="comment">         * - `/bin/bash` for linux or macOS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        executable: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The arguments to be passed to the shell executable to run in command mode.</span></span><br><span class="line"><span class="comment">         * If omitted, the default value is used.</span></span><br><span class="line"><span class="comment">         * - [&#x27;/D&#x27;, &#x27;/S&#x27;, &#x27;/C&#x27;] for `cmd.exe`</span></span><br><span class="line"><span class="comment">         * - [&#x27;-c&#x27;] for `/bin/bash`</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        args?: <span class="built_in">string</span>[];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>                           </div><div class="select-content is-hidden" id="taskconfig-v0.1.3">                            <h3 id="v0-1-3">v0.1.3<a class="header-anchor" href="#v0-1-3">#</a></h3><p>支持了翻译、平台相关配置。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TaskConfiguration &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration&#x27;s version number</span></span><br><span class="line"><span class="comment">     * If omitted latest version is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    version?: <span class="string">&#x27;0.1.3&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Windows specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    windows?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * macOS specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    osx?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Linux specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    linux?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The type of a custom task. Tasks of type &quot;shell&quot; are executed</span></span><br><span class="line"><span class="comment">     * inside a shell (e.g. bash, cmd, powershell, ...)</span></span><br><span class="line"><span class="comment">     * If omitted, the parent type is used</span></span><br><span class="line"><span class="comment">     * If no parent specific, the `shell` is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">type</span>?: <span class="string">&#x27;shell&#x27;</span> | <span class="string">&#x27;process&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The command to be executed. Can be an external program or a shell</span></span><br><span class="line"><span class="comment">     * command. Can be omitted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    command?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The arguments passed to the command. Can be omitted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    args?: <span class="built_in">string</span>[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The task&#x27;s name.</span></span><br><span class="line"><span class="comment">     * If task has no parent, the file name is used.</span></span><br><span class="line"><span class="comment">     * If task has command, the command is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    label?: <span class="built_in">string</span> | TranslatableString;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * The command options used when the command is executed. Can be omitted.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    options?: CommandOptions;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration of the available tasks.</span></span><br><span class="line"><span class="comment">     * Tasks will not be inherited.</span></span><br><span class="line"><span class="comment">     * Tasks in OS-specific will be merged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    tasks?: TaskConfiguration[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Options to be passed to the external program or shell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> CommandOptions &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The current working directory of the executed program or shell.</span></span><br><span class="line"><span class="comment">     * If omitted try the following valus in turn.</span></span><br><span class="line"><span class="comment">     * - the parent task working dir</span></span><br><span class="line"><span class="comment">     * - the current notebook&#x27;s root</span></span><br><span class="line"><span class="comment">     * - the directory of current file</span></span><br><span class="line"><span class="comment">     * - the directory of executing task file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    cwd?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The environment of the executed program or shell.</span></span><br><span class="line"><span class="comment">     * If omitted the parent process&#x27; environment is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    env?: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Configuration of the shell when task type is `shell`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    shell?: &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The shell to use. </span></span><br><span class="line"><span class="comment">         * If omitted, the parent shell is used</span></span><br><span class="line"><span class="comment">         * If no parent specific, the OS-specific shell is used.</span></span><br><span class="line"><span class="comment">         * - `PowerShell.exe` for windows</span></span><br><span class="line"><span class="comment">         * - `/bin/bash` for linux or macOS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        executable: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The arguments to be passed to the shell executable to run in command mode.</span></span><br><span class="line"><span class="comment">         * If omitted, the parent shell is used</span></span><br><span class="line"><span class="comment">         * If no parent specific, the default value is used.</span></span><br><span class="line"><span class="comment">         * - [&#x27;/D&#x27;, &#x27;/S&#x27;, &#x27;/C&#x27;] for `cmd.exe`</span></span><br><span class="line"><span class="comment">         * - [&#x27;-Command&#x27;] for `PowerShell.exe`</span></span><br><span class="line"><span class="comment">         * - [&#x27;-c&#x27;] for `/bin/bash`</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        args?: <span class="built_in">string</span>[];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Localization</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> TranslatableString &#123;</span><br><span class="line">    en_US?: <span class="built_in">string</span>,</span><br><span class="line">    zh_CN?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>                           </div><div class="select-content is-hidden" id="taskconfig-v0.1.4">                            <h3 id="v0-1-4">v0.1.4<a class="header-anchor" href="#v0-1-4">#</a></h3><p>支持输入变量</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TaskConfiguration &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration&#x27;s version number</span></span><br><span class="line"><span class="comment">     * If omitted latest version is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    version?: <span class="string">&#x27;0.1.4&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Windows specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    windows?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * macOS specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    osx?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Linux specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    linux?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The type of a custom task. Tasks of type &quot;shell&quot; are executed</span></span><br><span class="line"><span class="comment">     * inside a shell (e.g. bash, cmd, powershell, ...)</span></span><br><span class="line"><span class="comment">     * If omitted, the parent type is used</span></span><br><span class="line"><span class="comment">     * If no parent specific, the `shell` is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">type</span>?: <span class="string">&#x27;shell&#x27;</span> | <span class="string">&#x27;process&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The command to be executed. Can be an external program or a shell</span></span><br><span class="line"><span class="comment">     * command. Can be omitted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    command?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The arguments passed to the command. Can be omitted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    args?: <span class="built_in">string</span>[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The task&#x27;s name.</span></span><br><span class="line"><span class="comment">     * If task has no parent, the file name is used.</span></span><br><span class="line"><span class="comment">     * If task has command, the command is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    label?: TranslatableString;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * The command options used when the command is executed. Can be omitted.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    options?: CommandOptions;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration of the available tasks.</span></span><br><span class="line"><span class="comment">     * Tasks will not be inherited.</span></span><br><span class="line"><span class="comment">     * Tasks in OS-specific will be merged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    tasks?: TaskConfiguration[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration of the input variables.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    inputs?: InputConfiguration[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Options to be passed to the external program or shell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> CommandOptions &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The current working directory of the executed program or shell.</span></span><br><span class="line"><span class="comment">     * If omitted try the following valus in turn.</span></span><br><span class="line"><span class="comment">     * - the parent task working dir</span></span><br><span class="line"><span class="comment">     * - the current notebook&#x27;s root</span></span><br><span class="line"><span class="comment">     * - the directory of current file</span></span><br><span class="line"><span class="comment">     * - the directory of executing task file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    cwd?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The environment of the executed program or shell.</span></span><br><span class="line"><span class="comment">     * If omitted the parent process&#x27; environment is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    env?: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Configuration of the shell when task type is `shell`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    shell?: &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The shell to use. </span></span><br><span class="line"><span class="comment">         * If omitted, the parent shell is used</span></span><br><span class="line"><span class="comment">         * If no parent specific, the OS-specific shell is used.</span></span><br><span class="line"><span class="comment">         * - `PowerShell.exe` for windows</span></span><br><span class="line"><span class="comment">         * - `/bin/bash` for linux or macOS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        executable: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The arguments to be passed to the shell executable to run in command mode.</span></span><br><span class="line"><span class="comment">         * If omitted, the parent shell is used</span></span><br><span class="line"><span class="comment">         * If no parent specific, the default value is used.</span></span><br><span class="line"><span class="comment">         * - [&#x27;/D&#x27;, &#x27;/S&#x27;, &#x27;/C&#x27;] for `cmd.exe`</span></span><br><span class="line"><span class="comment">         * - [&#x27;-Command&#x27;] for `PowerShell.exe`</span></span><br><span class="line"><span class="comment">         * - [&#x27;-c&#x27;] for `/bin/bash`</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        args?: <span class="built_in">string</span>[];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Localization</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> LocaleString &#123;</span><br><span class="line">    en_US?: <span class="built_in">string</span>,</span><br><span class="line">    zh_CN?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TranslatableString = <span class="built_in">string</span> | LocaleString;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration of input variables</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> InputConfiguration &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Input variable id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    id: <span class="built_in">string</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * the type of input variable</span></span><br><span class="line"><span class="comment">     * if omitted, `promptString` is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">type</span>?: <span class="string">&#x27;promptString&#x27;</span> | <span class="string">&#x27;pickString&#x27;</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Provides context for the input.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    description?: TranslatableString,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default value that will be used if the user doesn&#x27;t enter something else.</span></span><br><span class="line"><span class="comment">     * If type is pickString, it must be one of the option values.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span>?: TranslatableString,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Only avaliable when type is promptString</span></span><br><span class="line"><span class="comment">     * Set to true to input with a password prompt that will not show the typed value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    password?: <span class="built_in">boolean</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Only avaliable when type is pickString</span></span><br><span class="line"><span class="comment">     * An array of options for the user to pick from.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    options?: TranslatableString[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>                           </div><div class="select-content is-hidden" id="taskconfig-v0.1.5">                            <h3 id="v0-1-5">v0.1.5<a class="header-anchor" href="#v0-1-5">#</a></h3><p>支持可翻译的命令字符串及参数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TaskConfiguration &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration&#x27;s version number</span></span><br><span class="line"><span class="comment">     * If omitted latest version is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    version?: <span class="string">&#x27;0.1.5&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Windows specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    windows?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * macOS specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    osx?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Linux specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    linux?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The type of a custom task. Tasks of type &quot;shell&quot; are executed</span></span><br><span class="line"><span class="comment">     * inside a shell (e.g. bash, cmd, powershell, ...)</span></span><br><span class="line"><span class="comment">     * If omitted, the parent type is used</span></span><br><span class="line"><span class="comment">     * If no parent specific, the `shell` is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">type</span>?: <span class="string">&#x27;shell&#x27;</span> | <span class="string">&#x27;process&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The command to be executed. Can be an external program or a shell</span></span><br><span class="line"><span class="comment">     * command. Can be omitted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    command?: TranslatableString;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The arguments passed to the command. Can be omitted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    args?: TranslatableString[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The task&#x27;s name.</span></span><br><span class="line"><span class="comment">     * If task has no parent, the file name is used.</span></span><br><span class="line"><span class="comment">     * If task has command, the command is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    label?: TranslatableString;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * The command options used when the command is executed. Can be omitted.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    options?: CommandOptions;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration of the available tasks.</span></span><br><span class="line"><span class="comment">     * Tasks will not be inherited.</span></span><br><span class="line"><span class="comment">     * Tasks in OS-specific will be merged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    tasks?: TaskConfiguration[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration of the input variables.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    inputs?: InputConfiguration[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Options to be passed to the external program or shell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> CommandOptions &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The current working directory of the executed program or shell.</span></span><br><span class="line"><span class="comment">     * If omitted try the following valus in turn.</span></span><br><span class="line"><span class="comment">     * - the parent task working dir</span></span><br><span class="line"><span class="comment">     * - the current notebook&#x27;s root</span></span><br><span class="line"><span class="comment">     * - the directory of current file</span></span><br><span class="line"><span class="comment">     * - the directory of executing task file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    cwd?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The environment of the executed program or shell.</span></span><br><span class="line"><span class="comment">     * If omitted the parent process&#x27; environment is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    env?: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Configuration of the shell when task type is `shell`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    shell?: &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The shell to use. </span></span><br><span class="line"><span class="comment">         * If omitted, the parent shell is used</span></span><br><span class="line"><span class="comment">         * If no parent specific, the OS-specific shell is used.</span></span><br><span class="line"><span class="comment">         * - `PowerShell.exe` for windows</span></span><br><span class="line"><span class="comment">         * - `/bin/bash` for linux or macOS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        executable: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The arguments to be passed to the shell executable to run in command mode.</span></span><br><span class="line"><span class="comment">         * If omitted, the parent shell is used</span></span><br><span class="line"><span class="comment">         * If no parent specific, the default value is used.</span></span><br><span class="line"><span class="comment">         * - [&#x27;/D&#x27;, &#x27;/S&#x27;, &#x27;/C&#x27;] for `cmd.exe`</span></span><br><span class="line"><span class="comment">         * - [&#x27;-Command&#x27;] for `PowerShell.exe`</span></span><br><span class="line"><span class="comment">         * - [&#x27;-c&#x27;] for `/bin/bash`</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        args?: <span class="built_in">string</span>[];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Localization</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> LocaleString &#123;</span><br><span class="line">    en_US?: <span class="built_in">string</span>,</span><br><span class="line">    zh_CN?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TranslatableString = <span class="built_in">string</span> | LocaleString;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration of input variables</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> InputConfiguration &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Input variable id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    id: <span class="built_in">string</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * the type of input variable</span></span><br><span class="line"><span class="comment">     * if omitted, `promptString` is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">type</span>?: <span class="string">&#x27;promptString&#x27;</span> | <span class="string">&#x27;pickString&#x27;</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Provides context for the input.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    description?: TranslatableString,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default value that will be used if the user doesn&#x27;t enter something else.</span></span><br><span class="line"><span class="comment">     * If type is pickString, it must be one of the option values.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span>?: TranslatableString,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Only avaliable when type is promptString</span></span><br><span class="line"><span class="comment">     * Set to true to input with a password prompt that will not show the typed value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    password?: <span class="built_in">boolean</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Only avaliable when type is pickString</span></span><br><span class="line"><span class="comment">     * An array of options for the user to pick from.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    options?: TranslatableString[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>                           </div><div class="select-content is-hidden" id="taskconfig-v0.1.6">                            <h3 id="v0-1-6">v0.1.6<a class="header-anchor" href="#v0-1-6">#</a></h3><p>支持了图标<code>icon</code>和快捷键<code>shortcut</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TaskConfiguration &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration&#x27;s version number</span></span><br><span class="line"><span class="comment">     * If omitted latest version is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    version?: <span class="string">&#x27;0.1.6&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Windows specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    windows?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * macOS specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    osx?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Linux specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    linux?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The type of a custom task. Tasks of type &quot;shell&quot; are executed</span></span><br><span class="line"><span class="comment">     * inside a shell (e.g. bash, cmd, powershell, ...)</span></span><br><span class="line"><span class="comment">     * If omitted, the parent type is used</span></span><br><span class="line"><span class="comment">     * If no parent specific, the `shell` is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">type</span>?: <span class="string">&#x27;shell&#x27;</span> | <span class="string">&#x27;process&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The command to be executed. Can be an external program or a shell</span></span><br><span class="line"><span class="comment">     * command. Can be omitted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    command?: TranslatableString;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The arguments passed to the command. Can be omitted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    args?: TranslatableString[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The task&#x27;s name.</span></span><br><span class="line"><span class="comment">     * If task has no parent, the file name is used.</span></span><br><span class="line"><span class="comment">     * If task has command, the command is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    label?: TranslatableString;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The task&#x27;s icon.</span></span><br><span class="line"><span class="comment">     * task icon will not be inherited</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    icon?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The task&#x27;s shortcut.</span></span><br><span class="line"><span class="comment">     * task icon will not be inherited</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    shortcut?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * The command options used when the command is executed. Can be omitted.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    options?: CommandOptions;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration of the available tasks.</span></span><br><span class="line"><span class="comment">     * Tasks will not be inherited.</span></span><br><span class="line"><span class="comment">     * Tasks in OS-specific will be merged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    tasks?: TaskConfiguration[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration of the input variables.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    inputs?: InputConfiguration[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Options to be passed to the external program or shell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> CommandOptions &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The current working directory of the executed program or shell.</span></span><br><span class="line"><span class="comment">     * If omitted try the following valus in turn.</span></span><br><span class="line"><span class="comment">     * - the parent task working dir</span></span><br><span class="line"><span class="comment">     * - the current notebook&#x27;s root</span></span><br><span class="line"><span class="comment">     * - the directory of current file</span></span><br><span class="line"><span class="comment">     * - the directory of executing task file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    cwd?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The environment of the executed program or shell.</span></span><br><span class="line"><span class="comment">     * If omitted the parent process&#x27; environment is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    env?: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Configuration of the shell when task type is `shell`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    shell?: &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The shell to use. </span></span><br><span class="line"><span class="comment">         * If omitted, the parent shell is used</span></span><br><span class="line"><span class="comment">         * If no parent specific, the OS-specific shell is used.</span></span><br><span class="line"><span class="comment">         * - `PowerShell.exe` for windows</span></span><br><span class="line"><span class="comment">         * - `/bin/bash` for linux or macOS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        executable: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The arguments to be passed to the shell executable to run in command mode.</span></span><br><span class="line"><span class="comment">         * If omitted, the parent shell is used</span></span><br><span class="line"><span class="comment">         * If no parent specific, the default value is used.</span></span><br><span class="line"><span class="comment">         * - [&#x27;/D&#x27;, &#x27;/S&#x27;, &#x27;/C&#x27;] for `cmd.exe`</span></span><br><span class="line"><span class="comment">         * - [&#x27;-Command&#x27;] for `PowerShell.exe`</span></span><br><span class="line"><span class="comment">         * - [&#x27;-c&#x27;] for `/bin/bash`</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        args?: <span class="built_in">string</span>[];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Localization</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> LocaleString &#123;</span><br><span class="line">    en_US?: <span class="built_in">string</span>,</span><br><span class="line">    zh_CN?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TranslatableString = <span class="built_in">string</span> | LocaleString;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration of input variables</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> InputConfiguration &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Input variable id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    id: <span class="built_in">string</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * the type of input variable</span></span><br><span class="line"><span class="comment">     * if omitted, `promptString` is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">type</span>?: <span class="string">&#x27;promptString&#x27;</span> | <span class="string">&#x27;pickString&#x27;</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Provides context for the input.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    description?: TranslatableString,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default value that will be used if the user doesn&#x27;t enter something else.</span></span><br><span class="line"><span class="comment">     * If type is pickString, it must be one of the option values.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span>?: TranslatableString,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Only avaliable when type is promptString</span></span><br><span class="line"><span class="comment">     * Set to true to input with a password prompt that will not show the typed value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    password?: <span class="built_in">boolean</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Only avaliable when type is pickString</span></span><br><span class="line"><span class="comment">     * An array of options for the user to pick from.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    options?: TranslatableString[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>                           </div><div class="select-content " id="taskconfig-v0.1.7">                            <h3 id="v0-1-7">v0.1.7<a class="header-anchor" href="#v0-1-7">#</a></h3><p>支持环境变量多语言。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TaskConfiguration &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration&#x27;s version number</span></span><br><span class="line"><span class="comment">     * If omitted latest version is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    version?: <span class="string">&#x27;0.1.7&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Windows specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    windows?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * macOS specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    osx?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Linux specific task configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    linux?: TaskConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The type of a custom task. Tasks of type &quot;shell&quot; are executed</span></span><br><span class="line"><span class="comment">     * inside a shell (e.g. bash, cmd, powershell, ...)</span></span><br><span class="line"><span class="comment">     * If omitted, the parent type is used</span></span><br><span class="line"><span class="comment">     * If no parent specific, the `shell` is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">type</span>?: <span class="string">&#x27;shell&#x27;</span> | <span class="string">&#x27;process&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The command to be executed. Can be an external program or a shell</span></span><br><span class="line"><span class="comment">     * command. Can be omitted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    command?: TranslatableString;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The arguments passed to the command. Can be omitted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    args?: TranslatableString[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The task&#x27;s name.</span></span><br><span class="line"><span class="comment">     * If task has no parent, the file name is used.</span></span><br><span class="line"><span class="comment">     * If task has command, the command is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    label?: TranslatableString;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The task&#x27;s icon.</span></span><br><span class="line"><span class="comment">     * task icon will not be inherited</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    icon?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The task&#x27;s shortcut.</span></span><br><span class="line"><span class="comment">     * task icon will not be inherited</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    shortcut?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * The command options used when the command is executed. Can be omitted.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    options?: CommandOptions;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration of the available tasks.</span></span><br><span class="line"><span class="comment">     * Tasks will not be inherited.</span></span><br><span class="line"><span class="comment">     * Tasks in OS-specific will be merged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    tasks?: TaskConfiguration[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The configuration of the input variables.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    inputs?: InputConfiguration[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Options to be passed to the external program or shell</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> CommandOptions &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The current working directory of the executed program or shell.</span></span><br><span class="line"><span class="comment">     * If omitted try the following valus in turn.</span></span><br><span class="line"><span class="comment">     * - the parent task working dir</span></span><br><span class="line"><span class="comment">     * - the current notebook&#x27;s root</span></span><br><span class="line"><span class="comment">     * - the directory of current file</span></span><br><span class="line"><span class="comment">     * - the directory of executing task file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    cwd?: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The environment of the executed program or shell.</span></span><br><span class="line"><span class="comment">     * If omitted the parent process&#x27; environment is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    env?: &#123; [key: <span class="built_in">string</span>]: TranslatableString &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Configuration of the shell when task type is `shell`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    shell?: &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The shell to use. </span></span><br><span class="line"><span class="comment">         * If omitted, the parent shell is used</span></span><br><span class="line"><span class="comment">         * If no parent specific, the OS-specific shell is used.</span></span><br><span class="line"><span class="comment">         * - `PowerShell.exe` for windows</span></span><br><span class="line"><span class="comment">         * - `/bin/bash` for linux or macOS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        executable: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The arguments to be passed to the shell executable to run in command mode.</span></span><br><span class="line"><span class="comment">         * If omitted, the parent shell is used</span></span><br><span class="line"><span class="comment">         * If no parent specific, the default value is used.</span></span><br><span class="line"><span class="comment">         * - [&#x27;/D&#x27;, &#x27;/S&#x27;, &#x27;/C&#x27;] for `cmd.exe`</span></span><br><span class="line"><span class="comment">         * - [&#x27;-Command&#x27;] for `PowerShell.exe`</span></span><br><span class="line"><span class="comment">         * - [&#x27;-c&#x27;] for `/bin/bash`</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        args?: <span class="built_in">string</span>[];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Localization</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> LocaleString &#123;</span><br><span class="line">    en_US?: <span class="built_in">string</span>,</span><br><span class="line">    zh_CN?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TranslatableString = <span class="built_in">string</span> | LocaleString;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration of input variables</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> InputConfiguration &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Input variable id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    id: <span class="built_in">string</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * the type of input variable</span></span><br><span class="line"><span class="comment">     * if omitted, `promptString` is used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">type</span>?: <span class="string">&#x27;promptString&#x27;</span> | <span class="string">&#x27;pickString&#x27;</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Provides context for the input.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    description?: TranslatableString,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default value that will be used if the user doesn&#x27;t enter something else.</span></span><br><span class="line"><span class="comment">     * If type is pickString, it must be one of the option values.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span>?: TranslatableString,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Only avaliable when type is promptString</span></span><br><span class="line"><span class="comment">     * Set to true to input with a password prompt that will not show the typed value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    password?: <span class="built_in">boolean</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Only avaliable when type is pickString</span></span><br><span class="line"><span class="comment">     * An array of options for the user to pick from.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    options?: TranslatableString[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>                           </div>                     </div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://vnotex.github.io/vnote/zh_cn/&quot;&gt;VNote&lt;/a&gt;是一款专为Markdown设计的Vim风格笔记应用程序。目前使用已经两年多了，平时用来记录、摘抄都挺方便的。略有不方便的地方就是VNote不能方便地运行一些外部工具，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;进行笔记的版本控制&lt;/li&gt;
&lt;li&gt;将多个终端的笔记通过&lt;a href=&quot;https://help.jianguoyun.com/?p=2064&quot;&gt;坚果云&lt;/a&gt;进行同步&lt;/li&gt;
&lt;li&gt;将写好的Markdown文档通过&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;Hexo&lt;/a&gt;渲染预览并发布&lt;/li&gt;
&lt;li&gt;调用外部编辑器如&lt;a href=&quot;https://typora.io/&quot;&gt;Typora&lt;/a&gt;或是&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt;进行进一步编辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在本文中，我将为VNote设计实现一个任务系统来运行外部工具，从而解决上面这些问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C++" scheme="https://blog.tootal.xyz/tags/C/"/>
    
    <category term="Qt" scheme="https://blog.tootal.xyz/tags/Qt/"/>
    
    <category term="VNote" scheme="https://blog.tootal.xyz/tags/VNote/"/>
    
    <category term="技术" scheme="https://blog.tootal.xyz/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>怎样花两年时间去面试一个人</title>
    <link href="https://blog.tootal.xyz/posts/interview-2year/"/>
    <id>https://blog.tootal.xyz/posts/interview-2year/</id>
    <published>2021-01-17T12:33:35.000Z</published>
    <updated>2021-01-17T12:33:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近参加了两场面试，也是挺有感触的。分享一篇与面试相关的文章，里面很多内容即使十年过去了也丝毫不过时，甚至每次读过都有新的感悟。例如里面提到了关于大作业的部分：</p><blockquote class="pullquote"><p>一想到作业是要作为简历的一部分的，能不紧张嘛。能不好好做嘛。能不学到点东西嘛？</p></blockquote><p>我在写<a href="https://github.com/tootal/DBLParse">数据结构大作业</a>的时候就干过这事，把一个2学分的课程大作业当作一个大项目来完成，提交了800多次<a href="https://github.com/tootal/DBLParse/commits/master">commits</a>，给软件加上版本号，发布了<a href="https://github.com/tootal/DBLParse/releases">Windows、MacOS以及Ubuntu</a>三个系统的软件包，加上持续构建脚本……</p><article class="message message-immersive is-primary"><div class="message-body"><i class="fas                         fa-lightbulb mr-2"></i>以下内容摘自<a href="http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/">怎样花两年时间去面试一个人 – 刘未鹏 | Mind Hacks</a>，修正了一些笔误以及将失效链接换成了<a href="http://web.archive.org/">Web Archive</a>的链接。</div></article><p><a href="http://www.joelonsoftware.com/">Joel Spolsky</a>曾经感叹：招聘难，难于上青天（此处笔者稍加演绎:)）。他有两个辛辣但不乏洞察力的断言：<a href="http://www.joelonsoftware.com/articles/FindingGreatDevelopers.html">真正的牛人也许一辈子就投大概4次简历</a>，这些家伙一毕业就被好公司抢走了，并且他们的雇主会给他们不赖的待遇，所以他们也不想挪窝。（刚刚去世的<a href="http://www.ruanyifeng.com/blog/2011/10/dennis_ritchie.html">Dennis Ritchie</a>就是这样一个人）而“人才”市场上能找到的大多都不是什么人才。招到这帮人轻则费钱重则把你公司搞挂。</p><a id="more"></a><p>（当我把这篇文章给<a href="http://weibo.com/sdxinz">邹欣</a>老师review的时候，他说了另外两点：1. 最好的人也许不投简历，就决定去哪里了。所以要在他们做决定前找到他们。2. 比较差的会投很多次简历，找不到工作的时间越多，投的简历越多，给整个pool 带来很多噪音，top10%的简历也许根本不算全部人的top10%。）</p><p>诚然，也许没有哪个行业像IT行业这样，无形资产占据公司的绝大多数资产。拒坊间传言比尔·盖茨就曾经说过类似这样的话：只要允许我带走100个人我可以再造一个微软。这话没搜到原版出处，但是从一个侧面反映了IT公司当中智力资产所占的比例之重。</p><p>所以一个自然的推论就是，<strong>招聘也许是一个公司决策当中最最重要的一个环节</strong>。Joel Spolsky把他在这方面的观察，体会和洞见集结成了一本小册子<a href="http://www.amazon.com/Smart-Gets-Things-Done-Technical/dp/1590598385/">《Smart and Gets Things Done》</a>，开篇就挑战“产品是公司成败的关键”这个传统观念，他认为<a href="http://www.joelonsoftware.com/articles/HighNotes.html">创造最适合工程师生活的环境，留下最优秀的人才才是最先最重要的一步</a>，接下来好的产品是水到渠成的事情。国内<a href="http://iapp4me.com/">iapp4me.com</a>创始人<a href="http://tiny4.org/blog/">郝培强</a>正是这个理念，所以他<a href="http://www.weibo.com/1400229064/xrEqt7Ax0">在微博上说</a>：</p><blockquote><p>我们是小公司，工资开的不高，也不招太多的人，但是电脑都是iMac27，iMac21，Macbook pro15，基本上比很多大公司都好多了。软件没盗版，刚才photoshop的正版我也收了。中午管饭，公司备伞。哈哈。节日假正常放，从不加班，早晨11点上班，下午6点下班。我是有资格说某些大公司的员工苦逼的。</p></blockquote><p>事实上，米国找个人尚且难成这样，搞得Joel还费心费力写本书语重心长地劝企业们要善待好工程师，国内找个人更是难上加难，国内高质量问答社区<a href="http://www.zhihu.com/">知乎</a>创始人<a href="http://weibo.com/thinkingit">周源</a>就曾经在知乎上<a href="https://www.zhihu.com/question/19551593/answer/12204765">分享他呕心沥血的招人历程</a>，看完真是让人慨叹这年头找个靠谱的人多不容易（这条知乎问答还有很多精彩的跟帖）：</p><blockquote><p>其实从 08 年到现在，我一直想这事能不能有点窍门，或者是实用的方法，结论是几乎没有。我用过的大家都用的方法：</p><ul><li>在水木上发贴子（有点效果）</li><li>在蓝色理想上发贴子（无效）</li><li>在技术邮件组里发贴子（无效）</li><li>买 51job/智联 最便宜的服务（有点效果）</li><li>给所有可以想到的人打电话，请他们推荐（无效）</li><li>给所有和你讨论过创业，喝过点小酒的人打电话（无效）</li><li>约前同事私下谈（有效）</li></ul><p>我用过的大家可能没有用的方法：</p><ul><li>上 twitter，看 XXX 的 follower，一个一个看，看他们的 twitter，博客，Google Reader 分享，想办法搞到邮件，联系，半夜电话骚扰。</li><li>上豆瓣，前端后端挑几本重量级的书，去找想看，看过，正在看这本书的人，一个一个看，看他们的活动，博客，Google Reader 分享，想办法搞到邮件，联系，半夜电话骚扰。</li><li>找同事，问他们都看什么技术博客，想办法搞到邮件，联系，半夜电话骚扰。</li></ul></blockquote><p>正是这样的不容易，才有不少公司走内部培养的办法，这里的逻辑是：一上来就招到靠谱的人太难了，但找一块靠谱的璞玉然后雕琢雕琢相对就简单很多。这倒是个办法，但这样做的人难免就陷入了纠结：<a href="http://weibo.com/1400229064/xsf3T5wRp">培养好了，人跑了怎么办</a>。这也不能怪招聘的公司，的确是人之常情。其实解决的办法也很简单，培养的时候进行适当引导，让员工发挥自己的主动学习能力，这样不但人得到更多成长，公司也不会觉得投入太多患得患失。所谓师傅领进门修行在个人。</p><p>但是，这仍然还是没有解决根本的问题，就是<strong>招聘真的很困难</strong>。应聘者固然觉得自己是在“海投”，大海捞针一般。而招聘者何尝不也是这种大海捞针的感觉。这就好比两个人谈恋爱，都想和对方好上，但是偏偏就聊不到一块去。</p><p>招聘真的很困难。以至于招聘者每年需要绞尽脑汁出新笔试题，以免往年的笔试题早就被人背熟了。出题很费脑子，要出的不太简单也不太难，能够滤掉绝大多数滥竽充数的但又要保证不因题目不公平而滤掉真正有能力的，要考虑审题人的时间成本就只能大多数用选择题，而选择题又是可以猜答案的（极少有人会在选了答案之后还敢在空白的地方写为什么选某答案的原因的）。更悲催的是，有些题目出的连公司的员工们自己都会做错（真的是员工们做错了吗？还是题目本身就出错了？）</p><p>笔试完了之后如果还没有被鄙视就要进入面试环节，姑且不说笔试题的种种弊端，就说面试环节，短短几个小时的面试（大多数公司也许连几个小时的面试时间都没有），既需要全面考察基本知识，又要考察编程素养，还要考察（也许最重要的）性格心态。再然后还有一项<em>根本没法考察但却占据程序员相当一部分工作时间的：<a href="http://web.archive.org/web/20110527052405/http://tiny4.org/prog/diary/2007/12/blog-post.html">debug能力</a></em>。面试官不但得找准问题，不因对方一题答对而妄下结论，也不因一题答错而就扼杀机会，还要以管窥豹，从一朵花看到整个世界，从面试人的举止言谈，分析问题的方式，甚至写程序的笔迹来观察这个人的性格，做事的方式和心态，简直是要面试官具备心理分析师的水准才行。</p><p>这厢要招人的雇主苦不堪言，那边找工作的人也是一团乱麻。绝大多数应届生直到毕业也不清楚他们想要去的公司到底需要什么样的能力，或者说，他们到底需要具备什么样的能力才能在应聘季节拥有自己的选择权。中国虽然本科教育环境差，但是同样有很多的人在本科希望整点东西出来，他们有一腔的激情和抱负，有强大的动力，但就是不知道自己需要掌握哪些技能才能满足雇主的要求，求告无门，整年整年苦闷的像没头苍蝇一样乱撞（我就收到过很多次这样的来信，他们往往很想学点东西，但又不知道哪些重要哪些不重要，到底该学到什么程度，<strong>不知道导致不确定，不确定导致</strong><a href="http://www.amazon.com/Paradox-Choice-Why-More-Less/dp/0060005696/"><strong>决策瘫痪</strong></a>，干脆嘛也不动，荒废时间）。</p><p>什么叫熟练？什么又叫精通？那么扎实呢？两年的YY经验又意味着什么？能这么简单的量化吗？同样是两年的“实践”有的人能真的学到点东西，有的人也许近似一无所得。那么实习呢？很多人都一定要在简历上弄个实习经验，这个又能说明多少问题呢？大作业呢？得奖呢？有一次我面试一位同学，<em>据简历说编译原理课的大作业得了一等奖，可我一问什么是递归下降，就傻眼了。</em></p><p>这个现实的结果就是，<strong>现在绝大多数应届简历而言，也许最具信息量的部分不是“精通XXX，熟悉YYY，掌握ZZZ”，不是“在UUU实习过”，也不是这个项目那个作业，反倒是越来越被认为不重要的一项：毕业学校</strong>。<em>毕业学校本不应该是最具信息量的</em>，它之所以最具信息量只是源于一个悲剧的事实：<em>简历上其他条目实在信息量太少了</em>。所以靠谱的面试者往往学会了无视简历上华而不实的内容，只相信面试的时候亲眼所见，扫两眼简历也就罢了，最后还得自己捋起袖子慢慢面。而应聘者也许也知道招聘的也不会细细纠简历上的条目，所以什么词也都敢往上捅，反正先过了HR筛简历这关再说。从经济学角度来讲，应聘者的这种策略是正确的，没有代价（因为目前似乎没有公司会去给已经申请过的人做一个诚信数据库），但至少有可能会带来巨大的收益。应聘成了博彩。而博彩式的应聘给招聘公司带来了巨大的筛选压力。简历成了摆设。</p><p>那么招聘这个关系里面的第三者——学校——所处的位置呢？学校更关心的是毕业率和就业率，这似乎是件好事，有这个为目标，那么老师们似乎应该努力让自己的学生多学点东西。可惜就业的质量似乎不是最重要的指标，此其一。其二老师本身大多数没有丰富的业界经验，根本不知道企业真正需要的人才是什么样的，可能花了精力，但却培养不出雇主真正需要的人。另一方面，老师所起的作用很多时候甚至是一个负面的作用，例如布置大作业表面上看上去是培养学生的能力，我们姑且不说抄袭，假设每个人都做了，那么大作业本身能够衡量多少东西呢？能否衡量代码质量，能否衡量团队协作能力？能否衡量交流能力？考虑到大作业用到的东西往往都是书里面现成的，<strong>大作业甚至不能衡量学习能力。而学习能力简直算是这个行业最重要的能力没有之一了</strong>。</p><p>所以，简而言之，<strong>如果把人才培养/招聘这件事情本身类比做一个项目，那么这整个项目迄今为止就是一个巨大的失败</strong>。为什么这么说呢：</p><ul><li>和需求严重脱节：作为人才需求方的雇主的需求到底是什么？绝大多数应聘者都没搞清。更严重的是，这却一点都不是应聘者的错。因为雇主是stakeholder（利益相关者），是雇主自己的责任得去说清楚需求是什么。结果应聘者实现的不是雇主想要的，雇主想要的应聘者没有实现。</li><li>应聘者雇来培训自己的人根本不管事：学生交了学费，就相当于雇老师来培训自己，可培训者根本也不了解（或不关心）他的客户们的需求。这里，学生是需求方，老师则是实现方。弄清需求的职责在后者，可后者也弄不清。</li><li>学生自己也弄不清：学生自己既是需求方（需要特定技能），也是实现方。可他们自己也弄不清需求到底是什么。</li></ul><p>以上三点还不是最严重的，最严重的在下面：</p><ul><li>明白需求是什么的也不知道怎么实现：怎么去培养现代IT企业真正需要的人才？特别地，实战能力怎么培养？代码素养怎么培养？协作沟通能力怎么培养？学习能力怎么培养？就算这些都知道怎么培养，又怎么给在象牙塔里头，离催命之日还遥遥无期的学生提供足够的动力呢？而学生自己就算知道该学哪些技能，又怎么知道具体怎么着手？什么是最有效率的学习方法？又如何让自己保持学习的热情？</li></ul><p>以上这些问题，就是当下人才培养/招聘的惨淡现状。简而言之，在雇主和学生之间，横梗着一条巨大的鸿沟，两头都很着急，两头都有动力，但就是没有方法，君住长江头妾住长江尾。像微软谷歌这样的，干脆和高校合作，直接插手本科或硕士的教育，从而保证到时有足够强的候选，某种程度上，这的确是根本解决之道，可一来这代价太大了，非一般企业承受得起，二来这影响面也太小了。</p><p><em>这一切，也许将在未来的5年发生根本的变化。</em></p><p><a href="http://www.amazon.com/Switch-Change-Things-When-Hard/dp/0385528752/">《Switch: How to Change Things When Change Is Hard》</a>（中译《瞬变》）里面指出，表面上看来非常困难的改变，也许是因为根本就没有抓住要害。在书中作者通过大量案例分析和心理学研究，雄辩地指出以下几点促成改变的关键之处：</p><ul><li>触动内心的大象：要改变的人必须要有情感层面的动力。有一些特定的方法能够比另一些方法更能对人的情感产生触动。</li><li>给出清晰、明确的目标：目标一定不能含糊，模棱两口的目标让人无所适从，导致<a href="http://www.amazon.com/Paradox-Choice-Why-More-Less/dp/0060005696/">决策瘫痪</a>。例如最近我们组在招实习生，我在微博上发了一条招聘信息，其中提到“扎实”的系统底层知识，有同学就写信来问，怎么叫“扎实”。我傻眼了。比尔·盖茨就以目标清晰明确著称，不仅在战略制定上，“每个人桌面上都有一台PC”，而且居然还体现在招聘上——“如果你读完了TAOCP（计算机程序设计艺术），那么就给我投简历吧”。多么清晰，明确的目标啊——虽然高了点，也许这就是比尔·盖茨至今还没被应聘邮件淹没的原因:)</li><li>给前进的道路扫清障碍：人是懒惰的，只要有借口就会不想往前。如果既有明确的目标，同时道路又直直指向目标，一览无余，只等你开始往前走，那么便没有借口，一往无前。</li></ul><p>那么让我们对照上面看看，可以做什么？</p><p>首先，内心的大象不需要触动，中国有足够多的人足够早就开始焦虑就业的事情，只是不知道往哪使劲，这部分人如果把劲头用到正确的事情上面也许足以满足现在的IT企业人才饥渴了。至于其他人，好吧，也许身边的人开始动起来他们也会被触动。</p><p>然后是清晰、明确的目标。这一点上目前雇主们的做法可谓好坏参半，好的一点是大家都强调要有实践经验，要有团队协作精神，坏的一点就在基础知识和技能的要求方面，可谓再含糊不过了：“精通XX语言”，“扎实的XX功底”，“熟悉XX技术”，甚至看上去最具量化感的描述“X年YY经验”其实都根本说明不了多少东西，在信息量方面还不如我家门口菜市场上一家卖酥油饼的店门口挂的横幅——“<strong>三天不硬、至少六层！</strong>”。</p><p>很多朋友也许注意到一个现象，<strong>现在企业对招聘者简历的要求也在变得越来越灵活变通</strong>，例如<a href="http://gigix.thoughtworkers.org/2011/6/8/show-me-your-blog">ThoughtWorks在招聘的时候就希望招聘者能给出自己的博客地址</a>，博客对IT行业的意义也许胜过其他所有行业，<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/">一个积累多年的技术博客比任何简历都更能说明问题</a>。台湾的<a href="http://www.weibo.com/oiionet">郭安定</a>也说“<a href="http://blog.csdn.net/oiio/article/details/6913156">为什么写技术博客对新人如此重要</a>”。可惜这个做法也有一个弊端：并不是所有技术牛人都写博客，有人就是<em>只干不说型</em>的，而就算写博客，乃至动手写过一阵子的，写一个常年的博客，<em>也远比你想象的更为困难</em>，因为很多时候，<a href="http://www.weibo.com/1882579600/xjtiRCGk5">写（说）得靠谱比做得靠谱更难</a>。所以这个过滤器很多时候用不上。</p><p>但是这的确表明了一个思考的方向，就是寻找更具鉴别力的过滤器，<a href="http://careers.stackoverflow.com/">Stackoverflow Careers 2.0</a>之所以强大，是因为Joel Spolsky和<a href="http://www.codinghorror.com/blog/">Jeff Atwood</a>这两位常年混社区的资深博主创造性地将一个人在社区的活动历史浓缩成为一系列的量化数值，由于这个历史很长期，所以鉴别力非常高。但它同样也有问题，就是对于应聘者来讲相当花费时间，而且并不是花时间（在Stackoverflow上回答问题）就一定能花到点子上。</p><p>到底什么特征才是既通用，又能够有效地鉴别高低应聘者的特征呢？<strong>这个特征必须不像博客那样难以实现，同时又必须有足够的区分度</strong>。</p><p>有的地方在要求填写简历的时候必须填上<em>平时都访问哪些技术网站</em>。恩，很不错的尝试，可区分度仍然还是不够，因为上网站上查东西毕竟只占现阶段大多数应届生的少数信息来源，特别是当我们看重得更多的是应届应聘者的<em>系统性的知识基础</em>的时候，网上的东西虽然丰富，但属于提高班，也更为琐碎，什么是更系统的知识来源呢？答案其实大家都知道——</p><p>书。</p><p>我一向认为，<strong>很多时候，是否好好看完一本好书，对一个人的提升往往能达到质的区别</strong>。就算不好好看完一本好书，马马虎虎看完，只要书是真的好书，也肯定会有很大的提高。<em>我在面试的时候就经常询问对方看过哪些技术书籍</em>，经常上哪些网站，订哪些博客。这里头尤其数书籍这一项的区分度最高。此外，<strong>好书和坏书的差别，从本质上，就是学习效率和大方向的差别</strong>。一本烂书可以浪费你半年的时间，但一本好书却可以为你带来真正扎实的基础和开阔的视野。人们常常用“内功”来形容扎实的基础，认为学好了内功以后学什么都快，其实一点没错，好的“内功”书不仅讲清楚深刻的原理，而且指明技术的本质，刻画领域的地图。<em>好的书抓住不变量</em>，让人能够触类旁通。好的书不仅介绍知识，而且阐释原则，介绍那些万变不离其宗的东西。<strong>读烂书浪费时间，但读好书却节省时间</strong>。</p><p>象牙塔内的学生受到视野的限制，往往择书不慎，事倍功半，<em>烂书不仅浪费时间，还会打击人的积极性，让人对知识心生恐惧，认为很难掌握，殊不知只是作者没有讲好（或者没有翻译好）</em>。因此，为招聘头疼的公司完全可以给出“<strong>应聘俺们公司前必读的十本书</strong>”，也不一定要每个公司都不一样，在某个技术子领域有影响力的人，或者创始人们，可以来定义具有代表性的书单。</p><p>我们姑且把这个计划叫做“书单计划”，容易看到“书单计划”具备以下几个卓越的优点：</p><ol><li>清晰、明确。完全可度量。</li><li>防伪：读没读过，随便一问便知。而正因为应聘者也知道这事不像实习经验可以忽悠，所以也不敢乱往简历上捅词。</li><li>不在乎是否“泄题”：书单完全公开的，无所谓，本来就是要你去读的。想背题？背书吧。真能背下来说明认真看了。</li><li>管你用心不用心读，只要读了，读完了，就有区别。真正的好书，你想不被吸引都难。据我观察很多人就是不知道该去读什么书。</li><li>不存在“怎么做”的障碍：所有人都知道怎么读书——一页一页读。</li><li>不需要招聘者投入精力：书单在此，就这么简单，您看着办。</li><li>评估的负担很大程度转移到了应聘者的身上：是不是认真看完了，有没有心得体会，您自己掂量。没看完别来找我们。</li></ol><p>“书单计划”能很大程度上起到<strong>强鉴别器</strong>的作用，看了就是看了，必然能学到东西，没看就是没看。<strong>知道和不知道，区别是本质的</strong>。<strong>其实很多企业内部培训，根本上其实还不就是叫员工去看之前没看过的书或者资料嘛</strong>。最后，除了鉴别作用之外，它还是一个清晰促进的目标，是<strong>完全不花精力的培养</strong>。</p><p>当然，“书单计划”的背后是另一个悲剧的现实，如果不是因为这个现实，这个计划也完全没有必要，那就是，中国IT大学教育当中要求要学的书，和企业真正需要你去读的书相比，不是<em>完全不够用</em>，就是<em>写的不够好</em>，或者更悲剧的就是<em>根本用不上</em>，所以在这个大背景下出来的牛人都是<a href="http://web.archive.org/web/20111109084054/https://www.weibo.com/1400229064/xoEps5Imk">自己淘书自己学的</a>。微软高级开发测试工程师，<a href="http://book.douban.com/subject/2302201/">《Windows用户态程序高效排错》</a>作者<a href="http://www.weibo.com/grapef">熊力</a>就在微博上说过：<a href="http://web.archive.org/web/20111117073449/http://www.weibo.com/1709648133/xoEQmBmDg">“我当年毕业的时候总结了一个公式：第一份工作的月薪=大学四年买过的技术书籍价格的总和。”</a></p><p>但是光有“书单计划”还不够，因为**书籍只能管基础知识这一块，一些更难以量化衡量的实战“能力”又怎么办呢？**至少目前为止，除了“练”之外好像还没有特别好的办法。可是在象牙塔里面做的项目，或大作业，真的能起到练的作用吗？前面说了，学生会知道自己最终要交差的不是雇主，而是老师，于是就以老师能够评判的标准来默认要求自己了，老师能够评判编码素养？代码风格？文档？设计？协作？甚至连著名的<a href="http://www.joelonsoftware.com/articles/fog0000000043.html">Joel 12条</a>的第一条“是否用源代码管理系统”都没法通过。所以大多数时候，大作业能起到的作用近乎0。</p><p>但是如果这一切是由雇主来评判的，这个“作业”是由雇主来给出的，就完全不一样了。一想到作业是要作为简历的一部分的，能不紧张嘛。能不好好做嘛。能不学到点东西嘛？</p><p>可是这事儿能实现吗？雇主能给学生出大作业吗？也许一两个关系好的高校可以，可是中国那么多学生呢？</p><p>为什么不能呢？如果像书单那样，列出各个技术领域“推荐在学校期间尝试的项目”，至于动不动手做，那是学生自己的问题。做的，自然能够得到锻炼，面试的时候自然能得到更大的优势。</p><p>可问题是，面试的人又怎么来评估呢？这不又回到了没法有效评估的怪圈了吗？答案很简单，但<em>这个答案，直到最近几年，才真正成为现实</em>——</p><p><a href="http://en.wikipedia.org/wiki/Github"><strong>GitHub</strong></a></p><p>GitHub诞生于08年春天，第一年便产生了4万6千个公共项目，大约一年半之后用户就已经达到10万用户之巨。而到今年（2011年）九月份，GitHub已经迎来了百万级用户。Host超过两百万个项目。（截止<a href="http://web.archive.org/web/20201225154739/https://octoverse.github.com/">2020年10月</a>，Github已经有超过5600万开发者）</p><p>增长的太快了！就像Twitter一样。这样疯了一般的增长只能说明一个事实——<strong>人们等待这个产品太久了</strong>。</p><p><strong>Social Coding</strong>。</p><p>真实的项目，真实的流程，真实的人名，一切代码review, check-in, test, build, document, 甚至讨论，计划，brianstorming，流程，一切的一切，都是项目历史的一部分，都可以像棋局那样复盘。有经验的面试者只要稍稍扫两眼一个人的GitHub历史，挑出几个check-in历史看一看，便完全能够迅速判断这个人是否满足他的要求。不再需要费劲心机地去想题目，去观察，去揣测，去花费大量的时间的同时还只能采样到几个极为有限的点。</p><p>不像象牙塔里面大作业，这里有源代码管理系统，自动化build，有check-in，有review，有分工，有合作，最重要的是——这是一个<a href="http://wenku.baidu.com/view/ce92d9eef8c75fbfc77db28a.html">集市</a>，一个超出象牙塔的集市，牛人相互吸引，<strong>你可以在互联网上找到和自己拥有共同兴趣的一帮人，真正做起一点事情，而不是交差，不需要受限于几十个人的一个小班级。</strong><a href="http://www.amazon.com/Here-Comes-Everybody-Organizing-Organizations/dp/1594201536"><strong>Here Comes Everybody</strong></a>。</p><p>为什么我这么有信心？因为这事儿已经发生了。<strong>这个想法也完全不是我原创的</strong>。</p><p>正如很多事情一样，现在在国内发生的事情，往往是美国那头的历史。今年7月中旬，纽约一家公司的工程师老大发了一篇博客文章：<a href="http://web.archive.org/web/20110807180826/http://code.dblock.org/github-is-your-new-resume">Github is Your New Resume</a>。指出一个惊人但再合理不过的事实：越来越多的IT公司在招聘的时候要求应聘者给出GitHub账号。甚至已经有人为GitHub写了<a href="https://resume.github.io/">根据GitHub上的历史自动生成简历的工具</a>。</p><p>仔细想想，这是必然的趋势，没有比这个再合理的事情了，既然StackOverflow的历史能够作为简历，GitHub的历史不本该就是更好的简历吗：你想要具有实战经验，懂check-in懂review懂test和代码质量的重要性，懂交流和沟通的重要性，你本就应该在一个真实的项目当中去锻炼这些东西，而这些在目前已经完全可以办到。正如<a href="http://www.weibo.com/sdxinz">邹欣</a>老师所说，<em>你的工作就是最好的面试</em>。</p><p><strong>这件事情放在早几年，是完全没法做到的，因为我们那时候还没有GitHub</strong>。正如没有Twitter，没有微博之前，很多事情都不会成为可能一样，你有千钧之力，缺乏一个合适的支点，也没法撬动一整个社群。无组织中的组织，具有强大的杠杆效应。</p><p>这个事情里面，我唯一提出的东西就是：在目前国内这个现状下，苦闷的招聘者应该主动行动，给出一些建议项目，正如前面提到的书单计划一样，招聘者需要给出的只是引导和<strong>清晰明确的目标</strong>，剩下的事情，应聘者自然会去完成，这些项目可以是实验项目，也可以是完全能做出点卖钱的东西的项目（如果好好做的话），唯一的不可或缺的前提是，项目不能太小，单人就能完成的项目不理想，一两个月就能完成的项目不理想，最好足够大到能够锻炼到方方面面，偏大一点倒是无所谓的，因为一个尚未完成的项目完全可以作为简历。当然，可以想见的是，<em>真到了那个时候，学生们肯定又是不会满足于仅去做那些已经有许多人做过的项目了</em>。所以这里企业们一开始所建议的项目只是一个<a href="http://www.amazon.com/Nudge-Improving-Decisions-Health-Happiness/dp/0300122233">《Nudge》</a>，是滚雪球之前需要的一点初始动能。后面的事情，他们自己会完成。</p><p>“GitHub计划”同样有一些明显的、甚至不可替代的优点：</p><ol><li>清晰、明确，完全可度量。</li><li>防伪：同样不担心“泄题”。你伪造不了GitHub历史，伪造不了check-in历史，review comments，文档，交流记录…</li><li>它不但是招聘，也是不花精力的培养。善哉善哉。</li><li>评估的责任很大程度上交给了应聘者自己。</li></ol><p><strong>从你的GitHub旅程开始，你就已经一脚踏进了真正的企业，而企业的面试也已经开始。</strong></p><p>书单+GitHub，就相当于一个两年左右的面试。</p><p><strong>没有什么面试比持续两年的面试更具有信息量。</strong></p><p>书单，加上项目，已经基本上覆盖了所需的全部技能。最妙的是，有太多的人在焦急的等待着他们未来的雇主给出明确的信号，他们想投入精力，去学习和实践，去成为企业需要的人，但是他们就是不知道往什么方向走，所谓<strong>有动力没方向</strong>。所以，雇主给出了清晰明确的要求，相信对于很多人来说<em>反倒是一个解脱</em>：“终于知道该干什么了”。<a href="http://book.douban.com/subject/3004255/">《编程之美》</a>为什么常居畅销榜？因为它透露了雇主眼中的需求，明确、清晰的需求，可以实现，并且知道怎么去实现的需求。</p><p>你提前两年就开始面试和培养未来的候选者，而且还不需要你花出一分精力，而且人家还很乐意，没有比这更完美的面试了。</p><p>想一想，以后那些没见过世面的公司看见你拿出GitHub账号给他看，该是多么惊讶同时又觉得多么合理。</p><p>而这一切，只是因为两个小小的改变：</p><ol><li>由需求方（雇主）给出了清晰、明确的目标。</li><li>GitHub这样的平台。</li></ol><p>那么，学校/老师在这个事情当中的位置呢？说实话我不知道。没有哪个行业像IT行业这样特殊：没有什么东西不能够（应该）在互联网上学到的。自组织的力量完全大过传统的教育方式。而且，既然雇主都当了领路人了，我不知道还有中间开发商什么事儿。（注：<em>这里说的是软件开发，并非计算机科学研究，后者另当别论</em>）</p><p>那么，这个改变会发生吗？多久会发生呢？当然，它在国外已经发生了，所以问这个问题多少有点无趣。但我还是预计很快就会在国内发生，毕竟，不是已经有人要求出示博客，和经常浏览的网站了吗？也许5年左右（4年本科和6年硕士的中间值？））就会深刻改变整个人才培养/招聘的格局。当然，我并不是预言家，所以不要把我的时间估计当真，我能肯定的是，这种方式是必然的大势所趋。</p><p>刚才我就收到一位同学邀请我上知乎回答一个问题“找工作的首要原则是什么？”，当然，这个问题的答案是：“<strong>弄清雇主的需求到底是什么</strong>”。</p><hr><p>列一下我所认为的，你面试微软前必须要读的十本书：</p><ol><li>Code: The Hidden Language of Computer Hardware and Software （《编码的奥秘》）</li><li>Computer System: A Programmer’s Perspective （《深入理解计算机系统》） / Windows via C/C++ （《Windows核心编程》 / 《程序员的自我修养》</li><li>Code Complete 2（《代码大全》）/ The Pragmatic Programmer （《程序员修炼之道》，我也把这本书称为《代码小全》）</li><li>Programming Pearls （《编程珠玑》） / Algorithms / Algorithm Design / 《编程之美》</li><li>The C Programming Language</li><li>The C++ Programming Language / Programming: Principles and Practice Using C++ / Accelerated C++</li><li>The Structure and Interpretation of Computer Programs （《计算机程序的构造和解释》）</li><li>Clean Code / Implementation Patterns</li><li>Design Patterns （《设计模式》） / Agile Software Development, Principles, Patterns, and Practices</li><li>Refactoring （《重构》）</li></ol><p>（注：1. 以上同一条目下用“/”隔开的表示任选，当然你也可以都读了，相信我，时间是足够的。2. 读这些书并不意味着逐字逐句从第一页读到最后一页——当然你也可以这么做。怎么是聪明高效的读法，可以参考我之前写的关于如何<a href="http://mindhacks.cn/2008/09/17/learning-habits-part3/">阅读和查找/鉴别书籍/资料的博文</a>）</p><p>注意：以上是我<em>个人</em>认为你面试微软<em>开发</em>职位前必须要读的10本书，它不代表我的雇主的观点。它也只是一个初步的书单，肯定会受到我个人经验和眼界的限制。欢迎大家提意见。</p><p>此外，IT不同子领域的必读书单可能千差万别，所以在发布之前我把这篇文章发给了一些朋友，他们给出了自己的书单（你是不是能看到一些有趣的共同点呢）：</p><p><a href="http://blog.codingnow.com/"><strong>云风</strong></a><strong>（中国游戏编程先行者，前网易游戏部门资深程序员，简悦创始人）：</strong></p><p>如果面试，我会挑以下的我自己读过的书，让人选择他也读过的部分，再了解他对这些书的理解。这些书其实本质上就是两类，对所面对的东西（程序语言也好，操作系统也好，底层设施也好）本身的理解程度。以及另一类：对设计思想和原则的理解：</p><ol><li>C++编程思想</li><li>Effective C++</li><li>深度探索C++对象模型</li><li>C++语言的设计和演化</li><li>C专家编程</li><li>C陷阱与缺陷</li><li>C语言接口与实现</li><li>Lua程序设计</li><li>Linkers and Loaders</li><li>COM本质论</li><li>Windows核心编程</li><li>深入解析Windows操作系统</li><li>程序员修炼之道</li><li>代码大全</li><li>UNIX编程艺术</li><li>设计模式</li><li>代码优化：有效使用内存</li><li>深入理解计算机系统</li><li>深入理解LINUX内核</li><li>TCP/IP 详解</li></ol><p><a href="http://web.archive.org/web/20201212095040/https://dbanotes.net/"><strong>冯大辉</strong></a><strong>（丁香园CTO，贝塔咖啡创始人）：</strong></p><ol><li>软件随想录</li><li>黑客与画家</li><li>重来</li><li>UNIX编程艺术</li><li>编程人生</li></ol><p><a href="http://www.douban.com/people/hongqn/"><strong>洪强宁</strong></a><strong>（豆瓣技术总监）：</strong></p><p>StackOverflow上有一个<a href="http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read">程序员必读书单</a>帖子，这里仅列出top10，更多参考<a href="http://book.douban.com/doulist/995723/">这里</a>。</p><ol><li>Code Complete 2</li><li>The Mythical Man-Month （《人月神话》）</li><li>Code: The Hidden Language of Computer Hardware and Software （《编码的奥秘》）</li><li>TAOCP （不解释）</li><li>The Pragmatic Programmer （《程序员修炼之道》）</li><li>Design Patterns （《设计模式》）</li><li>The Structure and Interpretation of Computer Programs （《计算机程序的构造和解释》）</li><li>Refactoring （《重构》）</li><li>The C Programming Language</li><li>Introduction to Algorithms （《算法导论》）</li></ol><p><a href="http://weibo.com/yunzheng"><strong>郑昀</strong></a><strong>（窝窝团研发副总裁）：</strong></p><ol><li>工程师入门：<ol><li>Code Complete 2</li><li>程序员修炼之道</li><li>深入理解计算机系统</li></ol></li><li>工程师升级：<ol><li>设计模式</li><li>重构——改善既有代码的设计</li></ol></li><li>工程师转型：<ol><li>快速软件开发——有效控制与完成进度计划</li><li>人月神话</li><li>IT项目管理那些事儿</li><li>软件随想录</li><li>最后期限</li><li>走出软件作坊</li><li>你的灯亮着吗?——发现问题的真正所在</li></ol></li></ol><p><a href="http://www.weibo.com/bambooman"><strong>张峥</strong></a><strong>（微软亚洲研究院副院长）：</strong></p><ol><li>Algorithms (by Sanjoy Dasgupta, Christos Papadimitriou and Umesh Vazirani)</li><li>Data Structure and Algorithms</li><li>The C Programming Language</li><li>The Design of the UNIX Operating System</li><li>Compilers （龙书）</li><li>Computer Architecture: A Quantitative Approach</li><li>Flow</li><li>Outliers (why hard work and luck are both important)</li></ol><p><a href="http://weibo.com/sdxinz"><strong>邹欣</strong></a><strong>（MSRA创新工程中心首席研发经理）：</strong></p><p>关于创新的书籍(<a href="http://book.douban.com/doulist/1253169/">http://book.douban.com/doulist/1253169/</a>):</p><ol><li>The Myths of Innovation</li><li>The Innovator’s Dilemma</li><li>The Innovator’s Solution</li><li>Crossing the Chasm</li><li>Inside Intuit</li><li>盛田昭夫</li><li>杰克·韦尔奇自传</li><li>梦断代码</li><li>Innovation</li><li>浪潮之巅</li></ol><p>关于“精通”的一篇博客《技能的反面：魔方和模仿》：</p><p><a href="http://www.cnblogs.com/xinz/archive/2011/08/07/2129751.html">http://www.cnblogs.com/xinz/archive/2011/08/07/2129751.html</a></p><p>在我教的《现代软件工程》课上，除了教科书，每个学生要看另一本相关的书籍并写读书分析。这个博客有一些同学的读书报告:<br><a href="http://www.cnblogs.com/OMG-Team/archive/2011/10/25/2223247.html">http://www.cnblogs.com/OMG-Team/archive/2011/10/25/2223247.html</a></p><hr><p><em>读好书是如此的重要，因为好书往往带领你去到更好的书，更大的世界。</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近参加了两场面试，也是挺有感触的。分享一篇与面试相关的文章，里面很多内容即使十年过去了也丝毫不过时，甚至每次读过都有新的感悟。例如里面提到了关于大作业的部分：&lt;/p&gt;
&lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;一想到作业是要作为简历的一部分的，能不紧张嘛。能不好好做嘛。能不学到点东西嘛？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在写&lt;a href=&quot;https://github.com/tootal/DBLParse&quot;&gt;数据结构大作业&lt;/a&gt;的时候就干过这事，把一个2学分的课程大作业当作一个大项目来完成，提交了800多次&lt;a href=&quot;https://github.com/tootal/DBLParse/commits/master&quot;&gt;commits&lt;/a&gt;，给软件加上版本号，发布了&lt;a href=&quot;https://github.com/tootal/DBLParse/releases&quot;&gt;Windows、MacOS以及Ubuntu&lt;/a&gt;三个系统的软件包，加上持续构建脚本……&lt;/p&gt;
&lt;article class=&quot;message message-immersive is-primary&quot;&gt;
&lt;div class=&quot;message-body&quot;&gt;
&lt;i class=&quot;fas 
                        fa-lightbulb mr-2&quot;&gt;&lt;/i&gt;以下内容摘自&lt;a href=&quot;http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/&quot;&gt;怎样花两年时间去面试一个人 – 刘未鹏 | Mind Hacks&lt;/a&gt;，修正了一些笔误以及将失效链接换成了&lt;a href=&quot;http://web.archive.org/&quot;&gt;Web Archive&lt;/a&gt;的链接。
&lt;/div&gt;
&lt;/article&gt;
&lt;p&gt;&lt;a href=&quot;http://www.joelonsoftware.com/&quot;&gt;Joel Spolsky&lt;/a&gt;曾经感叹：招聘难，难于上青天（此处笔者稍加演绎:)）。他有两个辛辣但不乏洞察力的断言：&lt;a href=&quot;http://www.joelonsoftware.com/articles/FindingGreatDevelopers.html&quot;&gt;真正的牛人也许一辈子就投大概4次简历&lt;/a&gt;，这些家伙一毕业就被好公司抢走了，并且他们的雇主会给他们不赖的待遇，所以他们也不想挪窝。（刚刚去世的&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/10/dennis_ritchie.html&quot;&gt;Dennis Ritchie&lt;/a&gt;就是这样一个人）而“人才”市场上能找到的大多都不是什么人才。招到这帮人轻则费钱重则把你公司搞挂。&lt;/p&gt;</summary>
    
    
    
    
    <category term="面试" scheme="https://blog.tootal.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>斐波那契数列总结</title>
    <link href="https://blog.tootal.xyz/posts/fibonacci-summary/"/>
    <id>https://blog.tootal.xyz/posts/fibonacci-summary/</id>
    <published>2020-12-05T07:23:41.000Z</published>
    <updated>2020-12-08T04:13:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://oi-wiki.org/math/fibonacci/">斐波那契数列</a>是从0，1开始，后面每一项都是由前面两项相加得到。开头几项是0、1、1、2、3、5、8、13……。在OEIS中是<a href="https://oeis.org/A000045">A000045</a>数列。需要注意的是斐波那契数列的<strong>第零项</strong>是0，第一项是1。本文将探讨总结斐波那契数列的相关问题。</p><p>递归定义如下：</p><div role="math">$$F_n = \begin{cases}0, & n = 0 \\1, & n = 1 \\F_{n-1} + F_{n-2} & n > 1 \end{cases}$$</div><a id="more"></a><h2 id="小范围求-span-role-math-f-n-span">小范围求<span role="math">$f(n)$</span><a class="header-anchor" href="#小范围求-span-role-math-f-n-span">#</a></h2><h3 id="span-role-math-n-le-39-span"><span role="math">$n \le 39$</span><a class="header-anchor" href="#span-role-math-n-le-39-span">#</a></h3><p>对应题目：<a href="https://www.nowcoder.com/questionTerminal/c6c7742f5ba7442aada113136ddea0c3">牛客网 【编程题】斐波那契数列</a></p><p>在这个范围内的斐波那契数列可以很容易计算出来，速度也非常快(1秒以内)，根据定义可以写出下面的递归程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> f(n<span class="number">-1</span>) + f(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f(<span class="number">39</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Time: &quot;</span> &lt;&lt; (<span class="keyword">double</span>)clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">63245986</span><br><span class="line">Time: 0.184</span><br></pre></td></tr></table></figure><p>注意：提交时需要改成类的版本。</p><h3 id="span-role-math-n-le-46-span"><span role="math">$n \le 46$</span><a class="header-anchor" href="#span-role-math-n-le-46-span">#</a></h3><p>对应题目：<a href="https://nanti.jisuanke.com/t/T1066">计蒜客T1066 斐波那契数列</a></p><p>看似数据范围仅仅增大了7，但我们继续使用上面的程序计算<span role="math">$f(46)$</span>时，会得到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1836311903</span><br><span class="line">Time: 4.946</span><br></pre></td></tr></table></figure><p>时间已经超出了1秒的限制，考虑优化一下计算方法。实际上在递归调用的过程中，有很多值被重复计算了。我们可以记录下已经算过的值，当下次需要时直接读取，不再重复计算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> fib[<span class="number">47</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fib[n]) <span class="keyword">return</span> fib[n]; <span class="comment">// 已经算过</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fib[n] = f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">46</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; n;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f(n) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Time: &quot;</span> &lt;&lt; (<span class="keyword">double</span>)clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试<span role="math">$f(46)$</span>，发现这次计算的非常快！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1836311903</span><br><span class="line">Time: 0.001</span><br></pre></td></tr></table></figure><h3 id="span-role-math-n-le-100-span"><span role="math">$n \le 100$</span><a class="header-anchor" href="#span-role-math-n-le-100-span">#</a></h3><p>对应题目：<a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">力扣 剑指 Offer 10- I. 斐波那契数列</a></p><p>注意到答案开始需要对<span role="math">$10^9+7$</span>取模了，但我们仍然可以使用上面的写法（加个取模）即可通过此题。</p><figure class="highlight cpp"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> fib[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fib[n]) <span class="keyword">return</span> fib[n]; <span class="comment">// 已经算过</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fib[n] = (f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>)) % M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; n;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f(n) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Time: &quot;</span> &lt;&lt; (<span class="keyword">double</span>)clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// 687995182</span></span><br><span class="line"><span class="comment">// Time: 0.001</span></span><br></pre></td></tr></table></figure><p>这次我们尝试换一种写法，不使用数组，利用两个变量递推得出结果。时间复杂度和上面的代码一样，但空间复杂度更加优秀。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>, a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; n;</span></span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        a = (a + b) % M;</span><br><span class="line">        swap(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Time: &quot;</span> &lt;&lt; (<span class="keyword">double</span>)clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// 687995182</span></span><br><span class="line"><span class="comment">// Time: 0</span></span><br></pre></td></tr></table></figure><p>一开始<code>a</code>代表<span role="math">$f(0)$</span>，每循环一次，a表示的数就往后一位，所以循环n次后，a就表示<span role="math">$f(n)$</span>。</p><h3 id="span-role-math-n-le-4786-span"><span role="math">$n \le 4786$</span><a class="header-anchor" href="#span-role-math-n-le-4786-span">#</a></h3><p>对应题目：<a href="http://acm.hhu.edu.cn/problem.php?id=1387">HHUOJ-1387 大斐波那契数</a><br>注：题目仅给出结果不超过1000位。</p><p>容易发现C++中的<code>int</code>甚至<code>long long</code>都无法保存这么大的数了，但好在评测系统是支持Python的，考虑到Python写法简单且自带大数，我们可以尝试使用Python来写这题。</p><p>前面提到，斐波那契数列后面每一项都是由前面两项相加得到。我们可以根据这条规则来写代码。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> count</span><br><span class="line">f = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> count(<span class="number">2</span>):</span><br><span class="line">    f.append(f[-<span class="number">1</span>] + f[-<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(f[i])) &gt; <span class="number">1000</span>: <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [*<span class="built_in">open</span>(<span class="number">0</span>)]:</span><br><span class="line">    print(f[<span class="built_in">int</span>(n)])</span><br></pre></td></tr></table></figure><p>其中<code>f[-1]</code>表示取序列<code>f</code>中最后一个元素，<code>count(2)</code>产生一个从2开始的无限序列，<code>[*open(0)]</code>表示打开标准输入文件并按行分割成列表。</p><h3 id="其他写法">其他写法<a class="header-anchor" href="#其他写法">#</a></h3><p>还有很多有趣的写法来求小范围的斐波那契数列，这里列举几种，就不详细展开了。</p><ul><li>Python 生成器</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    i, a, b = 0, 0, 1</span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        yield a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">print(<span class="built_in">list</span>(fib(<span class="number">10</span>)))</span><br></pre></td></tr></table></figure><h2 id="大范围求-span-role-math-f-n-span">大范围求<span role="math">$f(n)$</span><a class="header-anchor" href="#大范围求-span-role-math-f-n-span">#</a></h2><p>前面提到的算法的时间复杂度是<span role="math">$O(n)$</span>的，理论上来说可以在1秒以内求出<span role="math">$10^8$</span>以内的值，所以这里的大范围肯定是要比<span role="math">$10^8$</span>还大的。</p><h3 id="span-role-math-n-le-10-9-span"><span role="math">$n \le 10^9$</span><a class="header-anchor" href="#span-role-math-n-le-10-9-span">#</a></h3><p>对应题目：<a href="http://poj.org/problem?id=3070">POJ-3070 Fibonacci</a><br>注意此题的模数是10000。</p><p>题目中已经给出了关于Fibonacci数列的另一个很重要的公式：</p><div role="math">$$\begin{pmatrix}F_{n+1} & F_n \\F_n & F_{n-1}\end{pmatrix}=\begin{pmatrix}1 & 1\\1 & 0\end{pmatrix}^n$$</div><p>考虑到n比较大，可以使用<strong>矩阵快速幂</strong>求解。矩阵快速幂是<a href="https://oi-wiki.org/math/quick-pow/">快速幂算法</a>的变形，仍然是利用如下原理：</p><div role="math">$$x^y = \begin{cases}x \cdot x^{y-1}, & y为奇数 \\x^{y/2} \cdot x^{y/2}, & y为偶数 \end{cases}$$</div><p>通常我习惯把它写成<code>while</code>循环结合<strong>位运算</strong>的形式。时间复杂度为<span role="math">$O(\log(n))$</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> mat[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, n) for(int i = 0; i &lt; n; i++)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">muleq</span><span class="params">(mat &amp;a, mat &amp;b)</span> </span>&#123;</span><br><span class="line">    mat c&#123;&#125;;</span><br><span class="line">    FOR(i, <span class="number">2</span>) FOR(j, <span class="number">2</span>) FOR(k, <span class="number">2</span>)</span><br><span class="line">        c[i][j] = (c[i][j] + a[i][k] * b[k][j] % M) % M;</span><br><span class="line">    <span class="built_in">memcpy</span>(a, c, <span class="keyword">sizeof</span>(a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        mat a&#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        mat ans&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &amp; <span class="number">1</span>) muleq(ans, a);</span><br><span class="line">            muleq(a, a);</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于POJ的编译器比较老，采用了不那么直观的写法。<code>muleq(a, b)</code>的含义是<code>a = a * b</code>，其中<code>a</code>、<code>b</code>均为矩阵，<code>*</code>为矩阵乘法。</p><h3 id="span-role-math-n-le-10-18-span"><span role="math">$n \le 10^{18}$</span><a class="header-anchor" href="#span-role-math-n-le-10-18-span">#</a></h3><p>对应题目：<a href="https://www.51nod.com/Challenge/Problem.html#problemId=1242">51Nod 1242 斐波那契数列的第N项</a><br>利用上面的做法同样可以通过此题，这里利用运算符重载给出更直观一点的代码。<br>注意：此题的模数为<span role="math">$10^9+9$</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> ll M = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">using</span> Mat = <span class="built_in">array</span>&lt;<span class="built_in">array</span>&lt;ll, <span class="number">2</span>&gt;, <span class="number">2</span>&gt;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, n) for(int i = 0; i &lt; n; i++)</span></span><br><span class="line">Mat <span class="keyword">operator</span>*(<span class="keyword">const</span> Mat &amp;a, <span class="keyword">const</span> Mat &amp;b) &#123;</span><br><span class="line">    Mat c&#123;&#125;;</span><br><span class="line">    FOR(i, <span class="number">2</span>) FOR(j, <span class="number">2</span>) FOR(k, <span class="number">2</span>)</span><br><span class="line">        c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % M;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mat <span class="title">Pow</span><span class="params">(Mat x, ll y)</span> </span>&#123;</span><br><span class="line">    Mat ans&#123;&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;&#125;;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * x;</span><br><span class="line">        x = x * x;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll n = <span class="number">1e18</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; n;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Pow(Mat&#123;&#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;&#125;, n)[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Time: &quot;</span> &lt;&lt; (<span class="keyword">double</span>)clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// 209762233</span></span><br><span class="line"><span class="comment">// Time: 0.001</span></span><br></pre></td></tr></table></figure><h3 id="span-role-math-n-le-10-10-6-span"><span role="math">$n \le 10^{10^{6}}$</span><a class="header-anchor" href="#span-role-math-n-le-10-10-6-span">#</a></h3><p>类似题目：<a href="https://ac.nowcoder.com/acm/contest/885/B">2019牛客多校5B generator 1</a><br>对于这个范围的数，其实上面的算法也是可以解决的，就是实现上需要一些技巧。由于给定的n是一个十进制的数，将他转换成二进制需要花费大量时间，因此我们可以直接使用<strong>十进制下的快速幂</strong>来计算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> ll M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> Mat = <span class="built_in">array</span>&lt;<span class="built_in">array</span>&lt;ll, <span class="number">2</span>&gt;, <span class="number">2</span>&gt;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, n) for(int i = 0; i &lt; n; i++)</span></span><br><span class="line"><span class="built_in">string</span> n;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">Mat <span class="keyword">operator</span>*(<span class="keyword">const</span> Mat &amp;a, <span class="keyword">const</span> Mat &amp;b) &#123;</span><br><span class="line">    Mat c&#123;&#125;;</span><br><span class="line">    FOR(i, <span class="number">2</span>) FOR(j, <span class="number">2</span>) FOR(k, <span class="number">2</span>)</span><br><span class="line">        c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % M;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mat <span class="title">Pow</span><span class="params">(Mat x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    Mat ans&#123;&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;&#125;;</span><br><span class="line">    FOR(t, y) ans = ans * x;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Pow</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * x % M;</span><br><span class="line">        x = x * x % M;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mat <span class="title">Pow</span><span class="params">(Mat x)</span> </span>&#123;</span><br><span class="line">    Mat ans&#123;&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;&#125;;</span><br><span class="line">    FOR(i, len) &#123;</span><br><span class="line">        ans = ans*Pow(x, n[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        x = Pow(x, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="string">&quot;1&quot;</span> + <span class="built_in">string</span>(<span class="number">1e6</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    len = (<span class="keyword">int</span>)n.length();</span><br><span class="line">    reverse(n.begin(), n.end());</span><br><span class="line">    Mat A = Pow(Mat&#123;&#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;&#125;);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; A[<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他写法-2">其他写法<a class="header-anchor" href="#其他写法-2">#</a></h3><ul><li>不使用矩阵的矩阵快速幂。由于斐波那契数列的矩阵递推式非常小（<span role="math">$2\times 2$</span>），我们可以利用函数参数在递归时巧妙的计算。（对应题目：<a href="https://www.51nod.com/Challenge/Problem.html#problemId=1242">51Nod 1242 斐波那契数列的第N项</a>）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> ll M = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll n, ll a = <span class="number">1</span>, ll b = <span class="number">0</span>, ll p = <span class="number">0</span>, ll q = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!n) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>) <span class="keyword">return</span> f(n<span class="number">-1</span>, (b*q+a*q+a*p)%M, (b*p+a*q)%M, p, q);</span><br><span class="line">    <span class="keyword">return</span> f(n/<span class="number">2</span>, a, b, (p*p+q*q)%M, (q*q+<span class="number">2</span>*q*p)%M);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll n = <span class="number">1e18</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; n;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f(n) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Time: &quot;</span> &lt;&lt; (<span class="keyword">double</span>)clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// 209762233</span></span><br><span class="line"><span class="comment">// Time: 0.002</span></span><br></pre></td></tr></table></figure><ul><li>利用循环节计算。当模数给定且n的范围远大于模数时，可以采用找循环节的做法，相比于十进制快速幂会好写很多，但有时循环节是不固定的。</li></ul><p>如果不知道或者忘记了如何求斐波那契数列在给定模数下的循环节，可以写一个暴力程序求出。参考下面的代码：</p><figure class="highlight cpp"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function">ll <span class="title">fib</span><span class="params">(ll m)</span> </span>&#123;</span><br><span class="line">    ll a = <span class="number">1</span>, b = <span class="number">1</span>, c = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!(a == <span class="number">0</span> &amp;&amp; b == <span class="number">1</span>)) &#123;</span><br><span class="line">        c++;</span><br><span class="line">        a = (a + b) % m;</span><br><span class="line">        swap(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)(<span class="number">1e4</span>) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; fib(<span class="number">1e4</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)(<span class="number">1e9</span>+<span class="number">7</span>) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; fib(<span class="number">1e9</span>+<span class="number">7</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)(<span class="number">1e9</span>+<span class="number">9</span>) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; fib(<span class="number">1e9</span>+<span class="number">9</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Time: &quot;</span> &lt;&lt; (<span class="keyword">double</span>)clock() / CLOCKS_PER_SEC &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// 10000 15000</span></span><br><span class="line"><span class="comment">// 1000000007 2000000016</span></span><br><span class="line"><span class="comment">// 1000000009 333333336</span></span><br><span class="line"><span class="comment">// Time: 7.443</span></span><br></pre></td></tr></table></figure><h2 id="斐波那契相关问题">斐波那契相关问题<a class="header-anchor" href="#斐波那契相关问题">#</a></h2><p>对于其他和斐波那契数列相关的问题，如广义斐波那契数列、斐波那契数列前缀和等，这里归类为斐波那契相关问题。通常需要用到一些斐波那契数列的性质，参考文章：<a href="/asset/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0_%E5%AD%99%E6%99%BA%E5%AE%8F.pdf">斐波那契数_孙智宏</a>。</p><h3 id="广义斐波那契数列">广义斐波那契数列<a class="header-anchor" href="#广义斐波那契数列">#</a></h3><p>对应题目：<a href="https://www.51nod.com/Challenge/Problem.html#problemId=1126">51Nod-1126 求递推序列的第N项</a><br>注意：此题下标从1开始。<br>广义斐波那契数列是斐波那契数列的推广，定义如下：</p><div role="math">$$F_n = \begin{cases}A, & n = 0 \\B, & n = 1 \\C\cdot F_{n-1} + D \cdot F_{n-2}, & n > 1 \end{cases}$$</div><p>当A=0，B=C=D=1是变成普通的斐波那契数列，A=2，B=C=D=1时，变成卢卡斯序列。</p><p>广义斐波那契数列的处理方式基本一样。我们可以推一下这个序列的矩阵递推式：</p><div role="math">$$\begin{aligned}\begin{pmatrix}f_{n+1} \\f_n \end{pmatrix}& =  \begin{pmatrix}C & D\\1 & 0\end{pmatrix}\begin{pmatrix}f_n \\f_{n-1}\end{pmatrix}\\ & =  \begin{pmatrix}C & D\\1 & 0\end{pmatrix}^{n}\begin{pmatrix}B \\A\end{pmatrix}\end{aligned}$$</div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> ll M = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> Mat = <span class="built_in">array</span>&lt;<span class="built_in">array</span>&lt;ll, <span class="number">2</span>&gt;, <span class="number">2</span>&gt;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, n) for(int i = 0; i &lt; n; i++)</span></span><br><span class="line">Mat <span class="keyword">operator</span>*(<span class="keyword">const</span> Mat &amp;a, <span class="keyword">const</span> Mat &amp;b) &#123;</span><br><span class="line">    Mat c&#123;&#125;;</span><br><span class="line">    FOR(i, <span class="number">2</span>) FOR(j, <span class="number">2</span>) FOR(k, <span class="number">2</span>)</span><br><span class="line">        c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % M;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; n;</span><br><span class="line">    Mat m&#123;&#123;&#123;a, b&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;&#125;;</span><br><span class="line">    Mat ans&#123;&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (n--; n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) ans = ans * m;</span><br><span class="line">        m = m * m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ((ans[<span class="number">1</span>][<span class="number">0</span>] + ans[<span class="number">1</span>][<span class="number">1</span>]) % M + M) % M &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求区间和">求区间和<a class="header-anchor" href="#求区间和">#</a></h3><p>对应题目：<a href="http://acm.hit.edu.cn/problemset/2060">HITOJ-2060 Fibonacci Problem Again</a>。<br>注意：此题斐波那契数列前两项为1，模数为<span role="math">$10^9$</span>。</p><p>考虑一般的斐波那契数列区间和，可以直接转化成斐波那契数列求解：<span role="math">$S(n)=f(n+2)-1$</span>，其中<span role="math">$S(n)=\sum\limits_{i=0}^n f(i)$</span>。</p><p>直接套用一个上面的代码，复杂度<span role="math">$O(log(n))$</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> ll M = <span class="number">1e9</span>;</span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll n, ll a = <span class="number">1</span>, ll b = <span class="number">0</span>, ll p = <span class="number">0</span>, ll q = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!n) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>) <span class="keyword">return</span> f(n<span class="number">-1</span>, (b*q+a*q+a*p)%M, (b*p+a*q)%M, p, q);</span><br><span class="line">    <span class="keyword">return</span> f(n/<span class="number">2</span>, a, b, (p*p+q*q)%M, (q*q+<span class="number">2</span>*q*p)%M);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (f(b+<span class="number">3</span>)-f(a+<span class="number">2</span>)+M)%M &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环节加速">循环节加速<a class="header-anchor" href="#循环节加速">#</a></h3><p>对应题目：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1021">Fibonacci Again</a></p><p>实际上广义斐波那契数列也是有循环节的。利用之前提到的方法，可以直接算出这个序列的循环节为8。而该序列的前8项为<code>[7, 11, 18, 29, 47, 76, 123, 199]</code>，其中能被3整除的有<code>[2, 6]</code> 项，即<code>n % 4 == 2</code>是为<code>yes</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ((n % <span class="number">4</span> == <span class="number">2</span>) ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小范围求循环节">小范围求循环节<a class="header-anchor" href="#小范围求循环节">#</a></h3><p>对应题目：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3977">HDU3977 Evil teacher</a></p><p>对于一个给定的模数，如何求出循环节呢？利用枚举的方法显然太慢了，我们可以利用这篇论文：<a href="/asset/The%20Period%20of%20the%20Fibonacci%20Sequence%20Modulo%20j.pdf">The Period of the Fibonacci Sequence Modulo j.pdf</a>中提到的一些性质来加速求解。</p><blockquote><p>(定理3) 设<span role="math">$j$</span>是一个正数，且<span role="math">$j=\prod\limits_{i=1}^s p_i^{k_i}$</span>，其中<span role="math">$p_i$</span>是素数，设<span role="math">$m_i$</span>表示<span role="math">$F_n(\mod p_i^{k_i})$</span>的循环节，<span role="math">$m$</span>表示<span role="math">$F_n(\mod j)$</span>的循环节，则有<span role="math">$m=lcm(m_1, m_2, …, m_s)$</span>。</p></blockquote><p>利用这条性质，我们可以先把模数P质因数分解，转换为求模数为<span role="math">$p^k$</span>的情况。</p><p>再根据这条推论：</p><blockquote><p>设<span role="math">$G( p )$</span>表示<span role="math">$F_n(\mod p)$</span>的循环节，其中<span role="math">$p$</span>为质数，则有<span role="math">$G(p^k)=G( p )\cdot p^{k-1}$</span>。</p></blockquote><p>（详细证明可以参考<a href="https://www.cnblogs.com/yicongli/p/9800705.html">这篇博客</a>）</p><p>此外还有一个小性质：<span role="math">$G( p ) \le 6p$</span>（证明参考<a href="https://www.mathpages.com/home/kmath078/kmath078.htm">这里</a>）可以帮助我们估算复杂度。</p><p>注意到P的最大素因子不超过<span role="math">$10^6$</span>，且只有20组，估算一下最坏情况下的复杂度完全可以通过此题。</p><figure class="highlight cpp"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lcm</span><span class="params">(ll a, ll b)</span> </span>&#123; <span class="keyword">return</span> a / __gcd(a, b) * b; &#125;</span><br><span class="line"><span class="function">ll <span class="title">fib_perd</span><span class="params">(ll m)</span> </span>&#123; <span class="comment">// 求Fn mod m 循环节</span></span><br><span class="line">    ll a = <span class="number">1</span>, b = <span class="number">1</span>, c = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!(a == <span class="number">0</span> &amp;&amp; b == <span class="number">1</span>)) &#123;</span><br><span class="line">        c++;</span><br><span class="line">        a = (a + b) % m;</span><br><span class="line">        swap(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; is_prime;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; prime;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">()</span> </span>&#123; <span class="comment">// 素数筛法</span></span><br><span class="line">    is_prime.resize(N, <span class="literal">true</span>);</span><br><span class="line">    is_prime[<span class="number">0</span>] = is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!is_prime[i]) <span class="keyword">continue</span>;</span><br><span class="line">        prime.push_back(i);</span><br><span class="line">        <span class="keyword">for</span> (ll j = i * i; j &lt; N; j += i) is_prime[j] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    get_prime();</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line">        ll n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        ll ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : prime) &#123; <span class="comment">// 质因数分解</span></span><br><span class="line">            <span class="keyword">if</span> (n % p) <span class="keyword">continue</span>;</span><br><span class="line">            ll pk = <span class="number">1</span>; <span class="comment">// 保存p^k</span></span><br><span class="line">            <span class="keyword">while</span> (n % p == <span class="number">0</span>) pk *= p, n /= p;</span><br><span class="line">            ans = lcm(ans, pk / p * fib_perd(p));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通项公式">通项公式<a class="header-anchor" href="#通项公式">#</a></h3><p>上面已经得到了斐波那契数列公式的矩阵形式，要得到通项公式，还需要进一步变换。这里采用线性代数的方法。</p><div role="math">$$\begin{aligned}\begin{pmatrix}F_{n+1} \\F_n\end{pmatrix}& =  \begin{pmatrix}1 & 1\\1 & 0\end{pmatrix}^n\begin{pmatrix}1 \\0\end{pmatrix}\end{aligned}$$</div><p>利用对角化计算方阵的幂。</p><p>设矩阵<span role="math">$A=\begin{pmatrix} 1 &amp; 1\\ 1 &amp; 0 \end{pmatrix}$</span>，其特征方程为：<span role="math">$|\lambda E-A|$</span>，其中<span role="math">$E$</span>为单位矩阵。</p><p>计算得：</p><div role="math">$$\begin{aligned}|\lambda E-A| & =   \left|\begin{matrix}\lambda-1 & -1\\-1 & \lambda\end{matrix}\right| \\& =   \lambda^2-\lambda-1\end{aligned}$$</div><p>解得<span role="math">$\lambda_1=\frac{1-\sqrt{5}}{2}$</span>，<span role="math">$\lambda_2=\frac{1+\sqrt{5}}{2}$</span>。</p><p>代入特征值<span role="math">$\lambda_1$</span>，解齐次线性方程组<span role="math">$(\lambda E - A)X=0$</span>：</p><div role="math">$$\lambda E - A = \begin{pmatrix}-\lambda_2 & -1 \\-1 & \lambda_1\end{pmatrix}$$</div><p>将矩阵第一行乘以<span role="math">$\lambda_1$</span>加到第二行，矩阵变换为：</p><div role="math">$$\begin{pmatrix}-\lambda_2 & -1 \\0 & 0\end{pmatrix}$$</div><p>即<span role="math">$x_2=-\lambda_2 x_1$</span>，取<span role="math">$x_1=1$</span>，则其基础解系为<span role="math">$X_1=\begin{pmatrix}1 \\ -\lambda_2\end{pmatrix}$</span>。</p><p>取特征向量为<span role="math">$\xi_1=\begin{pmatrix}1 \\ -\lambda_2\end{pmatrix}$</span>，对于<span role="math">$\lambda_2$</span>同理可得<span role="math">$\xi_2=\begin{pmatrix}1 \\ -\lambda_1\end{pmatrix}$</span>。</p><p>令</p><div role="math">$$\begin{aligned}P & =  (\xi_1, \xi_2)\\  & = \begin{pmatrix}1 & 1\\         -\lambda_2 & -\lambda_1\end{pmatrix}\\  & = \begin{pmatrix}1 & 1\\             \lambda_2 & \lambda_1\end{pmatrix}\end{aligned}$$</div><p>利用增广矩阵求逆。</p><div role="math">$$\begin{aligned}(P|E) & = \begin{pmatrix}1 & 1 & 1 & 0\\ \lambda_2 & \lambda_1 & 0 & 1\end{pmatrix} \\& = \begin{pmatrix}1 & 1 & 1 & 0\\ 0 & -\sqrt{5} & -\lambda_2 & 1\end{pmatrix} \\& = \begin{pmatrix}1 & 0 & \frac{\sqrt{5}-1}{2\sqrt{5}} & \frac{1}{\sqrt{5}}\\ 0 & -\sqrt{5} & -\lambda_2 & 1\end{pmatrix} \\& = \begin{pmatrix}1 & 0 & \frac{\sqrt{5}-1}{2\sqrt{5}} & \frac{1}{\sqrt{5}}\\ 0 & 1 & \frac{1+\sqrt{5}}{2\sqrt{5}} & -\frac{1}{\sqrt{5}}\end{pmatrix} \\\end{aligned}$$</div><p>依次进行的变换为：</p><ul><li>第一行乘以<span role="math">$-\lambda_2$</span>加到第二行</li><li>第二行乘以<span role="math">$\frac{1}{\sqrt{5}}$</span>加到第一行</li><li>第三行乘以<span role="math">$-\frac{1}{\sqrt{5}}$</span></li></ul><p>注：<a href="https://www.wolframalpha.com/input/?i=inverse+%7B%7B1%2C1%7D%2C%7B%281%2Bsqrt%285%29%29%2F2%2C+%281-sqrt%285%29%29%2F2%7D%7D">Wolfram验算</a></p><p>可得<span role="math">$P^{-1}=\begin{pmatrix} \frac{\sqrt{5}-1}{2\sqrt{5}} &amp; \frac{1}{\sqrt{5}}\\ \frac{1+\sqrt{5}}{2\sqrt{5}} &amp; -\frac{1}{\sqrt{5}}\end{pmatrix}$</span>。</p><p>由于<span role="math">$P^{-1}AP=\begin{pmatrix}\lambda_1 &amp; 0 \\ 0 &amp; \lambda_2\end{pmatrix}$</span>，故<span role="math">$A^n=P\begin{pmatrix}\lambda_1^n &amp; 0 \\ 0 &amp; \lambda_2^n\end{pmatrix}P^{-1}$</span>，于是：</p><div role="math">$$\begin{aligned}\begin{pmatrix}F_{n+1} \\F_n\end{pmatrix}& = A^{n}\begin{pmatrix}1 \\0\end{pmatrix}\\& = \begin{pmatrix}1 & 1\\ \lambda_2 & \lambda_1\end{pmatrix}\begin{pmatrix}(\lambda_1)^n & 0 \\ 0 & (\lambda_2)^n\end{pmatrix}\begin{pmatrix} \frac{\sqrt{5}-1}{2\sqrt{5}}\\ \frac{1+\sqrt{5}}{2\sqrt{5}}\end{pmatrix}\\& = \begin{pmatrix}1 & 1\\ \lambda_2 & \lambda_1\end{pmatrix}\begin{pmatrix}\frac{\sqrt{5}-1}{2\sqrt{5}}(\lambda_1)^n \\ \frac{1+\sqrt{5}}{2\sqrt{5}}(\lambda_2)^n\end{pmatrix}\end{aligned}$$</div><p>因此：</p><div role="math">$$\begin{aligned}F_n& = \lambda_2\cdot \frac{\sqrt{5}-1}{2\sqrt{5}}(\lambda_1)^n+\lambda_1\cdot\frac{1+\sqrt{5}}{2\sqrt{5}}(\lambda_2)^n\\& = \frac{1}{\sqrt{5}}[(\lambda_2)^n-(\lambda_1)^n]\end{aligned}$$</div><p>参考：<a href="https://www.zhihu.com/question/25217301/answer/158291644">斐波那契数列通项公式是怎样推导出来的？ - 面无表情的仔仔的回答 - 知乎</a></p><h3 id="利用通项公式计算">利用通项公式计算<a class="header-anchor" href="#利用通项公式计算">#</a></h3><p>这种方式本质上还是利用快速幂计算，不过不需要矩阵了。</p><p>首先考虑一下通项公式中的根号与分式如何处理，假设模数为<span role="math">$M$</span>，以<span role="math">$\frac{1+\sqrt{5}}{2}$</span>为例，假设<span role="math">$x\equiv\frac{1+\sqrt{5}}{2}\pmod{M}$</span>，则有<span role="math">$(2x-1)^2\equiv5\pmod{M}$</span>。</p><p>以<span role="math">$M=10^9+9$</span>为例，直接暴力求出x。（需要运行几分钟，其实有更快的算法，但是较为复杂，就先不讲了）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">M = <span class="number">10</span>**<span class="number">9</span> + <span class="number">9</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, M):</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span>*x-<span class="number">1</span>)**<span class="number">2</span> % M == <span class="number">5</span>:</span><br><span class="line">        print(x)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"><span class="comment"># 308495997</span></span><br><span class="line"><span class="comment"># 691504013</span></span><br></pre></td></tr></table></figure><p>另一个解是<span role="math">$\frac{1-\sqrt{5}}{2}$</span>。同理计算出<span role="math">$\frac{1}{\sqrt{5}}$</span>的结果为<code>276601605</code>、<code>723398404</code>，通过<strong>尝试</strong>我们可以找出正确的组合。</p><p>对应题目：<a href="https://www.51nod.com/Challenge/Problem.html#problemId=1242">51Nod1242 斐波那契数列的第N项</a></p><p>这样我们就可以写出非常简短的代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n, m, p, s = <span class="built_in">int</span>(<span class="built_in">input</span>()), <span class="number">10</span>**<span class="number">9</span>+<span class="number">9</span>, <span class="number">308495997</span>, <span class="number">723398404</span></span><br><span class="line">print(s*(<span class="built_in">pow</span>(p,n,m)-<span class="built_in">pow</span>(m-p+<span class="number">1</span>,n,m))%m)</span><br></pre></td></tr></table></figure><p>注：python的pow自带快速幂，时间复杂度仍然是<span role="math">$O(\log n)$</span>。python实现的取模运算保证结果为非负数，因此减法部分不用考虑负数问题。</p><h2 id="斐波那契数列相关难题">斐波那契数列相关难题<a class="header-anchor" href="#斐波那契数列相关难题">#</a></h2><p>部分题目来自：<a href="https://zhuanlan.zhihu.com/p/19980193">斐波那契数列的那些题</a>。</p><p>这些题目十分有难度，后续会慢慢补上。。。</p><h3 id="k次幂求和">k次幂求和<a class="header-anchor" href="#k次幂求和">#</a></h3><p>对应题目：<a href="http://www.51nod.com/Challenge/Problem.html#problemId=1236">51Nod1236 序列求和 V3</a>、<a href="https://zoj.pintia.cn/problem-sets/91827364500/problems/91827369735">ZOJ3774 Power of Fibonacci</a></p><p>不妨设<span role="math">$\phi=\frac{1+\sqrt{5}}{2}$</span>,<span role="math">$\bar\phi=\frac{1-\sqrt{5}}{2}$</span>。</p><p>则有<span role="math">$F_n=\frac{1}{\sqrt{5}}(\phi^n-\bar\phi^n)$</span>。</p><p>那么：<span role="math">$F_n^k=(\frac{1}{\sqrt{5}})^k(\phi^n-\bar\phi^n)^k$</span>。</p><p>利用二项式定理展开得：</p><div role="math">$$F_n^k=(\frac{1}{\sqrt{5}})^k\sum_{i=0}^kC_k^i(\phi^n)^{k-i}(-\bar\phi^n)^i$$</div><p>求前缀和计算得：</p><div role="math">$$\begin{aligned}S_n& =  \sum_{i=1}^nF_i^k\\& =  \sum_{i=1}^n(\frac{1}{\sqrt{5}})^k\sum_{j=0}^kC_k^j(\phi^i)^{k-j}(-\bar\phi^i)^j\\& =  (\frac{1}{\sqrt{5}})^k\sum_{i=1}^n\sum_{j=0}^k (-1)^j C_k^j \phi^{i(k-j)} \bar\phi^{ij}\\\end{aligned}$$</div><p>变换求值顺序（将j看成定值）有：</p><div role="math">$$S_n = (\frac{1}{\sqrt{5}})^k\sum_{j=0}^k (-1)^j C_k^j \sum_{i=1}^n (\phi^{k-j} \bar\phi^j)^i\\$$</div><p>不妨设<span role="math">$q=\phi^{k-j} \bar\phi^j$</span>，若<span role="math">$q=1$</span>，则<span role="math">$\sum\limits_{i=1}^n (\phi^{k-j} \bar\phi^j)^i=n$</span>，否则利用等比数列求和公式计算得<span role="math">$\frac{q\cdot (1-q^n)}{1-q}$</span>。<br>于是我们预处理出阶乘、以及两个常量的幂次，即可计算，时间复杂度<span role="math">$O(K+TK\log n)$</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll M = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line">ll phi[N], phj[N], fac[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = a; i &lt; b; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRE(arr, n) arr[0] = 1; FOR(i, 1, N) arr[i] = arr[i-1]*n%M</span></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * x % M;</span><br><span class="line">        x = x * x % M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">inv</span><span class="params">(ll x)</span> </span>&#123; <span class="keyword">return</span> qpow(x, M<span class="number">-2</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    PRE(fac, i); PRE(phi, <span class="number">691504013</span>); PRE(phj, <span class="number">308495997</span>);</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        ll n, k; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        FOR(j, <span class="number">0</span>, k+<span class="number">1</span>) &#123;</span><br><span class="line">            ll q = phi[k-j]*phj[j]%M;</span><br><span class="line">            ll com = fac[k]*inv(fac[j]*fac[k-j]%M)%M;</span><br><span class="line">            ll prod = (q==<span class="number">1</span>) ? (n%M) : (q*(qpow(q,n)<span class="number">-1</span>)%M*inv(q<span class="number">-1</span>)%M);</span><br><span class="line">            ans = (j&amp;<span class="number">1</span>) ? (ans-com*prod)%M : (ans+com*prod)%M;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (ans*qpow(<span class="number">276601605</span>, k)%M+M)%M &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺带一提，我还尝试用Python写这题（理论复杂度应该没有问题），发现可以通过51Nod（时限为18s）但是无法通过ZOJ（时限为5s）。从51Nod的测试结果来看，上面的C++程序只跑了不到1s，而Python写法最多要跑10s。</p><blockquote><p>不同语言的时间限制和内存限制是相同的吗？<br>是相同的，我们认为选择合适的编程语言也是一项必备技能，所以没有为不同语言设置不同的限制条件。（来自ZOJ）</p></blockquote><p>如果有知道如何优化Python时间的希望能留言告诉我一下。</p><figure class="highlight py"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">t, m, fac = <span class="built_in">int</span>(<span class="built_in">input</span>()), <span class="number">10</span>**<span class="number">9</span>+<span class="number">9</span>, [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100001</span>): fac.append(fac[-<span class="number">1</span>]*i%m) <span class="comment"># 预处理阶乘</span></span><br><span class="line">inv = <span class="keyword">lambda</span> x: <span class="built_in">pow</span>(x, m-<span class="number">2</span>, m) <span class="comment"># 计算逆元</span></span><br><span class="line">phi, phibar = [<span class="number">1</span>], [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100001</span>): phi.append(phi[-<span class="number">1</span>]*<span class="number">691504013</span>%m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100001</span>): phibar.append(phibar[-<span class="number">1</span>]*<span class="number">308495997</span>%m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">    n, k = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k+<span class="number">1</span>):</span><br><span class="line">        q = phi[k-j]*phibar[j]%m</span><br><span class="line">        com = fac[k]*inv(fac[j]*fac[k-j]%m)%m</span><br><span class="line">        prod = n <span class="keyword">if</span> q==<span class="number">1</span> <span class="keyword">else</span> q*(m+<span class="number">1</span>-<span class="built_in">pow</span>(q, n, m))%m*inv(m+<span class="number">1</span>-q)%m</span><br><span class="line">        sgn = <span class="number">1</span> <span class="keyword">if</span> j%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">        ans = (ans + com*sgn*prod + m) % m</span><br><span class="line">    print(ans*<span class="built_in">pow</span>(<span class="number">276601605</span>,k,m)%m)</span><br></pre></td></tr></table></figure><h3 id="大范围求循环节">大范围求循环节<a class="header-anchor" href="#大范围求循环节">#</a></h3><p>对应题目：<a href="http://www.51nod.com/Challenge/Problem.html#problemId=1195">51Nod1195 斐波那契数列的循环节</a></p><p>这题是之前小范围求循环节的加强版，质数的范围最大可以到<span role="math">$10^9$</span>。可以再仔细阅读一下这篇论文：<a href="/asset/The%20Period%20of%20the%20Fibonacci%20Sequence%20Modulo%20j.pdf">The Period of the Fibonacci Sequence Modulo j.pdf</a>。</p><p>主要利用这条性质加速计算：</p><blockquote><p>对于质数<span role="math">$p &gt; 5$</span>，如果5是模p的二次剩余，那么模p意义下的循环节长度是(p-1)的因子，否则是(2p+2)的因子。</p></blockquote><p>利用<a href="https://oi-wiki.org/math/quad-residue/#_4">欧拉判定准则</a>来判断<a href="https://oi-wiki.org/math/quad-residue/">二次剩余</a>。</p><p>代码中还用到了一些数论方面的知识，例如<a href="https://oi-wiki.org/math/sieve/#_2">素数筛法</a>、质因数分解、枚举因子、<a href="https://oi-wiki.org/math/quad-residue/#_4">判二次剩余</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">// 质数表大小以及小范围常量表</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>, pd[<span class="number">6</span>]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">20</span>&#125;; </span><br><span class="line"><span class="function">ll <span class="title">lcm</span><span class="params">(ll a, ll b)</span> </span>&#123; <span class="keyword">return</span> a / __gcd(a, b) * b; &#125;</span><br><span class="line"><span class="comment">// 矩阵快速幂求斐波那契数列</span></span><br><span class="line"><span class="function">ll <span class="title">fib</span><span class="params">(ll n, ll mod, ll a = <span class="number">1</span>, ll b = <span class="number">0</span>, ll p = <span class="number">0</span>, ll q = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!n) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>) <span class="keyword">return</span> fib(n<span class="number">-1</span>, mod, (b*q+a*q+a*p)%mod, (b*p+a*q)%mod, p, q);</span><br><span class="line">    <span class="keyword">return</span> fib(n/<span class="number">2</span>, mod, a, b, (p*p+q*q)%mod, (q*q+<span class="number">2</span>*q*p)%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查mod下循环节是否为perd</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_perd</span><span class="params">(ll mod, ll perd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fib(perd, mod)==<span class="number">0</span> &amp;&amp; fib(perd+<span class="number">1</span>, mod)==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; is_prime;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; prime;</span><br><span class="line"><span class="comment">// 素数筛法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    is_prime.resize(N, <span class="literal">true</span>);</span><br><span class="line">    is_prime[<span class="number">0</span>] = is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!is_prime[i]) <span class="keyword">continue</span>;</span><br><span class="line">        prime.push_back(i);</span><br><span class="line">        <span class="keyword">for</span> (ll j = i * i; j &lt; N; j += i) is_prime[j] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 质因数分解</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;ll, ll&gt;&gt; get_factor(ll n) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;ll, ll&gt;&gt; factor;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : prime) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p &gt; n / p) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (n % p) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n % p == <span class="number">0</span>) cnt++, n /= p;</span><br><span class="line">        factor.emplace_back(p, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) factor.emplace_back(n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> factor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 快速幂</span></span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(ll x, ll y, ll mod = <span class="number">9e18</span>, ll ans = <span class="number">1</span>)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (!y) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">if</span> (y&amp;<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">pow</span>(x, y<span class="number">-1</span>, mod, ans*x%mod);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">pow</span>(x*x%mod, y&gt;&gt;<span class="number">1</span>, mod, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断n是否为p的二次剩余</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_quad</span><span class="params">(ll n, ll p)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(n, (p<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>, p) == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 枚举因子</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;ll&gt; <span class="title">perm_factor</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> factor = get_factor(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;ll&gt; divisor;</span><br><span class="line">    function&lt;<span class="keyword">void</span>(ll, <span class="keyword">int</span>)&gt; dfs = [&amp;](ll d, <span class="keyword">int</span> i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == (<span class="keyword">int</span>)factor.size()) <span class="keyword">return</span> divisor.push_back(d);</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">0</span>; j &lt;= factor[i].second; j++)</span><br><span class="line">            dfs(d * <span class="built_in">pow</span>(factor[i].first, j), i+<span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> dfs(<span class="number">1</span>, <span class="number">0</span>), divisor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求循环节</span></span><br><span class="line"><span class="function">ll <span class="title">fib_pred</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">5</span>) <span class="keyword">return</span> pd[n]; <span class="comment">// 小于等于5的数不满足该性质</span></span><br><span class="line">    ll t = is_quad(<span class="number">5</span>, n) ? (n<span class="number">-1</span>) : (<span class="number">2</span>*n+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> d : perm_factor(t)) <span class="comment">// 枚举所有t的因子</span></span><br><span class="line">        <span class="keyword">if</span> (check_perd(n, d)) <span class="keyword">return</span> d;</span><br><span class="line">    <span class="keyword">return</span> assert(<span class="literal">false</span>), <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理每一组数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll n, ans = <span class="number">1</span>; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> f : get_factor(n))</span><br><span class="line">        ans = lcm(ans, <span class="built_in">pow</span>(f.first, f.second<span class="number">-1</span>) * fib_pred(f.first));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    get_prime();</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/zhuangmezhuang/article/details/52627308">参考博客</a></p><h3 id="最小公倍数">最小公倍数<a class="header-anchor" href="#最小公倍数">#</a></h3><p>对应题目：<a href="http://www.51nod.com/Challenge/Problem.html#problemId=1355">51Nod1355 斐波那契的最小公倍数</a></p><h3 id="找位置">找位置<a class="header-anchor" href="#找位置">#</a></h3><p>对应题目：<a href="http://www.51nod.com/Challenge/Problem.html#problemId=1145">51Nod1145 斐波那契数列</a></p><h3 id="求-span-role-math-f-n-mod-f-k-span">求<span role="math">$f(n)\mod f(k)$</span><a class="header-anchor" href="#求-span-role-math-f-n-mod-f-k-span">#</a></h3><p>对应题目：<a href="http://www.51nod.com/Challenge/Problem.html#problemId=1194">51Nod1194 Fib(N) mod Fib(K)</a></p><h3 id="广义斐波那契数列求循环节">广义斐波那契数列求循环节<a class="header-anchor" href="#广义斐波那契数列求循环节">#</a></h3><p>对应题目：<a href="http://www.51nod.com/Challenge/Problem.html#problemId=1263">1263 广义斐波那契数列</a></p><p>参考论文：<a href="/asset/PeriodRankOrderMMofficial.pdf">PeriodRankOrderMMofficial.pdf</a></p><h3 id="斐波那契字符串">斐波那契字符串<a class="header-anchor" href="#斐波那契字符串">#</a></h3><p>对应题目：<a href="http://www.51nod.com/Challenge/Problem.html#problemId=1146">51Nod 1146 斐波那契字符串</a></p><h3 id="span-role-math-pi-span-斐波那契数列"><span role="math">$\pi$</span>斐波那契数列<a class="header-anchor" href="#span-role-math-pi-span-斐波那契数列">#</a></h3><p>对应题目：<a href="http://www.51nod.com/Challenge/Problem.html#problemId=1149">51Nod1149 Pi的递推式</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://oi-wiki.org/math/fibonacci/&quot;&gt;斐波那契数列&lt;/a&gt;是从0，1开始，后面每一项都是由前面两项相加得到。开头几项是0、1、1、2、3、5、8、13……。在OEIS中是&lt;a href=&quot;https://oeis.org/A000045&quot;&gt;A000045&lt;/a&gt;数列。需要注意的是斐波那契数列的&lt;strong&gt;第零项&lt;/strong&gt;是0，第一项是1。本文将探讨总结斐波那契数列的相关问题。&lt;/p&gt;
&lt;p&gt;递归定义如下：&lt;/p&gt;
&lt;div role=&quot;math&quot;&gt;$$
F_n = 
\begin{cases}
0, &amp; n = 0 \\
1, &amp; n = 1 \\
F_{n-1} + F_{n-2} &amp; n &gt; 1 
\end{cases}
$$&lt;/div&gt;</summary>
    
    
    
    <category term="计算机" scheme="https://blog.tootal.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="算法竞赛" scheme="https://blog.tootal.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="ACM" scheme="https://blog.tootal.xyz/tags/ACM/"/>
    
    <category term="算法" scheme="https://blog.tootal.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="斐波那契数列" scheme="https://blog.tootal.xyz/tags/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>2020 年「计算机科学与工程学院」新生赛总结</title>
    <link href="https://blog.tootal.xyz/posts/scutpc2020-summary/"/>
    <id>https://blog.tootal.xyz/posts/scutpc2020-summary/</id>
    <published>2020-11-23T09:54:01.000Z</published>
    <updated>2020-11-23T09:54:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次作为出题人参与一场算法竞赛，感受还是很不同的。相比与参赛者，少了一些紧张刺激新鲜感，当然也少了一些自闭。</p><p>比赛在<a href="https://scut.online">SCUT CODE</a>上举行，总体而言这个系统做的还是挺不错的，响应迅速，功能齐全。唯一要吐槽的就是题目竟然只能添加不能删除！添加比赛需要一些玄之又玄的操作。还有Special Judge也是非常难配置，还缺少了交互功能。第一场由于没有放特别简单的签到题导致大量选手爆0，导致第二场人数锐减。。。不过第二场比赛的题目最后经过调整还是简单了许多的。下面按难度总结一下这次比赛的题目，目前题目已经全部开放了，可以在题库中找到提交。</p><p><a href="https://scut.online/contest/106">第一场比赛链接</a><br><a href="https://scut.online/contest/99">第二场比赛链接</a></p><a id="more"></a><p>所有相关题目的题库链接：</p><p><a href="https://scut.online/p/658">658. 垃圾邮件</a><br><a href="https://scut.online/p/661">661. 一个小游戏</a><br><a href="https://scut.online/p/662">662. Overload</a><br><a href="https://scut.online/p/663">663. 乒乓球</a><br><a href="https://scut.online/p/664">664. 超人高中生的基建计划</a><br><a href="https://scut.online/p/665">665. 灰之魔女的旅行</a><br><a href="https://scut.online/p/666">666. 艾尔奇亚的国王</a><br><a href="https://scut.online/p/667">667. umi炒饭</a><br><a href="https://scut.online/p/668">668. Dirichlet卷积</a><br><a href="https://scut.online/p/669">669. 1-2 心与心之间的距离，永不点亮的音乐会</a><br><a href="https://scut.online/p/670">670. 序列构造</a><br><a href="https://scut.online/p/671">671. 爆炸就是艺术</a><br><a href="https://scut.online/p/672">672. Tree</a><br><a href="https://scut.online/p/673">673. 猪灵的胜利之舞</a><br><a href="https://scut.online/p/674">674. Merge Stone</a><br><a href="https://scut.online/p/675">675. 学园都市的神秘代码</a><br><a href="https://scut.online/p/676">676. 世界棋盘</a><br><a href="https://scut.online/p/677">677. 谜拟Q plus</a><br><a href="https://scut.online/p/678">678. 射击训练</a><br><a href="https://scut.online/p/679">679. 小斯巴达们的历练</a><br><a href="https://scut.online/p/680">680. 主人和雷姆拉姆的秘密</a><br><a href="https://scut.online/p/682">682. 爆炸就是艺术2</a><br><a href="https://scut.online/p/683">683. 乒乓球2</a></p><h2 id="射击训练"><a href="https://scut.online/p/678">射击训练</a><a class="header-anchor" href="#射击训练">#</a></h2><p>题意：统计有多少个点在圆内。</p><p>利用距离公式计算即可，浮点数可以直接输出。</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p678-C++">                        C++                    </a>                   </li><li class="tab ">                    <a href="#p678-Python">                        Python                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p678-C++" class="tab-content "><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, r, n, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; r &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">double</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (sqr(x-a)+sqr(y-b) &lt;= sqr(r)) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">double</span>(cnt)/n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p678-Python" class="tab-content is-hidden"><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a, b, r = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    x, y = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    <span class="keyword">if</span> (x-a)**<span class="number">2</span>+(y-b)**<span class="number">2</span>&lt;=r*r: cnt += <span class="number">1</span></span><br><span class="line">print(cnt/n)</span><br></pre></td></tr></table></figure></div>                  </div><h2 id="Overload"><a href="https://scut.online/p/662">Overload</a><a class="header-anchor" href="#Overload">#</a></h2><p>题意：一颗以1为根的树，给定每个节点到父亲节点的距离，求到根节点的最大距离。</p><p>用dfs或bfs将树遍历一遍即可，也可以用带权并查集计算。</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p662-C++ (DFS)">                        C++ (DFS)                    </a>                   </li><li class="tab ">                    <a href="#p662-C++ (BFS)">                        C++ (BFS)                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p662-C++ (DFS)" class="tab-content "><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, fa;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G(n+<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; fa &gt;&gt; d[i];</span><br><span class="line">        G[fa].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>)&gt; dfs=[&amp;](<span class="keyword">int</span> u) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">            d[v] += d[u];</span><br><span class="line">            dfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *max_element(d.begin(), d.end()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p662-C++ (BFS)" class="tab-content is-hidden"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, fa;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G(n+<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; fa &gt;&gt; d[i];</span><br><span class="line">        G[fa].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    Q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">            d[v] += d[u];</span><br><span class="line">            Q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *max_element(d.begin(), d.end()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>                  </div><h2 id="乒乓球">乒乓球<a class="header-anchor" href="#乒乓球">#</a></h2><h3 id="乒乓球-2"><a href="https://scut.online/p/663">乒乓球</a><a class="header-anchor" href="#乒乓球-2">#</a></h3><article class="message message-immersive is-warning"><div class="message-body">此题未加入比赛，<a href="https://scut.online/p/683">乒乓球2</a>为本题的简化版本。</div></article><p>题意：求<span role="math">$\prod\frac{p_i}{100} \mod 1000000007$</span>。</p><p>在模意义下求值，利用<a href="https://oi-wiki.org/math/fermat/#_1">费马小定理</a>与<a href="https://oi-wiki.org/math/quick-pow/">快速幂算法</a>计算。</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p663-C++">                        C++                    </a>                   </li><li class="tab ">                    <a href="#p663-Python">                        Python                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p663-C++" class="tab-content "><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * x % M;</span><br><span class="line">        x = x * x % M;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ll x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        ans = ans * x % M;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans*qpow(100, n*(M-2))%M &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p663-Python" class="tab-content is-hidden"><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">n, m = <span class="built_in">int</span>(<span class="built_in">input</span>()), <span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)))</span><br><span class="line">x = reduce((<span class="keyword">lambda</span> x,y:x*y%m), a)</span><br><span class="line">print(x*<span class="built_in">pow</span>(<span class="number">100</span>,n*(m-<span class="number">2</span>),m)%m)</span><br></pre></td></tr></table></figure><p>python自带的pow（注意不是math.pow）第三个参数可以传mod，复杂度为快速幂复杂度。</p></div>                  </div><h3 id="乒乓球2"><a href="https://scut.online/p/683">乒乓球2</a><a class="header-anchor" href="#乒乓球2">#</a></h3><p>题意就是输出一列数的最小值和最大值。</p><p>这应该是整场比赛中最简单的题目了，只要能熟练掌握一种编程语言（C/C++/Java/Python）都应该能写出这题。</p><p>具体实现细节可以参考代码。</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p683-C++">                        C++                    </a>                   </li><li class="tab ">                    <a href="#p683-Python">                        Python                    </a>                   </li><li class="tab ">                    <a href="#p683-Java">                        Java                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p683-C++" class="tab-content "><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, Min = <span class="number">100001</span>, Max = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; Max) Max = x;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; Min) Min = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Min &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; Max &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p683-Python" class="tab-content is-hidden"><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>()</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">print(<span class="built_in">min</span>(a), <span class="built_in">max</span>(a))</span><br></pre></td></tr></table></figure></div><div id="p683-Java" class="tab-content is-hidden"><p>注：在算法竞赛中Java通常要使用优化的读入方法，但为了简单起见，这里直接用Scanner类读入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt(), min = <span class="number">100001</span>, max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (x &gt; max) max = x;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; min) min = x;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d %d\n&quot;</span>, min, max);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>                  </div><p>从比赛中提交的代码来看，没有通过此题大多数情况是由于<strong>没有初始化变量</strong>。</p><h2 id="学园都市的神秘代码"><a href="https://scut.online/p/675">学园都市的神秘代码</a><a class="header-anchor" href="#学园都市的神秘代码">#</a></h2><p>题意：简化下面的代码。</p><figure class="highlight cpp"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> j = <span class="number">1</span>; j &lt;= n / i; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> k = <span class="number">1</span>; k &lt;= j; ++k) &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> temp = k;</span><br><span class="line">                <span class="keyword">while</span> (!(j % temp == <span class="number">0</span> &amp;&amp; k % temp == <span class="number">0</span>)) &#123;</span><br><span class="line">                    temp--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (temp == <span class="number">1</span>) &#123;</span><br><span class="line">                    ans = (ans + <span class="number">1</span>) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做出这题不难，只需要把题目中的代码输入到电脑中，运行<strong>找找规律</strong>就能发现答案是n×(n+1)/2。</p><p>小技巧：在模意义下除2不用求逆元，可以转换成<span role="math">$(mod+1)/2$</span>。</p><p>常见出错原因：<code>n%mod*(n+1)%mod</code>导致溢出！</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p675-C++">                        C++                    </a>                   </li><li class="tab ">                    <a href="#p675-Python">                        Python                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p675-C++" class="tab-content "><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        ll n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        n %= mod;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n*(n+<span class="number">1</span>)%mod*((mod+<span class="number">1</span>)/<span class="number">2</span>)%mod &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p675-Python" class="tab-content is-hidden"><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">input</span>())):</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    print(n*(n+<span class="number">1</span>)//<span class="number">2</span>%<span class="number">998244353</span>)</span><br></pre></td></tr></table></figure></div>                  </div><h2 id="一个小游戏"><a href="https://scut.online/p/661">一个小游戏</a><a class="header-anchor" href="#一个小游戏">#</a></h2><p>题意：一个n×m的01矩阵，每次可以选择以（1，1）为左上角，（x，y）为右下角的矩形翻转，（x，y）必须为1。L先手M后手，无法翻转的人输。</p><p>可以发现，每一步无论如何选择，（1，1）是必定要被翻转的。最终局面全0为必败态，反推可知（1，1）处为1是必胜态，为0是必败态。</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p661-C++">                        C++                    </a>                   </li><li class="tab ">                    <a href="#p661-Python">                        Python                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p661-C++" class="tab-content "><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; x &gt;&gt; x;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (x ? <span class="string">&quot;Laurent&quot;</span> : <span class="string">&quot;Makoto&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p661-Python" class="tab-content is-hidden"><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>()</span><br><span class="line">print(<span class="string">&#x27;Laurent&#x27;</span> <span class="keyword">if</span> <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;Makoto&#x27;</span>)</span><br></pre></td></tr></table></figure></div>                  </div><h2 id="垃圾邮件"><a href="https://scut.online/p/658">垃圾邮件</a><a class="header-anchor" href="#垃圾邮件">#</a></h2><p>题意：给一个长度为n的字符串s，有q次询问。每次临时将下标p的字符改为c，比较区间<span role="math">$[L_1, R_1]$</span>和<span role="math">$[L_2, R_2]$</span>的子串是否相同。</p><article class="message message-immersive is-warning"><div class="message-body">此题数据较弱，导致有一些假做法。</div></article><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p658-C++（字符串哈希）">                        C++（字符串哈希）                    </a>                   </li><li class="tab ">                    <a href="#p658-C++（string）">                        C++（string）                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p658-C++（字符串哈希）" class="tab-content "><p>期望的做法是使用<a href="https://oi-wiki.org/string/hash/">字符串哈希</a>，每次询问可以做到<code>O(1)</code>。</p><p><span role="math">$hs[n]$</span>表示字符串<span role="math">$s[1…n]$</span>的哈希值，<span role="math">$bn[n]$</span>表示<span role="math">$base^n$</span>，均采用<code>unsigned long long</code>自然溢出。</p><p>子串<span role="math">$s[l…r]$</span>的哈希值为<span role="math">$hs[r]-hs[l-1]\times bn[r-l+1]$</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> base = <span class="number">131</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="function">ull <span class="title">tr</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123; <span class="keyword">return</span> c-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n, q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    vector&lt;ull&gt; hs(n+1), bn(n+1);</span><br><span class="line">    bn[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        bn[i] = bn[i<span class="number">-1</span>]*base;</span><br><span class="line">        hs[i] = hs[i<span class="number">-1</span>]*base+tr(s[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l1, r1, l2, r2, p;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2 &gt;&gt; p &gt;&gt; c;</span><br><span class="line">        ull h1 = hs[r1]-hs[l1<span class="number">-1</span>]*bn[r1-l1+<span class="number">1</span>];</span><br><span class="line">        ull h2 = hs[r2]-hs[l2<span class="number">-1</span>]*bn[r2-l2+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (l1 &lt;= p &amp;&amp; p &lt;= r1) h1 += (tr(c)-tr(s[p<span class="number">-1</span>])) * bn[r1-p];</span><br><span class="line">        <span class="keyword">if</span> (l2 &lt;= p &amp;&amp; p &lt;= r2) h2 += (tr(c)-tr(s[p<span class="number">-1</span>])) * bn[r2-p];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (h1 == h2 ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p658-C++（string）" class="tab-content is-hidden"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n, q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l1, r1, l2, r2, p;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2 &gt;&gt; p &gt;&gt; c;</span><br><span class="line">        swap(c, s[p<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (s.substr(l1<span class="number">-1</span>, r1-l1+<span class="number">1</span>)==s.substr(l2<span class="number">-1</span>, r2-l2+<span class="number">1</span>)) </span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;yes\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no\n&quot;</span>;</span><br><span class="line">        swap(c, s[p<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>                  </div><h2 id="超人高中生的基建计划"><a href="https://scut.online/p/664">超人高中生的基建计划</a><a class="header-anchor" href="#超人高中生的基建计划">#</a></h2><p>题意：n个点，i、j边权为i|j(i位或j），求最小生成树。<br>分析：显然边权不可能小于本身点的编号。对于奇数点，与1连最划算，边权为本身。剩下的点中除了<span role="math">$(10000)_2$</span>这种的，都可以做到边权为本身。用log2统计这类点的数量。</p><p>答案就是<span role="math">$\frac{n\times (n+1)}{2}-1+\lfloor\log_2n\rfloor$</span></p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p664-C++">                        C++                    </a>                   </li><li class="tab ">                    <a href="#p664-Python">                        Python                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p664-C++" class="tab-content "><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n*(n+<span class="number">1</span>)/<span class="number">2</span><span class="number">-1</span>+(<span class="keyword">int</span>)log2(n) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p664-Python" class="tab-content is-hidden"><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log2</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">print(n*(n+<span class="number">1</span>)//<span class="number">2</span>-<span class="number">1</span>+<span class="built_in">int</span>(log2(n)))</span><br></pre></td></tr></table></figure></div>                  </div><h2 id="灰之魔女的旅行"><a href="https://scut.online/p/665">灰之魔女的旅行</a><a class="header-anchor" href="#灰之魔女的旅行">#</a></h2><p>题意：一颗以1为根的树，每次可以选则一个未访问的点，访问该点及其子节点。先选择1节点，问最多能选择几次。</p><article class="message message-immersive is-warning"><div class="message-body">本题输入数据量较大，可以使用<code>ios::sync_with_stdio(false), cin.tie(0);</code>关闭流同步以加速cin输入。或者使用scanf/getchar/fread等方法。</div></article><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p665-树形DP">                        树形DP                    </a>                   </li><li class="tab ">                    <a href="#p665-自底向上贪心">                        自底向上贪心                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p665-树形DP" class="tab-content "><p>树形DP入门题，类似题目：<a href="https://www.luogu.com.cn/problem/P1352">P1352 没有上司的舞会</a>。</p><p>设<span role="math">$f[i][0]$</span>表示不选择节点<span role="math">$i$</span>的最大答案，<span role="math">$f[i][1]$</span>表示选择节点<span role="math">$i$</span>的最大答案。<br>转移：<span role="math">$f[i][0]=\sum max(f[i.son][1], f[i.son][0])$</span><br><span role="math">$f[i][1]=\sum f[i.son][0]$</span></p><p>初始值<span role="math">$f[i][1]=1$</span>，答案为<span role="math">$f[1][1]$</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v; <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        G[u].push_back(v), G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">array</span>&lt;<span class="keyword">int</span>, 2&gt;&gt; f(n+<span class="number">1</span>);</span><br><span class="line">    function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs=[&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> p) &#123;</span><br><span class="line">        f[u][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v == p) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(v, u);</span><br><span class="line">            f[u][<span class="number">0</span>] += max(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>]);</span><br><span class="line">            f[u][<span class="number">1</span>] += f[v][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p665-自底向上贪心" class="tab-content is-hidden"><p>由于输入保证为一棵树，即有子节点数目大于等于父节点数目，因此从叶子节点往上贪心选择可以保证最优。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">vis</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[<span class="number">1</span>]) vis[v] = <span class="literal">true</span>;</span><br><span class="line">    function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs=[&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) <span class="keyword">if</span> (v != fa) dfs(v, u);</span><br><span class="line">        <span class="keyword">if</span> (!vis[u]) vis[u] = vis[fa] = <span class="literal">true</span>, ans++;</span><br><span class="line">    &#125;;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>                  </div><h2 id="merge-stone"><a href="https://scut.online/p/674">merge stone</a><a class="header-anchor" href="#merge-stone">#</a></h2><p>分析：【多叉哈夫曼树】【贪心】</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt; //pb_ds库</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    LL w,h;</span><br><span class="line">    node(LL W, LL H)&#123;</span><br><span class="line">        w=W,h=H;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node a, node b)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.w!=b.w) <span class="keyword">return</span> a.w&gt;b.w; </span><br><span class="line">    <span class="keyword">return</span> a.h&gt;b.h;  <span class="comment">//如果长度相等，高度小的优先</span></span><br><span class="line">&#125; <span class="comment">//构造小根堆的操作。</span></span><br><span class="line">__gnu_pbds::<span class="built_in">priority_queue</span> &lt;node, <span class="built_in">std</span>::less&lt;node&gt;, __gnu_pbds::pairing_heap_tag&gt; q; <span class="comment">//优先队列</span></span><br><span class="line"><span class="keyword">int</span> n,k,cnt;</span><br><span class="line">LL temp,maxh,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    k = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;temp);</span><br><span class="line">        q.push(node(temp,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n<span class="number">-1</span>)%(k<span class="number">-1</span>) != <span class="number">0</span>) cnt=k<span class="number">-1</span>-(n<span class="number">-1</span>)%(k<span class="number">-1</span>);  <span class="comment">//判断是否要补空节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++)</span><br><span class="line">        q.push(node(<span class="number">0</span>,<span class="number">1</span>)); <span class="comment">//补空节点</span></span><br><span class="line">    cnt+=n;     <span class="comment">//cnt为根节点个数(最初每个根节点都为其本身）</span></span><br><span class="line">    <span class="keyword">while</span>(cnt&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        temp=maxh=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; i++)&#123;</span><br><span class="line">            temp+=q.top().w;</span><br><span class="line">            maxh=max(maxh,q.top().h);</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=temp; <span class="comment">//维护带权路径长度之和</span></span><br><span class="line">        q.push(node(temp, maxh+<span class="number">1</span>)); <span class="comment">//合并，高度为最高子树高度+1</span></span><br><span class="line">        cnt-=k<span class="number">-1</span>; <span class="comment">//减少根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="心与心之间的距离，永不点亮的音乐会"><a href="https://scut.online/p/669">心与心之间的距离，永不点亮的音乐会</a><a class="header-anchor" href="#心与心之间的距离，永不点亮的音乐会">#</a></h2><article class="message message-immersive is-warning"><div class="message-body">此题因为数据原因未加入正赛，放在了热身赛。</div></article><p>题意：问两颗二叉搜索树上是否存在两个和为x的值。（分别位于两棵树上）</p><p>分析：【双指针】期望复杂度O(n)，然而用set就可以过。。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, “/STACK:1024000000,1024000000”)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S 100000</span></span><br><span class="line"><span class="keyword">char</span> bf[S], *p1 = bf, *p2 = bf;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> nc() (p1==p2&amp;&amp;(p2=(p1=bf)+fread(bf,1,S,stdin),p2==p1)?-1:*p1++)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = nc();</span><br><span class="line">    <span class="keyword">for</span> (; (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; (ch != <span class="string">&#x27;-&#x27;</span>); ch = nc());</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)ch = nc(), f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; ch &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; ch &gt;= <span class="string">&#x27;0&#x27;</span>; x = x * <span class="number">10</span> + ch - <span class="number">48</span>, ch = nc());</span><br><span class="line">    <span class="keyword">return</span> f * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500050</span></span><br><span class="line"><span class="keyword">int</span> t[N][<span class="number">2</span>], n, m, tot;</span><br><span class="line">ll val[N], a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[x][<span class="number">0</span>] &gt; <span class="number">0</span>)dfs(t[x][<span class="number">0</span>]);</span><br><span class="line">    a[++tot] = x;</span><br><span class="line">    <span class="keyword">if</span> (t[x][<span class="number">1</span>] &gt; <span class="number">0</span>)dfs(t[x][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[x][<span class="number">0</span>] &gt; <span class="number">0</span>)dfs2(t[x][<span class="number">0</span>]);</span><br><span class="line">    b[++tot] = x;</span><br><span class="line">    <span class="keyword">if</span> (t[x][<span class="number">1</span>] &gt; <span class="number">0</span>)dfs2(t[x][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    n = read(), m = read();</span><br><span class="line">    ll x = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        val[i] = read();</span><br><span class="line">        t[i][<span class="number">0</span>] = read(), t[i][<span class="number">1</span>] = read();</span><br><span class="line">    &#125;</span><br><span class="line">    tot = <span class="number">0</span>, dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)a[i] = val[a[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        val[i] = read();</span><br><span class="line">        t[i][<span class="number">0</span>] = read(), t[i][<span class="number">1</span>] = read();</span><br><span class="line">    &#125;</span><br><span class="line">    tot = <span class="number">0</span>, dfs2(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)b[i] = val[b[i]];</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = m;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= n &amp;&amp; r &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[l] + b[r] &gt; x &amp;&amp; r &gt;= <span class="number">1</span>)--r;</span><br><span class="line">        <span class="keyword">if</span> (a[l] + b[r] == x &amp;&amp; r &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(flag ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;./data/10.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)solve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="convolution"><a href="https://scut.online/p/668">convolution</a><a class="header-anchor" href="#convolution">#</a></h2><p>【Dirichlet卷积】</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * x % M;</span><br><span class="line">        x = x * x % M;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        ll ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            ll p, q;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; p &gt;&gt; q;</span><br><span class="line">            ans = ans * ((p + p * q % M - q + M) % M * qpow(p, q - <span class="number">1</span>) % M) % M;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小斯巴达们的历练"><a href="https://scut.online/p/679">小斯巴达们的历练</a><a class="header-anchor" href="#小斯巴达们的历练">#</a></h2><p>分析：<br>【最短路】【Dijkstra算法】</p><p>参考代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 201000 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;LL c;</span><br><span class="line">qnode(<span class="keyword">int</span> _x=<span class="number">0</span>,<span class="keyword">int</span> _c=<span class="number">0</span>):x(_x),c(_c)&#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> qnode &amp;y) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c&gt;y.c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;qnode&gt; q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> y,nt;LL c;</span><br><span class="line">&#125;a[maxn*<span class="number">2</span>];<span class="keyword">int</span> len,first[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,LL c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">len++;a[len].y=y;a[len].c=c;</span><br><span class="line">a[len].nt=first[x];first[x]=len;</span><br><span class="line">&#125;</span><br><span class="line">LL d[<span class="number">4</span>][maxn];<span class="keyword">int</span> c[maxn];<span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function">LL <span class="title">mymin</span><span class="params">(LL x,LL y)</span></span>&#123;<span class="keyword">return</span> (x&lt;y)?x:y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> S,<span class="keyword">int</span> tt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(d[tt],<span class="number">-1</span>,<span class="keyword">sizeof</span>(d[tt]));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis)); </span><br><span class="line">d[tt][S]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">q.push(qnode(S,<span class="number">0</span>));</span><br><span class="line">vis[S]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">qnode now = q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> x=now.x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=first[x];k!=<span class="number">-1</span>;k=a[k].nt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=a[k].y;</span><br><span class="line"><span class="keyword">if</span> (d[tt][y]==<span class="number">-1</span> || d[tt][y]&gt;=d[tt][x]+a[k].c)</span><br><span class="line">&#123;</span><br><span class="line">d[tt][y]=d[tt][x]+a[k].c;</span><br><span class="line"><span class="keyword">if</span> (tt&gt;<span class="number">0</span> &amp;&amp; c[y]&lt;<span class="number">3</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!vis[y])</span><br><span class="line">&#123;</span><br><span class="line">q.push(qnode(y,d[tt][y]));</span><br><span class="line">vis[y]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[x]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;01.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;01.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="keyword">int</span> n,m,i,t,x,y,s[<span class="number">4</span>];LL ans,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">t=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c[i]);</span><br><span class="line"><span class="keyword">if</span> (c[i]==<span class="number">1</span>) t=i;</span><br><span class="line">&#125;</span><br><span class="line">len=<span class="number">0</span>;<span class="built_in">memset</span>(first,<span class="number">-1</span>,<span class="keyword">sizeof</span>(first));</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">ins(x,y,z);ins(y,x,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) </span><br><span class="line">&#123;</span><br><span class="line">dfs(s[i],i);</span><br><span class="line"><span class="comment">/*for (int j=1;j&lt;=n;j++)</span></span><br><span class="line"><span class="comment"> printf(&quot;%d &quot;,d[i][j]);</span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);*/</span> </span><br><span class="line">&#125;</span><br><span class="line">dfs(t,<span class="number">0</span>);</span><br><span class="line"><span class="comment">/*for (int j=1;j&lt;=n;j++)</span></span><br><span class="line"><span class="comment">  printf(&quot;%d &quot;,d[0][j]);</span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);*/</span></span><br><span class="line">ans=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (!qans.empty()) qans.pop();</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (d[<span class="number">0</span>][i]==<span class="number">-1</span> || d[<span class="number">1</span>][i]==<span class="number">-1</span> || d[<span class="number">2</span>][i]==<span class="number">-1</span> || d[<span class="number">3</span>][i]==<span class="number">-1</span>) <span class="keyword">continue</span>; </span><br><span class="line"><span class="keyword">if</span> (ans==<span class="number">-1</span> || ans&gt;d[<span class="number">0</span>][i]+d[<span class="number">1</span>][i]+d[<span class="number">2</span>][i]+d[<span class="number">3</span>][i]) </span><br><span class="line">&#123;</span><br><span class="line">ans=d[<span class="number">0</span>][i]+d[<span class="number">1</span>][i]+d[<span class="number">2</span>][i]+d[<span class="number">3</span>][i];</span><br><span class="line"><span class="keyword">while</span> (!qans.empty()) qans.pop();</span><br><span class="line">qans.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ans==d[<span class="number">0</span>][i]+d[<span class="number">1</span>][i]+d[<span class="number">2</span>][i]+d[<span class="number">3</span>][i]) qans.push(i);</span><br><span class="line"><span class="comment">//printf(&quot;%d %d\n&quot;,i,ans); </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="comment">//while (!qans.empty()) &#123;printf(&quot;%d &quot;,qans.front());qans.pop();&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">3 3 3 3 1</span></span><br><span class="line"><span class="comment">1 4 2</span></span><br><span class="line"><span class="comment">1 5 1</span></span><br><span class="line"><span class="comment">2 4 4</span></span><br><span class="line"><span class="comment">2 5 3</span></span><br><span class="line"><span class="comment">3 4 1</span></span><br><span class="line"><span class="comment">4 5 2</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">3 3 3 2 1</span></span><br><span class="line"><span class="comment">1 5 1</span></span><br><span class="line"><span class="comment">2 4 4</span></span><br><span class="line"><span class="comment">2 5 3</span></span><br><span class="line"><span class="comment">3 4 1</span></span><br><span class="line"><span class="comment">4 5 2</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6 11</span></span><br><span class="line"><span class="comment">3 1 3 2 3 3</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment">1 4 2</span></span><br><span class="line"><span class="comment">1 5 4</span></span><br><span class="line"><span class="comment">2 3 4</span></span><br><span class="line"><span class="comment">2 4 1</span></span><br><span class="line"><span class="comment">2 6 4</span></span><br><span class="line"><span class="comment">3 4 2</span></span><br><span class="line"><span class="comment">4 5 3</span></span><br><span class="line"><span class="comment">4 6 3</span></span><br><span class="line"><span class="comment">5 6 1</span></span><br><span class="line"><span class="comment">3 5 6</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure><h2 id="序列构造"><a href="https://scut.online/p/670">序列构造</a><a class="header-anchor" href="#序列构造">#</a></h2><p>题意：构造一个长度为 n 的整数序列，使得该序列的和与积相等，且恰好等于 n。</p><h3 id="构造法">构造法<a class="header-anchor" href="#构造法">#</a></h3><p>参考证明：<a href="http://lanqi.org/everyday/25568/">每日一题【1050】和积相等</a></p><p><strong>情形一</strong>　 n=4k+1 时，可以分成 2k 个 −1，2k 个 1，1 个 4k+1．<br><strong>情形二</strong>　n=8k 时，可以分成 2k 个 −1，6k−2 个 1，1 个 2，1 个 4k．<br><strong>情形三</strong>　 n=8k+12 时，可以分成 2k+1 个 −1，6k+9 个 1，1 个 −2，1 个 4k+6．<br><strong>情形四</strong>　 n=4 时，|ai|∈{1,2,4}，其中 i=1,2,3,4，且只有可能取 1 个 4 或 2 个 2，容易验证都不可行．<br><strong>情形五</strong>　n=4k+2 时，由于a1⋅a2⋯an≡2(mod4),于是 a1,a2,⋯,an 为 1 个偶数和 4k+1 个奇数，它们的和为奇数，矛盾．<br><strong>情形六</strong>　 n=4k+3 时，a1,a2,⋯,an 为 4k+3 个奇数，设其中模 4 余 1 的有 m 个，模 4 余 3 的有 4k+3−m 个，因此a1+a2+⋯+an≡m−(4k+3−m)≡2m+1≡3(mod4),于是 m 为奇数，进而a1⋅a2⋯an≡<span role="math">$1^m⋅(−1)^{4k+3−m}$</span>≡1(mod4),矛盾．<br>综上所述，所有具有性质 Q 的正整数构成的集合为{x∣x≡0,1,4,5(mod8),x≠4,x∈N∗}.</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p670构造-C++">                        C++                    </a>                   </li><li class="tab ">                    <a href="#p670构造-Python">                        Python                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p670构造-C++" class="tab-content "><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (t--) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> nm = n % <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">4</span>||nm==<span class="number">2</span>||nm==<span class="number">3</span>||nm==<span class="number">6</span>||nm==<span class="number">7</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;yes\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = n / <span class="number">4</span>;</span><br><span class="line">        print(<span class="number">2</span>*k, <span class="number">-1</span>);</span><br><span class="line">        print(<span class="number">2</span>*k, <span class="number">1</span>);</span><br><span class="line">        print(<span class="number">1</span>, <span class="number">4</span>*k+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = n / <span class="number">8</span>;</span><br><span class="line">        print(<span class="number">2</span>*k, <span class="number">-1</span>);</span><br><span class="line">        print(<span class="number">6</span>*k<span class="number">-2</span>, <span class="number">1</span>);</span><br><span class="line">        print(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        print(<span class="number">1</span>, <span class="number">4</span>*k);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">8</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = (n<span class="number">-12</span>)/<span class="number">8</span>;</span><br><span class="line">        print(<span class="number">2</span>*k+<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        print(<span class="number">6</span>*k+<span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line">        print(<span class="number">1</span>, <span class="number">-2</span>);</span><br><span class="line">        print(<span class="number">1</span>, <span class="number">4</span>*k+<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p670构造-Python" class="tab-content is-hidden"><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">4</span> <span class="keyword">or</span> n%<span class="number">8</span> <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>]:</span><br><span class="line">    print(<span class="string">&#x27;no&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">4</span> == <span class="number">1</span>:</span><br><span class="line">        k = n // <span class="number">4</span></span><br><span class="line">        print(<span class="string">&#x27;1 -1 &#x27;</span>*(<span class="number">2</span>*k), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        print(<span class="number">4</span>*k+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> n % <span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">        k = n // <span class="number">8</span></span><br><span class="line">        print(<span class="string">&#x27;1 &#x27;</span>*(<span class="number">6</span>*k-<span class="number">2</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;-1 &#x27;</span>*(<span class="number">2</span>*k), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        print(<span class="number">2</span>, <span class="number">4</span>*k)</span><br><span class="line">    <span class="keyword">elif</span> n % <span class="number">8</span> == <span class="number">4</span>:</span><br><span class="line">        k = (n-<span class="number">12</span>)//<span class="number">8</span></span><br><span class="line">        print(<span class="string">&#x27;1 &#x27;</span>*(<span class="number">6</span>*k+<span class="number">9</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;-1 &#x27;</span>*(<span class="number">2</span>*k+<span class="number">1</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        print(-<span class="number">2</span>, <span class="number">4</span>*k+<span class="number">6</span>)</span><br></pre></td></tr></table></figure></div>                  </div><h3 id="搜索法">搜索法<a class="header-anchor" href="#搜索法">#</a></h3><p>由<span role="math">$\lfloor\log_210^5\rfloor=16$</span>可知，序列中最多有16个绝对值大于1的数，剩下的数用1或-1填充。</p><p>于是可以考虑搜索，<code>dfs(num, target)</code>尝试用target个大于1的数构造一个乘积为num的序列，满足乘积后<code>check</code>检查是否能通过填充1或-1来满足和也为n。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, cnt, yinshu[maxn];</span><br><span class="line"><span class="keyword">bool</span> found;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) sum += yinshu[i];</span><br><span class="line">    <span class="keyword">int</span> need = n - sum;</span><br><span class="line">    <span class="keyword">int</span> remain = n - cnt;</span><br><span class="line">    <span class="keyword">if</span> (remain &gt;= need &amp;&amp; ((remain - need) % <span class="number">4</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        found = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;yes\n&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> xx = (remain - need) / <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= xx; i++) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-1 -1 1 1 &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= need; i++) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1 &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; i++) <span class="built_in">cout</span> &lt;&lt; yinshu[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; yinshu[cnt] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (found) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (cnt == target - <span class="number">1</span>) &#123;</span><br><span class="line">        yinshu[++cnt] = num;</span><br><span class="line">        check();</span><br><span class="line">        <span class="keyword">if</span> (!found) cnt--;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">2</span>; x * x &lt;= num; x++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % x) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> y = num / x;</span><br><span class="line">        yinshu[++cnt] = x;</span><br><span class="line">        dfs(y, target);</span><br><span class="line">        <span class="keyword">if</span> (found) <span class="keyword">return</span>; <span class="keyword">else</span> cnt--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    found = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">16</span>; i++) &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        dfs(n, i);</span><br><span class="line">        <span class="keyword">if</span> (found) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (found == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="爆炸就是艺术">爆炸就是艺术<a class="header-anchor" href="#爆炸就是艺术">#</a></h2><h3 id="爆炸就是艺术2"><a href="https://scut.online/p/682">爆炸就是艺术2</a><a class="header-anchor" href="#爆炸就是艺术2">#</a></h3><p>题意：给n个TNT的坐标，一个TNT可以引爆上下左右<strong>以及本身位置</strong>的TNT。点燃代价为到原点距离，求最小代价。</p><p>判断点是否存在可以用map/set/hash，找连通块可以用bfs/dfs/dsu，做法非常多。注意实现细节，<strong>有重复的点</strong>。</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p682-map+dsu">                        map+dsu                    </a>                   </li><li class="tab ">                    <a href="#p682-数据生成器">                        数据生成器                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p682-map+dsu" class="tab-content "><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; p(n);</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; st;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">w</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i].first &gt;&gt; p[i].second;</span><br><span class="line">        st[p[i]] = i;</span><br><span class="line">        w[i] = <span class="number">1l</span>l*p[i].first*p[i].first+<span class="number">1l</span>l*p[i].second*p[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">f</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) f[i] = i;</span><br><span class="line">    function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; Find = [&amp;](<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> x == f[x] ? x : f[x] = Find(f[x]); &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> dx[]&#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, dy[]&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> pos = st.find(&#123;p[i].first+dx[j], p[i].second+dy[j]&#125;);</span><br><span class="line">            <span class="keyword">if</span> (pos == st.end()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> a = Find(pos-&gt;second), b = Find(i);</span><br><span class="line">            <span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">                f[a] = b;</span><br><span class="line">                w[b] = min(w[b], w[a]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (i == Find(i)) ans += (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">sqrt</span>(w[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p682-数据生成器" class="tab-content is-hidden"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;testlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> testIndex = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nextTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    testIndex++;</span><br><span class="line">    freopen((<span class="string">&quot;data/&quot;</span>+to_string(testIndex)+<span class="string">&quot;.in&quot;</span>).c_str(), <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">randTest</span><span class="params">(<span class="keyword">int</span> mint=<span class="number">1</span>, <span class="keyword">int</span> maxt=<span class="number">10</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">int</span> minn=<span class="number">1</span>, <span class="keyword">int</span> maxn=<span class="number">1e5</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">int</span> minx=<span class="number">-1e9</span>, <span class="keyword">int</span> maxx=<span class="number">1e9</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">int</span> miny=<span class="number">-1e9</span>, <span class="keyword">int</span> maxy=<span class="number">1e9</span>)</span> </span>&#123;</span><br><span class="line">    nextTest();</span><br><span class="line">    <span class="keyword">int</span> T = rnd.next(mint, maxt);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = rnd.next(minn, maxn);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; rnd.next(minx, maxx) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; rnd.next(miny, maxy) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    registerGen(argc, argv, <span class="number">1</span>);</span><br><span class="line">    nextTest();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">8</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    nextTest();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">0</span> &lt;&lt;  <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)<span class="number">1e9</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; (<span class="keyword">int</span>)<span class="number">1e9</span> &lt;&lt;  <span class="built_in">endl</span>;</span><br><span class="line">    randTest(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1e2</span>, <span class="number">1</span>, <span class="number">1e4</span>, <span class="number">1</span>, <span class="number">1e4</span>);</span><br><span class="line">    randTest(<span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">1e4</span>, <span class="number">-1e5</span>, <span class="number">1e5</span>, <span class="number">-1e5</span>, <span class="number">1e5</span>);</span><br><span class="line">    randTest(<span class="number">10</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">1e4</span>, <span class="number">-1e5</span>, <span class="number">1e5</span>, <span class="number">-1e5</span>, <span class="number">1e5</span>);</span><br><span class="line">    randTest();</span><br><span class="line">    randTest();</span><br><span class="line">    randTest(<span class="number">10</span>, <span class="number">10</span>, <span class="number">1e5</span>, <span class="number">1e5</span>, <span class="number">-10</span>, <span class="number">10</span>, <span class="number">-1e9</span>, <span class="number">1e9</span>);</span><br><span class="line">    randTest(<span class="number">10</span>, <span class="number">10</span>, <span class="number">1e5</span>, <span class="number">1e5</span>, <span class="number">-1e9</span>, <span class="number">1e9</span>, <span class="number">-10</span>, <span class="number">10</span>);</span><br><span class="line">    randTest(<span class="number">10</span>, <span class="number">10</span>, <span class="number">1e5</span>, <span class="number">1e5</span>, <span class="number">-10</span>, <span class="number">10</span>, <span class="number">-10</span>, <span class="number">10</span>);</span><br><span class="line">    randTest(<span class="number">10</span>, <span class="number">10</span>, <span class="number">1e5</span>, <span class="number">1e5</span>, <span class="number">1e9</span>, <span class="number">1e9</span>, <span class="number">-1e9</span>, <span class="number">-1e9</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>                  </div><h3 id="爆炸就是艺术-2"><a href="https://scut.online/p/671">爆炸就是艺术</a><a class="header-anchor" href="#爆炸就是艺术-2">#</a></h3><article class="message message-immersive is-warning"><div class="message-body">此题未加入比赛，<a href="https://scut.online/p/682">爆炸就是艺术2</a>为本题的简化版本。</div></article><p>题意：给出平面上n个点的坐标，点i爆炸的代价为i到原点的距离（向下取整），点i爆炸会同时让与点i距离小于等于7的点爆炸。问爆炸所有点的最小代价。<br>分析：类似平面最近点对的方法建图。然后用并查集缩点。</p><p>对每个点扫描半径7以内的其他点的做法容易被卡。（虽然已经开到3s了）<br>建图具体做法参考：<a href="https://oi-wiki.org/geometry/nearest-points/#_6">平面最近点对——非分治算法</a></p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p671-最近点对建图+dsu">                        最近点对建图+dsu                    </a>                   </li><li class="tab ">                    <a href="#p671-fread+hash+dsu">                        fread+hash+dsu                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p671-最近点对建图+dsu" class="tab-content "><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, i;</span><br><span class="line">    Point(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>, <span class="keyword">int</span> i = <span class="number">0</span>) : x(x), y(y), i(i) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point &amp;o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; o.x || (x == o.x &amp;&amp; y &lt; o.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Point &amp;o) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == o.x &amp;&amp; y == o.y &amp;&amp; i == o.i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmpy</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Point &amp;a, <span class="keyword">const</span> Point &amp;b)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> a.y &lt; b.y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">ll <span class="title">dis2</span><span class="params">(<span class="keyword">const</span> Point &amp;a, <span class="keyword">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ll)(a.x - b.x) * (a.x - b.x) + (ll)(a.y - b.y) * (a.y - b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;Point&gt; <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i].x &gt;&gt; p[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p.begin(), p.end());</span><br><span class="line">    p.erase(unique(p.begin(), p.end()), p.end());</span><br><span class="line">    n = (<span class="keyword">int</span>)p.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) p[i].i = i;</span><br><span class="line">    <span class="built_in">multiset</span>&lt;Point, cmpy&gt; s;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">par</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;ll&gt; <span class="title">w</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        w[i] = (ll)p[i].x * p[i].x + (ll)p[i].y * p[i].y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) par[i] = i;</span><br><span class="line">    function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; Find = [&amp;](<span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">return</span> x == par[x] ? x : par[x] = Find(par[x]);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, l = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; i &amp;&amp; p[i].x - p[l].x &gt; K) s.erase(s.find(p[l++]));</span><br><span class="line">        <span class="keyword">auto</span> lowy = s.lower_bound(Point(p[i].x, p[i].y - K));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = lowy; it != s.end() &amp;&amp; it-&gt;y - p[i].y &lt;= K; it++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis2(*it, p[i]) &lt;= K * K) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = p[i].i, v = it-&gt;i;</span><br><span class="line">                <span class="keyword">int</span> fu = Find(u), fv = Find(v);</span><br><span class="line">                <span class="keyword">if</span> (fu != fv) &#123;</span><br><span class="line">                    w[fv] = min(w[fv], w[fu]);</span><br><span class="line">                    par[fu] = fv;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.insert(p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (Find(i) == i) ans += (ll)<span class="built_in">sqrt</span>(w[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p671-fread+hash+dsu" class="tab-content is-hidden"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">In</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e7</span>;</span><br><span class="line">    <span class="keyword">char</span> s[N], *p;</span><br><span class="line">    <span class="keyword">size_t</span> c;</span><br><span class="line">    In() &#123; c = fread(s, <span class="number">1</span>, N, <span class="built_in">stdin</span>), p = s; &#125;</span><br><span class="line">&#125; in;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">In&amp; <span class="keyword">operator</span>&gt;&gt;(In &amp;i, T &amp;x) &#123;</span><br><span class="line">    <span class="keyword">char</span> *&amp;p = i.p;</span><br><span class="line">    <span class="keyword">while</span> (*p != <span class="string">&#x27;-&#x27;</span> &amp;&amp; (*p &lt; <span class="string">&#x27;0&#x27;</span> || *p &gt; <span class="string">&#x27;9&#x27;</span>)) p++;</span><br><span class="line">    <span class="keyword">if</span> (p == i.s + i.c) <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">bool</span> sgn = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (*p == <span class="string">&#x27;-&#x27;</span>) sgn = <span class="literal">true</span>, p++;</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; *p &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *p &lt;= <span class="string">&#x27;9&#x27;</span>; p++) x = x * <span class="number">10</span> + *p - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (sgn) x = -x;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hash_tables</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> sz = <span class="number">1000037</span>;</span><br><span class="line">    <span class="keyword">int</span> head[sz], nxt[sz], mark, tmmark[sz], key2[sz], len;</span><br><span class="line">    ll key[sz];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        mark++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll s, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = s % sz;</span><br><span class="line">        <span class="keyword">if</span> (val &lt; <span class="number">0</span>) val += sz;</span><br><span class="line">        <span class="keyword">if</span> (tmmark[val] != mark) tmmark[val] = mark, head[val] = <span class="number">-1</span>;</span><br><span class="line">        nxt[len] = head[val], head[val] = len, key[len] = s, key2[len] = v;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(ll s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = s % sz;</span><br><span class="line">        <span class="keyword">if</span>(val &lt; <span class="number">0</span>) val += sz;</span><br><span class="line">        <span class="keyword">if</span>(tmmark[val] != mark) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = head[val]; j != <span class="number">-1</span>; j = nxt[j]) <span class="keyword">if</span>(key[j] == s) <span class="keyword">return</span> key2[j];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;g;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> par[maxn], x[maxn], y[maxn]; ll w[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x==par[x]?x:par[x]=find(par[x]);&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    g.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> dx=<span class="number">-7</span>;dx&lt;=<span class="number">7</span>;++dx) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> dy=<span class="number">0</span>;dy&lt;=<span class="number">7</span>;++dy) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dx*dx+dy*dy&lt;=<span class="number">49</span>) v.push_back(&#123;dx,dy&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    in &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        in &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) par[i]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">            in &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">            g.add(y[i]^((ll)x[i]&lt;&lt;<span class="number">32</span>), i);</span><br><span class="line">            w[i]=<span class="number">1l</span>l*x[i]*x[i]+<span class="number">1l</span>l*y[i]*y[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;p:v) &#123;</span><br><span class="line">                <span class="keyword">int</span> xx=x[i]+p.first,yy=y[i]+p.second;</span><br><span class="line">                ull id = yy^((ll)xx&lt;&lt;<span class="number">32</span>);</span><br><span class="line">                <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>((tmp=g.count(id))) &#123;</span><br><span class="line">                    <span class="keyword">int</span> a=find(tmp),b=find(i);</span><br><span class="line">                    <span class="keyword">if</span>(a!=b) par[a]=b, w[b]=min(w[b],w[a]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(i==find(i)) ans+=(ll)<span class="built_in">sqrt</span>(w[i]);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        g.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>                  </div><h2 id="tree"><a href="https://scut.online/p/672">tree</a><a class="header-anchor" href="#tree">#</a></h2><p>【树形dp】</p><p>参考代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> ca[maxn], dis[<span class="number">2</span>][<span class="number">3</span>][maxn], son[<span class="number">2</span>][<span class="number">2</span>][maxn]; </span><br><span class="line"><span class="comment">// ca[i] = 0 代表i节点属于A类，ca[i] = 1代表i节点属于B类 </span></span><br><span class="line"><span class="comment">// dis[i][j][k] </span></span><br><span class="line"><span class="comment">// i: 0, 1 分别代表A和B </span></span><br><span class="line"><span class="comment">// j: 0, 1, 2 分别代表最远距离和次远距离，以及不经过以k为根节点的子树，但经过其父节点的最长路径</span></span><br><span class="line"><span class="comment">// k: 代表当前节点的编号</span></span><br><span class="line"><span class="comment">// dis[0][0][k] 代表节点k到其子树中最远的A类节点的距离</span></span><br><span class="line"><span class="comment">// dis[1][1][k] 代表节点k到其子树中次远的B类节点的距离</span></span><br><span class="line"><span class="comment">// son[1][0][k] 代表节点k到其子树中最远的B类节点的路上经过的儿子</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; e[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        ca[i] = <span class="number">0</span>;</span><br><span class="line">        e[i].clear();</span><br><span class="line">        dis[<span class="number">0</span>][<span class="number">0</span>][i] = dis[<span class="number">0</span>][<span class="number">1</span>][i] = dis[<span class="number">1</span>][<span class="number">0</span>][i] = dis[<span class="number">1</span>][<span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">        dis[<span class="number">0</span>][<span class="number">2</span>][i] = dis[<span class="number">1</span>][<span class="number">2</span>][i] = <span class="number">0</span>; </span><br><span class="line">        son[<span class="number">0</span>][<span class="number">0</span>][i] = son[<span class="number">0</span>][<span class="number">1</span>][i] = son[<span class="number">1</span>][<span class="number">0</span>][i] = son[<span class="number">1</span>][<span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ca</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> num)</span></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> index; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; index;</span><br><span class="line">        ca[index] = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    e[u].push_back(&#123;v, w&#125;);</span><br><span class="line">    e[v].push_back(&#123;u, w&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: e[u])&#123;</span><br><span class="line">        <span class="keyword">int</span> v = i.v, w = i.w, tmp_son, d;</span><br><span class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs1(v, u);</span><br><span class="line">        <span class="comment">//A类 </span></span><br><span class="line">        tmp_son = v;</span><br><span class="line">        <span class="keyword">if</span>(dis[<span class="number">0</span>][<span class="number">0</span>][v] == <span class="number">0</span>) </span><br><span class="line">            d = (ca[v] == <span class="number">0</span>) * w;</span><br><span class="line">        <span class="keyword">else</span> d = dis[<span class="number">0</span>][<span class="number">0</span>][v] + w;</span><br><span class="line">        <span class="keyword">if</span>(d &gt; dis[<span class="number">0</span>][<span class="number">0</span>][u])&#123;</span><br><span class="line">            swap(d, dis[<span class="number">0</span>][<span class="number">0</span>][u]);</span><br><span class="line">            swap(tmp_son, son[<span class="number">0</span>][<span class="number">0</span>][u]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(d &gt; dis[<span class="number">0</span>][<span class="number">1</span>][u])&#123;</span><br><span class="line">            swap(d, dis[<span class="number">0</span>][<span class="number">1</span>][u]);</span><br><span class="line">            swap(tmp_son, son[<span class="number">0</span>][<span class="number">1</span>][u]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//B类</span></span><br><span class="line">       tmp_son = v;</span><br><span class="line">        <span class="keyword">if</span>(dis[<span class="number">1</span>][<span class="number">0</span>][v] == <span class="number">0</span>) </span><br><span class="line">            d = (ca[v] == <span class="number">1</span>) * w;</span><br><span class="line">        <span class="keyword">else</span> d = dis[<span class="number">1</span>][<span class="number">0</span>][v] + w;</span><br><span class="line">        <span class="keyword">if</span>(d &gt; dis[<span class="number">1</span>][<span class="number">0</span>][u])&#123;</span><br><span class="line">            swap(d, dis[<span class="number">1</span>][<span class="number">0</span>][u]);</span><br><span class="line">            swap(tmp_son, son[<span class="number">1</span>][<span class="number">0</span>][u]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(d &gt; dis[<span class="number">1</span>][<span class="number">1</span>][u])&#123;</span><br><span class="line">            swap(d, dis[<span class="number">1</span>][<span class="number">1</span>][u]);</span><br><span class="line">            swap(tmp_son, son[<span class="number">1</span>][<span class="number">1</span>][u]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: e[u])&#123;</span><br><span class="line">        <span class="keyword">int</span> v = i.v, w = i.w;</span><br><span class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">//A类</span></span><br><span class="line">        <span class="keyword">if</span>(v == son[<span class="number">0</span>][<span class="number">0</span>][u])</span><br><span class="line">            dis[<span class="number">0</span>][<span class="number">2</span>][v] = max(dis[<span class="number">0</span>][<span class="number">1</span>][u], dis[<span class="number">0</span>][<span class="number">2</span>][u]) + w;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            dis[<span class="number">0</span>][<span class="number">2</span>][v] = max(dis[<span class="number">0</span>][<span class="number">0</span>][u], dis[<span class="number">0</span>][<span class="number">2</span>][u]) + w;</span><br><span class="line">        <span class="comment">//B类</span></span><br><span class="line">         <span class="keyword">if</span>(v == son[<span class="number">1</span>][<span class="number">0</span>][u])</span><br><span class="line">            dis[<span class="number">1</span>][<span class="number">2</span>][v] = max(dis[<span class="number">1</span>][<span class="number">1</span>][u], dis[<span class="number">1</span>][<span class="number">2</span>][u]) + w;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            dis[<span class="number">1</span>][<span class="number">2</span>][v] = max(dis[<span class="number">1</span>][<span class="number">0</span>][u], dis[<span class="number">1</span>][<span class="number">2</span>][u]) + w;</span><br><span class="line">        dfs2(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> in;<span class="keyword">bool</span> IsN=<span class="literal">false</span>;</span><br><span class="line">    in=getchar();</span><br><span class="line">    <span class="keyword">if</span>(in==EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(in!=<span class="string">&#x27;-&#x27;</span>&amp;&amp;(in&lt;<span class="string">&#x27;0&#x27;</span>||in&gt;<span class="string">&#x27;9&#x27;</span>)) in=getchar();</span><br><span class="line">    <span class="keyword">if</span>(in==<span class="string">&#x27;-&#x27;</span>)&#123; IsN=<span class="literal">true</span>;num=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> num=in-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span>(in=getchar(),in&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;in&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        num*=<span class="number">10</span>,num+=in-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(IsN) num=-num;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;game.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;game.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    read(t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m, u, v, w;</span><br><span class="line">        read(n), read(m);</span><br><span class="line">        init(n + m);</span><br><span class="line">        get_ca(<span class="number">0</span>, n);</span><br><span class="line">        get_ca(<span class="number">1</span>, m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + m - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            read(u), read(v), read(w);</span><br><span class="line">            add_edge(u, v, w);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        dfs2(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        ll da = <span class="number">0</span>, db = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + m; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ca[i] == <span class="number">0</span>) </span><br><span class="line">                da += max(dis[<span class="number">0</span>][<span class="number">0</span>][i], dis[<span class="number">0</span>][<span class="number">2</span>][i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                db += max(dis[<span class="number">1</span>][<span class="number">0</span>][i], dis[<span class="number">1</span>][<span class="number">2</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(da &gt; db) <span class="built_in">printf</span>(<span class="string">&quot;A\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (da == db) <span class="built_in">printf</span>(<span class="string">&quot;T\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;B\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20200</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SS 100000</span></span><br><span class="line"><span class="keyword">char</span> bf[SS], *p1 = bf, *p2 = bf;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> nc() (p1==p2&amp;&amp;(p2=(p1=bf)+fread(bf,1,SS,stdin),p2==p1)?-1:*p1++)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = nc();</span><br><span class="line">    <span class="keyword">for</span> (; (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; (ch != <span class="string">&#x27;-&#x27;</span>); ch = nc());</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)ch = nc(), f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; ch &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; ch &gt;= <span class="string">&#x27;0&#x27;</span>; x = x * <span class="number">10</span> + ch - <span class="number">48</span>, ch = nc());</span><br><span class="line">    <span class="keyword">return</span> f * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cnt, last[N], sz[N], fa[N], son[N], top[N], dep[N], Dep, who, x[N], y[N], id[N], a1, b1, a2, b2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, w;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[++cnt] = &#123;v, last[u], w&#125;, last[u] = cnt;</span><br><span class="line">    e[++cnt] = &#123;u, last[v], w&#125;, last[v] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> d, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    dep[x] = d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = last[x], y; i; i = e[i].next)</span><br><span class="line">        <span class="keyword">if</span> ((y = e[i].to) != fa)dfs(y, x, d + e[i].w, f);</span><br><span class="line">    <span class="keyword">if</span> (id[x] == f)<span class="keyword">if</span> (Dep &lt; dep[x])Dep = dep[x], who = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    sz[x] = <span class="number">1</span>, dep[x] = d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = last[x], y; i; i = e[i].next)</span><br><span class="line">        <span class="keyword">if</span> ((y = e[i].to) != fa[x]) &#123;</span><br><span class="line">            fa[y] = x, dfs1(y, d + e[i].w), sz[x] += sz[y];</span><br><span class="line">            <span class="keyword">if</span> (sz[son[x]] &lt; sz[y])son[x] = y;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    top[x] = d;</span><br><span class="line">    <span class="keyword">if</span> (son[x])dfs2(son[x], d);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = last[x], y; i; i = e[i].next)<span class="keyword">if</span> ((y = e[i].to) != fa[x] &amp;&amp; y != son[x])dfs2(y, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)<span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">for</span> (; top[l] != top[r]; dep[top[l]] &lt; dep[top[r]] ? r = fa[top[r]] : l = fa[top[l]]);</span><br><span class="line">    <span class="keyword">return</span> dep[l] &lt; dep[r] ? l : r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="keyword">return</span> dep[l] + dep[r] - (dep[lca(l, r)] &lt;&lt; <span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = read(), m = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + m; ++i)last[i] = sz[i] = fa[i] = son[i] = top[i] = dep[i] = cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)x[i] = read(), id[x[i]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)y[i] = read(), id[y[i]] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = read(), v = read(), w = read();</span><br><span class="line">        add(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    Dep = <span class="number">0</span>, dep[<span class="number">0</span>] = <span class="number">0</span>, dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), b1 = who;</span><br><span class="line">    Dep = <span class="number">0</span>, dep[<span class="number">0</span>] = <span class="number">0</span>, dfs(b1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), a1 = who;</span><br><span class="line">    Dep = <span class="number">0</span>, dep[<span class="number">0</span>] = <span class="number">0</span>, dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>), b2 = who;</span><br><span class="line">    Dep = <span class="number">0</span>, dep[<span class="number">0</span>] = <span class="number">0</span>, dfs(b2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>), a2 = who;</span><br><span class="line">    dep[<span class="number">0</span>] = <span class="number">0</span>, dfs1(<span class="number">1</span>, <span class="number">0</span>), dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    ll da = <span class="number">0</span>, db = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) da += max(dis(a1, x[i]), dis(b1, x[i]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) db += max(dis(a2, y[i]), dis(b2, y[i]));</span><br><span class="line">    <span class="keyword">if</span> (da &gt; db) <span class="built_in">puts</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (da &lt; db) <span class="built_in">puts</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="猪灵的胜利之舞"><a href="https://scut.online/p/673">猪灵的胜利之舞</a><a class="header-anchor" href="#猪灵的胜利之舞">#</a></h2><p>题意：<span role="math">$f[3]=4, f[4]=7, f[n]=f[n-1]+f[n-2]$</span>，求<span role="math">$\frac{f[n]}{2^n}$</span></p><h3 id="十进制快速幂">十进制快速幂<a class="header-anchor" href="#十进制快速幂">#</a></h3><p>二进制快速幂与十进制快速幂的对比（伪代码）</p><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#fpow-cmp-十进制">                        十进制                    </a>                   </li><li class="tab ">                    <a href="#fpow-cmp-二进制">                        二进制                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="fpow-cmp-十进制" class="tab-content "><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (y != <span class="number">0</span>) &#123;</span><br><span class="line">    ans = ans * <span class="built_in">pow</span>(x, y%<span class="number">10</span>);</span><br><span class="line">    x = <span class="built_in">pow</span>(x, <span class="number">10</span>);</span><br><span class="line">    y = y / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="fpow-cmp-二进制" class="tab-content is-hidden"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (y != <span class="number">0</span>) &#123;</span><br><span class="line">    ans = ans * <span class="built_in">pow</span>(x, y%<span class="number">2</span>);</span><br><span class="line">    x = <span class="built_in">pow</span>(x, <span class="number">2</span>);</span><br><span class="line">    y = y / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>                  </div><p>十进制快速幂和二进制快速幂在原理上是一样的，不过二进制快速幂通常实现为位运算，而十进制则用字符串来处理。</p><h3 id="循环节">循环节<a class="header-anchor" href="#循环节">#</a></h3><blockquote><p>斐波那契数列在1e9+7下循环节为2e9+16，这题答案就是斐波那契数列的第n项加上n-2项。</p></blockquote><p>循环节可以通过如下程序暴力找出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">1</span>, m = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        a = (a + b) % m;</span><br><span class="line">        swap(a, b);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; b== <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Time: &quot;</span> &lt;&lt; (<span class="keyword">double</span>)clock()/CLOCKS_PER_SEC &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2000000016</span><br><span class="line">Time: 6.851</span><br></pre></td></tr></table></figure><h3 id="参考代码">参考代码<a class="header-anchor" href="#参考代码">#</a></h3><div class="tabs is-boxed my-3">                <ul class="nav-tabs mx-0 my-0"><li class="tab is-active">                    <a href="#p673-十进制快速幂">                        十进制快速幂                    </a>                   </li><li class="tab ">                    <a href="#p673-循环节">                        循环节                    </a>                   </li><li class="tab ">                    <a href="#p673-数据生成器">                        数据生成器                    </a>                   </li></ul>              </div><div class="tabs-content">                    <div id="p673-十进制快速幂" class="tab-content "><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> Mat = <span class="built_in">array</span>&lt;<span class="built_in">array</span>&lt;ll, <span class="number">2</span>&gt;, <span class="number">2</span>&gt;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, n) for(int i = 0; i &lt; n; i++)</span></span><br><span class="line"><span class="built_in">string</span> n;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">Mat <span class="keyword">operator</span>*(<span class="keyword">const</span> Mat &amp;a, <span class="keyword">const</span> Mat &amp;b) &#123;</span><br><span class="line">    Mat c&#123;&#125;;</span><br><span class="line">    FOR(i, <span class="number">2</span>) FOR(j, <span class="number">2</span>) FOR(k, <span class="number">2</span>)</span><br><span class="line">        c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % M;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mat <span class="title">Pow</span><span class="params">(Mat x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    Mat ans&#123;&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;&#125;;</span><br><span class="line">    FOR(t, y) ans = ans * x;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Pow</span><span class="params">(ll x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    FOR(t, y) ans = ans * x % M;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Pow</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * x % M;</span><br><span class="line">        x = x * x % M;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mat <span class="title">Pow</span><span class="params">(Mat x)</span> </span>&#123;</span><br><span class="line">    Mat ans&#123;&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;&#125;;</span><br><span class="line">    FOR(i, len) &#123;</span><br><span class="line">        ans = ans*Pow(x, n[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        x = Pow(x, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Pow</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    FOR(i, len) &#123;</span><br><span class="line">        ans = ans*Pow(x, n[i]-<span class="string">&#x27;0&#x27;</span>)%M;</span><br><span class="line">        x = Pow(x, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    len = (<span class="keyword">int</span>)n.length();</span><br><span class="line">    reverse(n.begin(), n.end());</span><br><span class="line">    Mat A = Pow(Mat&#123;&#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;&#125;);</span><br><span class="line">    A = A * Mat&#123;&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">2</span>, <span class="number">0</span>&#125;&#125;&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; A[<span class="number">1</span>][<span class="number">0</span>] * Pow(Pow(<span class="number">2l</span>l), M<span class="number">-2</span>) % M;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p673-循环节" class="tab-content is-hidden"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> T = <span class="number">2e9</span>+<span class="number">16</span>;</span><br><span class="line">inline pair&lt;ll,ll&gt; read() &#123;</span><br><span class="line">    <span class="keyword">char</span> c=getchar();ll x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>) c=getchar();</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)x=(x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>)%T,y=(y*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>)%(mod<span class="number">-1</span>),c=getchar();</span><br><span class="line">    <span class="keyword">return</span> &#123;x,y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">fpow</span><span class="params">(ll a,ll b)</span></span>&#123;ll r=<span class="number">1</span>;<span class="keyword">for</span>(a%=mod;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)r=r*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> r;&#125;</span><br><span class="line"><span class="function">ll <span class="title">fib</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    function&lt;ll(ll,ll,ll,ll,ll)&gt; f = [&amp;](ll a,ll b,ll p,ll q,ll n) -&gt; ll &#123;</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) <span class="keyword">return</span> f((b*q+a*q+a*p)%mod,(b*p+a*q)%mod,p,q,n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> f(a,b,(p*p+q*q)%mod,(q*q+<span class="number">2</span>*q*p)%mod,n/<span class="number">2</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> f(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">pair</span>&lt;ll,ll&gt; p=read();</span><br><span class="line">    ll n=p.first+T,n2=p.second;</span><br><span class="line">    cout&lt;&lt;(fib(n+1)+fib(n-1))%mod*fpow((mod+1)/2,n2)%mod&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div id="p673-数据生成器" class="tab-content is-hidden"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;testlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> testIndex = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nextTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    testIndex++;</span><br><span class="line">    freopen((<span class="string">&quot;data/&quot;</span>+to_string(testIndex)+<span class="string">&quot;.in&quot;</span>).c_str(), <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    registerGen(argc, argv, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        nextTest();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nextTest();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rnd.next(<span class="string">&quot;[1-9][0-9]&#123;1,10&#125;&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    nextTest();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rnd.next(<span class="string">&quot;[1-9][0-9]&#123;10,100&#125;&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    nextTest();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rnd.next(<span class="string">&quot;[1-9][0-9]&#123;100,1000&#125;&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    nextTest();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rnd.next(<span class="string">&quot;[1-9][0-9]&#123;1000,10000&#125;&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    nextTest();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rnd.next(<span class="string">&quot;[1-9][0-9]&#123;10000,100000&#125;&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    nextTest();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rnd.next(<span class="string">&quot;[1-9][0-9]&#123;100000,999999&#125;&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    nextTest();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rnd.next(<span class="string">&quot;[1-9][0-9]&#123;999999&#125;&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    nextTest();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rnd.next(<span class="string">&quot;1[0]&#123;1000000&#125;&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>                  </div><h2 id="艾尔奇亚的国王"><a href="https://scut.online/p/666">艾尔奇亚的国王</a><a class="header-anchor" href="#艾尔奇亚的国王">#</a></h2><p>题意：A有 n 个筹码，可以从<span role="math">$[l_1, r_1]$</span>区间随机选整数。<br>B有 m 个筹码，可以从<span role="math">$[l_2, r_2]$</span>区间随机选整数。</p><p>数字大的人拿走数字小的人的筹码，（数字相同算平局），没有筹码的人算输。</p><p>求A、B赢的概率。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">double</span> p,k,q,sum;</span><br><span class="line"><span class="keyword">double</span> f[maxn];</span><br><span class="line"><span class="keyword">int</span> n,l1,r1,m,l2,r2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos==n+m) f[pos]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> tx=p/(<span class="number">1</span>-k-q*x);</span><br><span class="line">        getf(pos+<span class="number">1</span>,tx);</span><br><span class="line">        f[pos]=tx*f[pos+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d%d&quot;</span>,&amp;n,&amp;l1,&amp;r1,&amp;m,&amp;l2,&amp;r2)==<span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=k=q=sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l1;i&lt;=r1;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=l2;j&lt;=r2;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;j) p+=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==j) k+=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> q+=<span class="number">1</span>;</span><br><span class="line">                sum+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p/=sum;k/=sum;q/=sum;</span><br><span class="line">        getf(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.3f %.3f\n&quot;</span>,f[n],<span class="number">1.0</span>-f[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="umi炒饭"><a href="https://scut.online/p/667">umi炒饭</a><a class="header-anchor" href="#umi炒饭">#</a></h2><p>题意：给n个点的坐标以及权值，问一个长w宽h的矩形内的点权值之和的最大值。</p><p>前置知识：线段树、扫描线</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;tmp) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y==tmp.y) <span class="keyword">return</span> x&lt;tmp.x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> y&lt;tmp.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Node node[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n,w,h,cnt;</span><br><span class="line"><span class="keyword">int</span> tx[maxn&lt;&lt;<span class="number">1</span>],ty[maxn&lt;&lt;<span class="number">1</span>],tree[maxn&lt;&lt;<span class="number">2</span>],lazy[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[root]=<span class="number">0</span>;</span><br><span class="line">        lazy[root]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> lrt=root&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rrt=lrt+<span class="number">1</span>;</span><br><span class="line">    build(lrt,l,mid);</span><br><span class="line">    build(rrt,mid+<span class="number">1</span>,r);</span><br><span class="line">    tree[root]=<span class="number">0</span>;</span><br><span class="line">    lazy[root]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[root])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> lrt=root&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rrt=lrt+<span class="number">1</span>;</span><br><span class="line">        lazy[lrt]+=lazy[root];</span><br><span class="line">        lazy[rrt]+=lazy[root];</span><br><span class="line">        tree[lrt]+=lazy[root];</span><br><span class="line">        tree[rrt]+=lazy[root];</span><br><span class="line">        lazy[root]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> val,<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=ql&amp;&amp;r&lt;=qr)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[root]+=val;</span><br><span class="line">        lazy[root]+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(root);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> lrt=root&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rrt=lrt+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(qr&lt;=mid) add(ql,qr,val,lrt,l,mid);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ql&gt;mid) add(ql,qr,val,rrt,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">else</span> add(ql,qr,val,lrt,l,mid),add(ql,qr,val,rrt,mid+<span class="number">1</span>,r);</span><br><span class="line">    tree[root]=max(tree[lrt],tree[rrt]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=ql&amp;&amp;r&lt;=qr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[root];</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(root);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> lrt=root&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rrt=lrt+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(qr&lt;=mid) <span class="keyword">return</span> query(ql,qr,lrt,l,mid);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ql&gt;mid) <span class="keyword">return</span> query(ql,qr,rrt,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(ql,qr,lrt,l,mid)+query(ql,qr,rrt,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;w,&amp;h)==<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;node[i].x,&amp;node[i].y,&amp;node[i].val);</span><br><span class="line">            tx[++cnt]=node[i].x;</span><br><span class="line">            ty[cnt]=node[i].y;</span><br><span class="line"></span><br><span class="line">            node[i+n].x=node[i].x;</span><br><span class="line">            node[i+n].y=node[i].y+h+<span class="number">1</span>;</span><br><span class="line">            node[i+n].val=-node[i].val;</span><br><span class="line">            tx[++cnt]=node[i+n].x;</span><br><span class="line">            ty[cnt]=node[i+n].y;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(node+<span class="number">1</span>,node+<span class="number">1</span>+n+n);</span><br><span class="line">        sort(tx+<span class="number">1</span>,tx+<span class="number">1</span>+cnt);</span><br><span class="line">        sort(ty+<span class="number">1</span>,ty+<span class="number">1</span>+cnt);</span><br><span class="line">        <span class="keyword">int</span> cx=unique(tx+<span class="number">1</span>,tx+<span class="number">1</span>+cnt)-tx<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> cy=unique(ty+<span class="number">1</span>,ty+<span class="number">1</span>+cnt)-ty<span class="number">-1</span>;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,cx);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=cy;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;=<span class="number">2</span>*n&amp;&amp;node[j].y&lt;=ty[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> ql=lower_bound(tx+<span class="number">1</span>,tx+<span class="number">1</span>+cx,node[j].x)-tx;</span><br><span class="line">                <span class="keyword">int</span> qr=upper_bound(tx+<span class="number">1</span>,tx+<span class="number">1</span>+cx,node[j].x+w)-tx<span class="number">-1</span>;</span><br><span class="line">                add(ql,qr,node[j].val,<span class="number">1</span>,<span class="number">1</span>,cx);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=max(ans,tree[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//#include&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="line"><span class="comment">//#include&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span><br><span class="line"><span class="comment">//#include&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span><br><span class="line"><span class="comment">//#include&lt;ext/pb_ds/trie_policy.hpp&gt;</span></span><br><span class="line"><span class="comment">//#include&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span><br><span class="line"><span class="comment">//#include&lt;ext/rope&gt;</span></span><br><span class="line"><span class="comment">//using namespace __gnu_cxx;</span></span><br><span class="line"><span class="comment">//using namespace __gnu_pbds;</span></span><br><span class="line"><span class="comment">//void err(istream_iterator&lt;string&gt; it)&#123;cerr&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="comment">//template&lt;typename T, typename... Args&gt;void err(istream_iterator&lt;string&gt; it, T a, Args... args)&#123;cerr &lt;&lt; *it &lt;&lt; &quot; = &quot; &lt;&lt; a &lt;&lt; &quot; , &quot;;err(++it, args...);&#125;</span></span><br><span class="line"><span class="comment">//#define error(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), &#x27;,&#x27;, &#x27; &#x27;); stringstream _ss(_s); istream_iterator&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset((a),b,sizeof((a)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fpre(x) cout&lt;&lt;fixed&lt;&lt;setprecision(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(v) (v).clear()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdd pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pli pair<span class="meta-string">&lt;ll,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pll pair<span class="meta-string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld long double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uint unsigned int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ushort unsigned short</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(i) (i&amp;(-i))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (rt&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson lson|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">const</span> ld pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(ld x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;-eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------------------------------------head</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> lzy[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t[rt]=lzy[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(l,m,lson);</span><br><span class="line">    build(m+<span class="number">1</span>,r,rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lzy[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=lzy[rt];</span><br><span class="line">        t[lson]+=v;</span><br><span class="line">        t[rson]+=v;</span><br><span class="line">        lzy[lson]+=v;</span><br><span class="line">        lzy[rson]+=v;</span><br><span class="line">        lzy[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        t[rt]+=v;</span><br><span class="line">        lzy[rt]+=v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pd(rt);</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;=L)</span><br><span class="line">        upd(L,R,v,l,m,lson);</span><br><span class="line">    <span class="keyword">if</span>(m&lt;R)</span><br><span class="line">        upd(L,R,v,m+<span class="number">1</span>,r,rson);</span><br><span class="line">    t[rt]=max(t[lson],t[rson]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pair</span>&lt;pii,ll&gt;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,w,h;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;w&gt;&gt;h)</span><br><span class="line">    &#123;</span><br><span class="line">        assert(n&gt;=<span class="number">0</span>&amp;&amp;n&lt;=<span class="number">10000</span>);</span><br><span class="line">        assert(w&gt;=<span class="number">1</span>&amp;&amp;w&lt;=<span class="number">20000</span>);</span><br><span class="line">        assert(h&gt;=<span class="number">1</span>&amp;&amp;w&lt;=<span class="number">20000</span>);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1e5</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i].fi.fi&gt;&gt;a[i].fi.se&gt;&gt;a[i].se;</span><br><span class="line">            assert(a[i].fi.fi&gt;=<span class="number">-1e4</span>&amp;&amp;a[i].fi.fi&lt;=<span class="number">1e4</span>);</span><br><span class="line">            assert(a[i].fi.se&gt;=<span class="number">-1e4</span>&amp;&amp;a[i].fi.se&lt;=<span class="number">1e4</span>);</span><br><span class="line">            assert(a[i].se&gt;=<span class="number">1</span>&amp;&amp;a[i].se&lt;=<span class="number">1e5</span>);</span><br><span class="line">            a[i].fi.fi+=<span class="number">3e4</span>+<span class="number">1</span>;</span><br><span class="line">            a[i].fi.se+=<span class="number">3e4</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a,a+n);</span><br><span class="line">        <span class="keyword">int</span> mx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            upd(a[i].fi.se-h,a[i].fi.se,a[i].se,<span class="number">1</span>,<span class="number">1e5</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(a[i].fi.fi-w&gt;a[j].fi.fi)</span><br><span class="line">            &#123;</span><br><span class="line">                upd(a[j].fi.se-h,a[j].fi.se,-a[j].se,<span class="number">1</span>,<span class="number">1e5</span>,<span class="number">1</span>);</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">            mx=max(mx,t[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;mx&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="谜拟Q-plus"><a href="https://scut.online/p/677">谜拟Q plus</a><a class="header-anchor" href="#谜拟Q-plus">#</a></h2><p>分析：【贪心】【dp】【二分】</p><p>参考代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,Q,num1,num2;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[N],rem[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tp1</span>&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Tp1 &amp;op)<span class="keyword">const</span>&#123; <span class="keyword">return</span> (a==op.a)?b&gt;op.b:a&lt;op.a; &#125;</span><br><span class="line">&#125;tp1[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tp2</span>&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Tp2 &amp;op)<span class="keyword">const</span>&#123; <span class="keyword">return</span> (b==op.b)?a&lt;op.a:b&gt;op.b; &#125;</span><br><span class="line">&#125;tp2[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hh</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x,id,ans;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(hh a,hh b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(hh a,hh b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l,r,mid,ret=<span class="number">0</span>;</span><br><span class="line">l=<span class="number">1</span>;r=num2;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(dp[mid]&lt;=x) ret=max(ret,mid),l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=y) tp1[++num1]=(Tp1)&#123;x,y&#125;;</span><br><span class="line"><span class="keyword">else</span> tp2[++num2]=(Tp2)&#123;x,y&#125;; </span><br><span class="line">&#125;</span><br><span class="line">sort(tp1+<span class="number">1</span>,tp1+num1+<span class="number">1</span>); sort(tp2+<span class="number">1</span>,tp2+num2+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">127</span>/<span class="number">3</span>,<span class="keyword">sizeof</span>(dp)); dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=num2;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=num2-i+<span class="number">1</span>;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[j<span class="number">-1</span>]&gt;tp2[i].b) dp[j]=min(dp[j],dp[j<span class="number">-1</span>]-tp2[i].b+tp2[i].a);</span><br><span class="line"><span class="keyword">else</span> dp[j]=min(dp[j],<span class="number">1</span>+tp2[i].a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;q[i].x,q[i].id=i,q[i].ans=<span class="number">-1</span>;</span><br><span class="line">sort(q+<span class="number">1</span>,q+<span class="number">1</span>+Q,cmp);</span><br><span class="line"><span class="keyword">int</span> pos,x,tans;</span><br><span class="line">pos=x=tans=<span class="number">0</span>;</span><br><span class="line">pos=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num1;i++)</span><br><span class="line">rem[i]=rem[i<span class="number">-1</span>]-tp1[i].a+tp1[i].b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num1;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;___&quot;&lt;&lt;q[pos].x&lt;&lt;&quot;  &quot;&lt;&lt;tp1[i].a-x&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">while</span>(pos&lt;=Q&amp;&amp;q[pos].x&lt;=tp1[i].a-x) q[pos++].ans=tans;</span><br><span class="line">x+=-tp1[i].a+tp1[i].b;tans++;</span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;&quot;*&quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;pos&lt;&lt;&quot;    &quot;&lt;&lt;tp1[i].a&lt;&lt;&quot; &quot;&lt;&lt;tp1[i].b&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(pos&gt;Q) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)</span><br><span class="line"><span class="keyword">if</span>(q[i].ans==<span class="number">-1</span>) q[i].ans=num1;</span><br><span class="line">sort(q+<span class="number">1</span>,q+<span class="number">1</span>+Q,cmp2);</span><br><span class="line"><span class="comment">/*for(int i=1;i&lt;=Q;i++)</span></span><br><span class="line"><span class="comment">cout&lt;&lt;q[i].ans&lt;&lt;&quot; &quot;;cout&lt;&lt;endl; </span></span><br><span class="line"><span class="comment">for(int i=1;i&lt;=num2;i++)</span></span><br><span class="line"><span class="comment">cout&lt;&lt;dp[i]&lt;&lt;&quot; &quot;;cout&lt;&lt;endl; */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,q[i].ans+find(rem[q[i].ans]+q[i].x));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="世界棋盘"><a href="https://scut.online/p/676">世界棋盘</a><a class="header-anchor" href="#世界棋盘">#</a></h2><p>分析【min25筛法】【杜教筛】</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">ll n, k, sqr, nsqr;</span><br><span class="line"><span class="keyword">int</span> p[maxn], cntp;</span><br><span class="line">ll prep[maxn];</span><br><span class="line"><span class="keyword">bool</span> np[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!np[i])&#123;</span><br><span class="line">            p[++cntp] = i;</span><br><span class="line">            prep[cntp] = prep[cntp - <span class="number">1</span>] + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cntp &amp;&amp; i * p[j] &lt;= x; ++j)&#123;</span><br><span class="line">            np[i * p[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ll w[maxn], cntw, h[maxn], s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ID</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt;= nsqr ? cntw - x + <span class="number">1</span> : n / x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calw</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cntw = sqr + nsqr - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sqr; ++i)&#123;</span><br><span class="line">        w[i] = n / i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = sqr + <span class="number">1</span>; i &lt;= cntw; ++i)&#123;</span><br><span class="line">        w[i] = w[i - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntw; ++i)&#123;</span><br><span class="line">        h[i] = w[i] * (w[i] + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntp; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cntw &amp;&amp; <span class="number">1l</span>l * p[i] * p[i] &lt;= w[j]; ++j)&#123;</span><br><span class="line">            h[j] -= p[i] * (h[ID(w[j] / p[i])] - prep[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = cntp; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cntw &amp;&amp; <span class="number">1l</span>l * p[i] * p[i] &lt;= w[j]; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ll k = p[i]; <span class="number">1l</span>l * k * p[i] &lt;= w[j]; k *= p[i]) &#123;</span><br><span class="line">                s[j] += s[ID(w[j] / k)] + h[ID(w[j] / k)] - prep[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">S</span><span class="params">(ll x, ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= <span class="number">2</span> || p[k] &gt; x)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt;= cntp &amp;&amp; <span class="number">1l</span>l * p[i] * p[i] &lt;= x; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(ll j = p[i];<span class="number">1l</span>l * j * p[i] &lt;= x; j *= p[i])&#123;</span><br><span class="line">            ans = (ans + h[ID(x / j)] - prep[i - <span class="number">1</span>] + S(x / j, i + <span class="number">1</span>)) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ll g[maxn];</span><br><span class="line"><span class="function">ll <span class="title">G</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> id = ID(x);</span><br><span class="line">    <span class="keyword">if</span>(g[id])&#123;</span><br><span class="line">        <span class="keyword">return</span> g[id];</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = (<span class="number">1</span> + s[id] + h[id]) % mod;</span><br><span class="line">    <span class="keyword">for</span>(ll l = <span class="number">2</span>, r; l &lt;= x; l = r + <span class="number">1</span>)&#123;</span><br><span class="line">        r = x / (x / l);</span><br><span class="line">        ans = (ans - (r - l + <span class="number">1</span>) * G(x / l) % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> g[id] = ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    sqr = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    nsqr = n / sqr;</span><br><span class="line">    sieve(sqr);</span><br><span class="line">    calw();</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>)&#123;</span><br><span class="line">        r = n / (n / l);</span><br><span class="line">        ans = (ans + (n / l) * (n / l) % mod * (G(r) - G(l - <span class="number">1</span>) + mod) % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power_mod</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = !!a;</span><br><span class="line"><span class="keyword">for</span>(; b; b &gt;&gt;= <span class="number">1</span>, a = (ll) a * a % mod)</span><br><span class="line"><span class="keyword">if</span>(b &amp; <span class="number">1</span>) r = (ll) r * a % mod;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bitset</span>&lt;N&gt; np;</span><br><span class="line"><span class="keyword">int</span> p[N&gt;&gt;<span class="number">2</span>], pn;</span><br><span class="line">ll pg[N&gt;&gt;<span class="number">2</span>], ph[N&gt;&gt;<span class="number">2</span>]; <span class="comment">// pg(n) = \sum_&#123;i=1&#125;^n g[p[i]]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= sz; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!np[i]) &#123;</span><br><span class="line">++pn;</span><br><span class="line">p[pn] = i;</span><br><span class="line">pg[pn] = (pg[pn - <span class="number">1</span>] + <span class="number">1</span>) % mod;</span><br><span class="line">ph[pn] = (ph[pn - <span class="number">1</span>] + i) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= pn &amp;&amp; i * p[j] &lt;= sz; j++) &#123;</span><br><span class="line">np[i * p[j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i % p[j] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _id[N*<span class="number">2</span>], m;</span><br><span class="line">ll n;</span><br><span class="line">ll w[N * <span class="number">2</span>];</span><br><span class="line">ll Pg[N * <span class="number">2</span>], Ph[N * <span class="number">2</span>]; <span class="comment">// Pg(n) = \sum_&#123;i=1&#125;^&#123;w[n]&#125; g[i] [i in Prime ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &lt; N ? x : n / x + N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Id</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> _id[id(x)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> __int128 i16;</span><br><span class="line"></span><br><span class="line">ll G[N * <span class="number">2</span>], H[N * <span class="number">2</span>];</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">*** G(n) = \sum_&#123;i = 1&#125;^&#123;w[n]&#125; -mu[i]</span></span><br><span class="line"><span class="comment">*** H(n) = \sum_&#123;i = 1&#125;^&#123;w[n]&#125; -mu[i] * minp[i]</span></span><br><span class="line"><span class="comment">        G(n, j) = \sum_&#123;i = 1&#125;^n [minp[i] &gt;= p[j] and i not in Prime] -mu[i] = G(n, j + 1) + mu[p[j]] * (G(n / p[j], j + 1) + Pg(n / p[j]) - pg(j - 1))</span></span><br><span class="line"><span class="comment">        H(n, j) = \sum_&#123;i = 1&#125;^n [minp[i] &gt;= p[j] and i not in Prime] -mu[i]*minp[i] = H(n, j + 1) - p[j] * (G(n / p[j], j + 1) + Pg(n / p[j]) - pg(j - 1))</span></span><br><span class="line"><span class="comment">*** ans = \sum_&#123;i = 1&#125;^n (n/i)^2 * mu[i] * (1 - minp[i])</span></span><br><span class="line"><span class="comment">                = \sum_&#123;i = 1&#125;^n (n/i)^2 * (H(n) - G(n))</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</span><br><span class="line">sieve(sz);</span><br><span class="line">m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ll l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">r = n / (n / l);</span><br><span class="line">w[++m] = n / l;</span><br><span class="line">_id[id(w[m])] = m;</span><br><span class="line">Pg[m] = (w[m] - <span class="number">1</span>) % mod;</span><br><span class="line">Ph[m] = ((i16) w[m] * (w[m] + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= pn; j++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m &amp;&amp; (ll) p[j] * p[j] &lt;= w[i]; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> k = Id(w[i] / p[j]);</span><br><span class="line">Pg[i] = (Pg[i] - (Pg[k] - pg[j - <span class="number">1</span>])) % mod;</span><br><span class="line">Ph[i] = (Ph[i] - p[j] * (Ph[k] - ph[j - <span class="number">1</span>])) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = pn; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m &amp;&amp; (ll) p[j] * p[j] &lt;= w[i]; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> k = Id(w[i] / p[j]);</span><br><span class="line">G[i] = (G[i] - (G[k] + Pg[k] - pg[j])) % mod;</span><br><span class="line">H[i] = (H[i] - p[j] * (G[k] + Pg[k] - pg[j])) % mod;</span><br><span class="line"><span class="comment">//cout &lt;&lt; w[i] &lt;&lt; &#x27; &#x27; &lt;&lt; p[j] &lt;&lt; &#x27; &#x27; &lt;&lt; G[i] &lt;&lt; &quot; ha &quot; &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">G[i] = (G[i] + Pg[i] - <span class="number">1</span>) % mod;</span><br><span class="line">H[i] = (H[i] + Ph[i]) % mod;</span><br><span class="line"><span class="keyword">if</span>(G[i] &lt; <span class="number">0</span>) G[i] += mod;</span><br><span class="line"><span class="keyword">if</span>(H[i] &lt; <span class="number">0</span>) H[i] += mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">cout &lt;&lt; m &lt;&lt; &quot; JDH  &quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">for(int i = 1; i &lt;= m; i++) &#123;</span></span><br><span class="line"><span class="comment">  cout &lt;&lt; w[i] &lt;&lt; &#x27; &#x27; &lt;&lt; G[i] &lt;&lt; &#x27; &#x27; &lt;&lt; H[i] &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*** \sum_&#123;i=1&#125;^n \sum_&#123;d|i&#125; mu[d] * maxp[i / d] = sum_&#123;i=1&#125;^n mu[i] * (1 - minp[i]) ***/</span></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Muf</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k = Id(n);</span><br><span class="line">ll ret = H[k] - G[k];</span><br><span class="line"><span class="keyword">if</span>(ret &lt; <span class="number">0</span>) ret += mod;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line">freopen(<span class="string">&quot;in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">ll B = <span class="built_in">sqrt</span>(n) + <span class="number">10</span>;</span><br><span class="line">init(B);</span><br><span class="line">ll ret = <span class="number">0</span>, last = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ll l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">r = n / (n / l);</span><br><span class="line">ll cur = Muf(r);</span><br><span class="line">ret = (ret + (i16) (n / l) * (n / l) % mod * (cur - last)) % mod;</span><br><span class="line">last = cur;</span><br><span class="line"><span class="comment">//cout &lt;&lt; l &lt;&lt; &#x27; &#x27; &lt;&lt; r &lt;&lt; &#x27; &#x27; &lt;&lt; ret &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for(int i = 1; i &lt;= m; i++) &#123;</span></span><br><span class="line"><span class="comment">  cout &lt;&lt; w[i] &lt;&lt; &#x27; &#x27; &lt;&lt; Muf(w[i]) &lt;&lt; &#x27; &#x27; &lt;&lt; Pg[i] &lt;&lt; &#x27; &#x27; &lt;&lt; Ph[i] &lt;&lt; endl;;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">if</span>(ret &lt; <span class="number">0</span>) ret += mod;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ret &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;第一次作为出题人参与一场算法竞赛，感受还是很不同的。相比与参赛者，少了一些紧张刺激新鲜感，当然也少了一些自闭。&lt;/p&gt;
&lt;p&gt;比赛在&lt;a href=&quot;https://scut.online&quot;&gt;SCUT CODE&lt;/a&gt;上举行，总体而言这个系统做的还是挺不错的，响应迅速，功能齐全。唯一要吐槽的就是题目竟然只能添加不能删除！添加比赛需要一些玄之又玄的操作。还有Special Judge也是非常难配置，还缺少了交互功能。第一场由于没有放特别简单的签到题导致大量选手爆0，导致第二场人数锐减。。。不过第二场比赛的题目最后经过调整还是简单了许多的。下面按难度总结一下这次比赛的题目，目前题目已经全部开放了，可以在题库中找到提交。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://scut.online/contest/106&quot;&gt;第一场比赛链接&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://scut.online/contest/99&quot;&gt;第二场比赛链接&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机" scheme="https://blog.tootal.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="算法竞赛" scheme="https://blog.tootal.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="ACM" scheme="https://blog.tootal.xyz/tags/ACM/"/>
    
    <category term="算法" scheme="https://blog.tootal.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
